
CRC_PWM_F4_New1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003660  08003660  00013660  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800367c  0800367c  0001367c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003684  08003684  00013684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003688  08003688  00013688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  0800368c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000f38  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000f44  20000f44  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00012b74  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002a6d  00000000  00000000  00032bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000076f9  00000000  00000000  0003561d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d10  00000000  00000000  0003cd18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f40  00000000  00000000  0003da28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000067e2  00000000  00000000  0003e968  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004744  00000000  00000000  0004514a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004988e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000263c  00000000  00000000  0004990c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003648 	.word	0x08003648

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003648 	.word	0x08003648

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 fa9c 	bl	8000a2c <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 fa50 	bl	80009a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	20000008 	.word	0x20000008
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 fa21 	bl	8000984 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f002 fa24 	bl	8002994 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000050 	.word	0x20000050
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000050 	.word	0x20000050

08000578 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000578:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800057a:	4604      	mov	r4, r0
 800057c:	2800      	cmp	r0, #0
 800057e:	f000 809b 	beq.w	80006b8 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000582:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000584:	b925      	cbnz	r5, 8000590 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000586:	f002 fa21 	bl	80029cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800058a:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800058c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000590:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000592:	06db      	lsls	r3, r3, #27
 8000594:	f100 808e 	bmi.w	80006b4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000598:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800059a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800059e:	f023 0302 	bic.w	r3, r3, #2
 80005a2:	f043 0302 	orr.w	r3, r3, #2
 80005a6:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80005a8:	4b44      	ldr	r3, [pc, #272]	; (80006bc <HAL_ADC_Init+0x144>)
 80005aa:	685a      	ldr	r2, [r3, #4]
 80005ac:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005b0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80005b2:	685a      	ldr	r2, [r3, #4]
 80005b4:	6861      	ldr	r1, [r4, #4]
 80005b6:	430a      	orrs	r2, r1
 80005b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005ba:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005bc:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005c6:	685a      	ldr	r2, [r3, #4]
 80005c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80005cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005ce:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005d0:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005d2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80005d6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005d8:	685a      	ldr	r2, [r3, #4]
 80005da:	430a      	orrs	r2, r1
 80005dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005de:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005e0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80005e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005e8:	689a      	ldr	r2, [r3, #8]
 80005ea:	430a      	orrs	r2, r1
 80005ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005ee:	4934      	ldr	r1, [pc, #208]	; (80006c0 <HAL_ADC_Init+0x148>)
 80005f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005f2:	428a      	cmp	r2, r1
 80005f4:	d052      	beq.n	800069c <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80005f6:	6899      	ldr	r1, [r3, #8]
 80005f8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80005fc:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80005fe:	6899      	ldr	r1, [r3, #8]
 8000600:	430a      	orrs	r2, r1
 8000602:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000604:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000606:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000608:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800060c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800060e:	689a      	ldr	r2, [r3, #8]
 8000610:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000612:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000614:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000616:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000618:	f022 0202 	bic.w	r2, r2, #2
 800061c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800061e:	689a      	ldr	r2, [r3, #8]
 8000620:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000624:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000626:	f894 2020 	ldrb.w	r2, [r4, #32]
 800062a:	2a00      	cmp	r2, #0
 800062c:	d03e      	beq.n	80006ac <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800062e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000630:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000636:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000638:	685a      	ldr	r2, [r3, #4]
 800063a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800063e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000640:	685a      	ldr	r2, [r3, #4]
 8000642:	3901      	subs	r1, #1
 8000644:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000648:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800064a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800064c:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800064e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000652:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000656:	3901      	subs	r1, #1
 8000658:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800065c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800065e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000660:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000664:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000668:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800066a:	689a      	ldr	r2, [r3, #8]
 800066c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000670:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000672:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000674:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800067a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800067c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800067e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000680:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000684:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000686:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000688:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800068a:	f023 0303 	bic.w	r3, r3, #3
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000694:	2300      	movs	r3, #0
 8000696:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800069a:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006a4:	689a      	ldr	r2, [r3, #8]
 80006a6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006aa:	e7b2      	b.n	8000612 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006ac:	685a      	ldr	r2, [r3, #4]
 80006ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006b2:	e7c9      	b.n	8000648 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80006b4:	2001      	movs	r0, #1
 80006b6:	e7ed      	b.n	8000694 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80006b8:	2001      	movs	r0, #1
}
 80006ba:	bd38      	pop	{r3, r4, r5, pc}
 80006bc:	40012300 	.word	0x40012300
 80006c0:	0f000001 	.word	0x0f000001

080006c4 <HAL_ADC_Start>:
{
 80006c4:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80006c6:	2300      	movs	r3, #0
 80006c8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80006ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d061      	beq.n	8000796 <HAL_ADC_Start+0xd2>
 80006d2:	2301      	movs	r3, #1
 80006d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006d8:	6803      	ldr	r3, [r0, #0]
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	07d1      	lsls	r1, r2, #31
 80006de:	d505      	bpl.n	80006ec <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006e0:	689a      	ldr	r2, [r3, #8]
 80006e2:	07d2      	lsls	r2, r2, #31
 80006e4:	d414      	bmi.n	8000710 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 80006e6:	2000      	movs	r0, #0
}
 80006e8:	b002      	add	sp, #8
 80006ea:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 80006ec:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006ee:	492b      	ldr	r1, [pc, #172]	; (800079c <HAL_ADC_Start+0xd8>)
    __HAL_ADC_ENABLE(hadc);
 80006f0:	f042 0201 	orr.w	r2, r2, #1
 80006f4:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006f6:	4a2a      	ldr	r2, [pc, #168]	; (80007a0 <HAL_ADC_Start+0xdc>)
 80006f8:	6812      	ldr	r2, [r2, #0]
 80006fa:	fbb2 f2f1 	udiv	r2, r2, r1
 80006fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8000702:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8000704:	9a01      	ldr	r2, [sp, #4]
 8000706:	2a00      	cmp	r2, #0
 8000708:	d0ea      	beq.n	80006e0 <HAL_ADC_Start+0x1c>
      counter--;
 800070a:	9a01      	ldr	r2, [sp, #4]
 800070c:	3a01      	subs	r2, #1
 800070e:	e7f8      	b.n	8000702 <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8000710:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000712:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000716:	f022 0201 	bic.w	r2, r2, #1
 800071a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800071e:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000720:	685a      	ldr	r2, [r3, #4]
 8000722:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000724:	bf41      	itttt	mi
 8000726:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8000728:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 800072c:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000730:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000732:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000734:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000738:	bf1c      	itt	ne
 800073a:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 800073c:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000740:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000742:	2200      	movs	r2, #0
 8000744:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000748:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800074c:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800074e:	4a15      	ldr	r2, [pc, #84]	; (80007a4 <HAL_ADC_Start+0xe0>)
 8000750:	6851      	ldr	r1, [r2, #4]
 8000752:	f011 0f1f 	tst.w	r1, #31
 8000756:	4914      	ldr	r1, [pc, #80]	; (80007a8 <HAL_ADC_Start+0xe4>)
 8000758:	d11a      	bne.n	8000790 <HAL_ADC_Start+0xcc>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800075a:	428b      	cmp	r3, r1
 800075c:	d006      	beq.n	800076c <HAL_ADC_Start+0xa8>
 800075e:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8000762:	428b      	cmp	r3, r1
 8000764:	d10b      	bne.n	800077e <HAL_ADC_Start+0xba>
 8000766:	6852      	ldr	r2, [r2, #4]
 8000768:	06d2      	lsls	r2, r2, #27
 800076a:	d1bc      	bne.n	80006e6 <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800076c:	6898      	ldr	r0, [r3, #8]
 800076e:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000772:	d1b8      	bne.n	80006e6 <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000774:	689a      	ldr	r2, [r3, #8]
 8000776:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	e7b4      	b.n	80006e8 <HAL_ADC_Start+0x24>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800077e:	490b      	ldr	r1, [pc, #44]	; (80007ac <HAL_ADC_Start+0xe8>)
 8000780:	428b      	cmp	r3, r1
 8000782:	d1b0      	bne.n	80006e6 <HAL_ADC_Start+0x22>
 8000784:	6852      	ldr	r2, [r2, #4]
 8000786:	f002 021f 	and.w	r2, r2, #31
 800078a:	2a0f      	cmp	r2, #15
 800078c:	d9ee      	bls.n	800076c <HAL_ADC_Start+0xa8>
 800078e:	e7aa      	b.n	80006e6 <HAL_ADC_Start+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000790:	428b      	cmp	r3, r1
 8000792:	d1a8      	bne.n	80006e6 <HAL_ADC_Start+0x22>
 8000794:	e7ea      	b.n	800076c <HAL_ADC_Start+0xa8>
  __HAL_LOCK(hadc);
 8000796:	2002      	movs	r0, #2
 8000798:	e7a6      	b.n	80006e8 <HAL_ADC_Start+0x24>
 800079a:	bf00      	nop
 800079c:	000f4240 	.word	0x000f4240
 80007a0:	20000008 	.word	0x20000008
 80007a4:	40012300 	.word	0x40012300
 80007a8:	40012000 	.word	0x40012000
 80007ac:	40012200 	.word	0x40012200

080007b0 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80007b0:	6803      	ldr	r3, [r0, #0]
 80007b2:	689a      	ldr	r2, [r3, #8]
{
 80007b4:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80007b6:	0556      	lsls	r6, r2, #21
{
 80007b8:	4604      	mov	r4, r0
 80007ba:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80007bc:	d50b      	bpl.n	80007d6 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80007be:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80007c0:	05d8      	lsls	r0, r3, #23
 80007c2:	d508      	bpl.n	80007d6 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007c6:	f043 0320 	orr.w	r3, r3, #32
 80007ca:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80007cc:	2300      	movs	r3, #0
 80007ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80007d2:	2001      	movs	r0, #1
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 80007d6:	f7ff fec9 	bl	800056c <HAL_GetTick>
 80007da:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80007dc:	6823      	ldr	r3, [r4, #0]
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	0792      	lsls	r2, r2, #30
 80007e2:	d50c      	bpl.n	80007fe <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80007e4:	f06f 0212 	mvn.w	r2, #18
 80007e8:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80007ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80007ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007f0:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80007f2:	689a      	ldr	r2, [r3, #8]
 80007f4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80007f8:	d013      	beq.n	8000822 <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 80007fa:	2000      	movs	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 80007fe:	1c69      	adds	r1, r5, #1
 8000800:	d0ed      	beq.n	80007de <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000802:	b945      	cbnz	r5, 8000816 <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000804:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000806:	f043 0304 	orr.w	r3, r3, #4
 800080a:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 800080c:	2300      	movs	r3, #0
 800080e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000812:	2003      	movs	r0, #3
 8000814:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000816:	f7ff fea9 	bl	800056c <HAL_GetTick>
 800081a:	1b80      	subs	r0, r0, r6
 800081c:	4285      	cmp	r5, r0
 800081e:	d2dd      	bcs.n	80007dc <HAL_ADC_PollForConversion+0x2c>
 8000820:	e7f0      	b.n	8000804 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000822:	7e22      	ldrb	r2, [r4, #24]
 8000824:	2a00      	cmp	r2, #0
 8000826:	d1e8      	bne.n	80007fa <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800082a:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800082e:	d002      	beq.n	8000836 <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000830:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000832:	055b      	lsls	r3, r3, #21
 8000834:	d4e1      	bmi.n	80007fa <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800083c:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800083e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000840:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000844:	d1d9      	bne.n	80007fa <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000846:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6423      	str	r3, [r4, #64]	; 0x40
}
 800084e:	bd70      	pop	{r4, r5, r6, pc}

08000850 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000850:	6803      	ldr	r3, [r0, #0]
 8000852:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000854:	4770      	bx	lr
	...

08000858 <HAL_ADC_ConfigChannel>:
{
 8000858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800085a:	2300      	movs	r3, #0
 800085c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800085e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000862:	2b01      	cmp	r3, #1
 8000864:	f000 8083 	beq.w	800096e <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000868:	680d      	ldr	r5, [r1, #0]
 800086a:	6804      	ldr	r4, [r0, #0]
 800086c:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 800086e:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000870:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000872:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000876:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000878:	d92a      	bls.n	80008d0 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800087a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800087e:	68e7      	ldr	r7, [r4, #12]
 8000880:	3b1e      	subs	r3, #30
 8000882:	f04f 0e07 	mov.w	lr, #7
 8000886:	fa0e fe03 	lsl.w	lr, lr, r3
 800088a:	ea27 070e 	bic.w	r7, r7, lr
 800088e:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000890:	68e7      	ldr	r7, [r4, #12]
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	433b      	orrs	r3, r7
 8000898:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800089a:	684a      	ldr	r2, [r1, #4]
 800089c:	2a06      	cmp	r2, #6
 800089e:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80008a2:	d825      	bhi.n	80008f0 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80008a4:	4413      	add	r3, r2
 80008a6:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80008a8:	1f59      	subs	r1, r3, #5
 80008aa:	231f      	movs	r3, #31
 80008ac:	408b      	lsls	r3, r1
 80008ae:	ea27 0303 	bic.w	r3, r7, r3
 80008b2:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80008b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80008b6:	fa06 f101 	lsl.w	r1, r6, r1
 80008ba:	4311      	orrs	r1, r2
 80008bc:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80008be:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <HAL_ADC_ConfigChannel+0x11c>)
 80008c0:	429c      	cmp	r4, r3
 80008c2:	d034      	beq.n	800092e <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 80008c4:	2300      	movs	r3, #0
 80008c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80008ca:	4618      	mov	r0, r3
}
 80008cc:	b003      	add	sp, #12
 80008ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80008d0:	6927      	ldr	r7, [r4, #16]
 80008d2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80008d6:	f04f 0e07 	mov.w	lr, #7
 80008da:	fa0e fe03 	lsl.w	lr, lr, r3
 80008de:	ea27 070e 	bic.w	r7, r7, lr
 80008e2:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80008e4:	6927      	ldr	r7, [r4, #16]
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	433b      	orrs	r3, r7
 80008ec:	6123      	str	r3, [r4, #16]
 80008ee:	e7d4      	b.n	800089a <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80008f0:	2a0c      	cmp	r2, #12
 80008f2:	d80e      	bhi.n	8000912 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80008f4:	4413      	add	r3, r2
 80008f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80008f8:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80008fc:	231f      	movs	r3, #31
 80008fe:	4093      	lsls	r3, r2
 8000900:	ea21 0303 	bic.w	r3, r1, r3
 8000904:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000906:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000908:	fa06 f202 	lsl.w	r2, r6, r2
 800090c:	431a      	orrs	r2, r3
 800090e:	6322      	str	r2, [r4, #48]	; 0x30
 8000910:	e7d5      	b.n	80008be <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000912:	4413      	add	r3, r2
 8000914:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000916:	3b41      	subs	r3, #65	; 0x41
 8000918:	221f      	movs	r2, #31
 800091a:	409a      	lsls	r2, r3
 800091c:	ea21 0202 	bic.w	r2, r1, r2
 8000920:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000922:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000924:	fa06 f103 	lsl.w	r1, r6, r3
 8000928:	4311      	orrs	r1, r2
 800092a:	62e1      	str	r1, [r4, #44]	; 0x2c
 800092c:	e7c7      	b.n	80008be <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800092e:	2d12      	cmp	r5, #18
 8000930:	d104      	bne.n	800093c <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000932:	4a11      	ldr	r2, [pc, #68]	; (8000978 <HAL_ADC_ConfigChannel+0x120>)
 8000934:	6853      	ldr	r3, [r2, #4]
 8000936:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800093a:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800093c:	f1a5 0310 	sub.w	r3, r5, #16
 8000940:	2b01      	cmp	r3, #1
 8000942:	d8bf      	bhi.n	80008c4 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000944:	4a0c      	ldr	r2, [pc, #48]	; (8000978 <HAL_ADC_ConfigChannel+0x120>)
 8000946:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000948:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800094a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800094e:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000950:	d1b8      	bne.n	80008c4 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <HAL_ADC_ConfigChannel+0x124>)
 8000954:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <HAL_ADC_ConfigChannel+0x128>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	fbb3 f2f2 	udiv	r2, r3, r2
 800095c:	230a      	movs	r3, #10
 800095e:	4353      	muls	r3, r2
        counter--;
 8000960:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000962:	9b01      	ldr	r3, [sp, #4]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d0ad      	beq.n	80008c4 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8000968:	9b01      	ldr	r3, [sp, #4]
 800096a:	3b01      	subs	r3, #1
 800096c:	e7f8      	b.n	8000960 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 800096e:	2002      	movs	r0, #2
 8000970:	e7ac      	b.n	80008cc <HAL_ADC_ConfigChannel+0x74>
 8000972:	bf00      	nop
 8000974:	40012000 	.word	0x40012000
 8000978:	40012300 	.word	0x40012300
 800097c:	20000008 	.word	0x20000008
 8000980:	000f4240 	.word	0x000f4240

08000984 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000986:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000988:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800098c:	041b      	lsls	r3, r3, #16
 800098e:	0c1b      	lsrs	r3, r3, #16
 8000990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000994:	0200      	lsls	r0, r0, #8
 8000996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800099e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80009a0:	60d3      	str	r3, [r2, #12]
 80009a2:	4770      	bx	lr
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009aa:	b530      	push	{r4, r5, lr}
 80009ac:	68dc      	ldr	r4, [r3, #12]
 80009ae:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b8:	2b04      	cmp	r3, #4
 80009ba:	bf28      	it	cs
 80009bc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009be:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	f04f 0501 	mov.w	r5, #1
 80009c4:	fa05 f303 	lsl.w	r3, r5, r3
 80009c8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009cc:	bf8c      	ite	hi
 80009ce:	3c03      	subhi	r4, #3
 80009d0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d2:	4019      	ands	r1, r3
 80009d4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d6:	fa05 f404 	lsl.w	r4, r5, r4
 80009da:	3c01      	subs	r4, #1
 80009dc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80009de:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	ea42 0201 	orr.w	r2, r2, r1
 80009e4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e8:	bfad      	iteet	ge
 80009ea:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ee:	f000 000f 	andlt.w	r0, r0, #15
 80009f2:	4b06      	ldrlt	r3, [pc, #24]	; (8000a0c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f8:	bfb5      	itete	lt
 80009fa:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fe:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a00:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000a04:	bd30      	pop	{r4, r5, pc}
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00
 8000a0c:	e000ed14 	.word	0xe000ed14

08000a10 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a10:	2800      	cmp	r0, #0
 8000a12:	db08      	blt.n	8000a26 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a14:	0942      	lsrs	r2, r0, #5
 8000a16:	2301      	movs	r3, #1
 8000a18:	f000 001f 	and.w	r0, r0, #31
 8000a1c:	fa03 f000 	lsl.w	r0, r3, r0
 8000a20:	4b01      	ldr	r3, [pc, #4]	; (8000a28 <HAL_NVIC_EnableIRQ+0x18>)
 8000a22:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000a26:	4770      	bx	lr
 8000a28:	e000e100 	.word	0xe000e100

08000a2c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a2c:	3801      	subs	r0, #1
 8000a2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a32:	d20a      	bcs.n	8000a4a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a36:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a38:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3a:	21f0      	movs	r1, #240	; 0xf0
 8000a3c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a40:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a42:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a44:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a4a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000e010 	.word	0xe000e010
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000a58:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000a5a:	4604      	mov	r4, r0
 8000a5c:	b160      	cbz	r0, 8000a78 <HAL_CRC_Init+0x20>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000a5e:	7943      	ldrb	r3, [r0, #5]
 8000a60:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a64:	b913      	cbnz	r3, 8000a6c <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000a66:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000a68:	f002 f800 	bl	8002a6c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	7163      	strb	r3, [r4, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000a70:	2301      	movs	r3, #1
 8000a72:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8000a74:	2000      	movs	r0, #0
 8000a76:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000a78:	2001      	movs	r0, #1
}
 8000a7a:	bd10      	pop	{r4, pc}

08000a7c <HAL_CRC_Calculate>:
{
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000a7c:	2302      	movs	r3, #2
{
 8000a7e:	b510      	push	{r4, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000a80:	7143      	strb	r3, [r0, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8000a82:	6803      	ldr	r3, [r0, #0]
 8000a84:	689c      	ldr	r4, [r3, #8]
 8000a86:	f044 0401 	orr.w	r4, r4, #1
 8000a8a:	609c      	str	r4, [r3, #8]
 8000a8c:	eb01 0282 	add.w	r2, r1, r2, lsl #2

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000a90:	4291      	cmp	r1, r2
 8000a92:	d104      	bne.n	8000a9e <HAL_CRC_Calculate+0x22>
  {
    hcrc->Instance->DR = pBuffer[index];
  }
  temp = hcrc->Instance->DR;
 8000a94:	681b      	ldr	r3, [r3, #0]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000a96:	2201      	movs	r2, #1
 8000a98:	7142      	strb	r2, [r0, #5]

  /* Return the CRC computed value */
  return temp;
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	bd10      	pop	{r4, pc}
    hcrc->Instance->DR = pBuffer[index];
 8000a9e:	f851 4b04 	ldr.w	r4, [r1], #4
 8000aa2:	601c      	str	r4, [r3, #0]
 8000aa4:	e7f4      	b.n	8000a90 <HAL_CRC_Calculate+0x14>

08000aa6 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000aa6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d003      	beq.n	8000ab6 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aae:	2380      	movs	r3, #128	; 0x80
 8000ab0:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ab6:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ab8:	2305      	movs	r3, #5
 8000aba:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000abe:	6813      	ldr	r3, [r2, #0]
 8000ac0:	f023 0301 	bic.w	r3, r3, #1
 8000ac4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000ac6:	2000      	movs	r0, #0
}
 8000ac8:	4770      	bx	lr
	...

08000acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ad0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ad2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000c84 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ad8:	4a68      	ldr	r2, [pc, #416]	; (8000c7c <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ada:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000c88 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ade:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ae0:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000ae2:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ae6:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000ae8:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aec:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000af0:	45b6      	cmp	lr, r6
 8000af2:	f040 80ae 	bne.w	8000c52 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000af6:	684c      	ldr	r4, [r1, #4]
 8000af8:	f024 0710 	bic.w	r7, r4, #16
 8000afc:	2f02      	cmp	r7, #2
 8000afe:	d116      	bne.n	8000b2e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000b00:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000b04:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b08:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000b0c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b10:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000b14:	f04f 0c0f 	mov.w	ip, #15
 8000b18:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000b1c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b20:	690d      	ldr	r5, [r1, #16]
 8000b22:	fa05 f50b 	lsl.w	r5, r5, fp
 8000b26:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000b2a:	f8ca 5020 	str.w	r5, [sl, #32]
 8000b2e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b32:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000b34:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b38:	fa05 f50a 	lsl.w	r5, r5, sl
 8000b3c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b3e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b42:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b46:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b4a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b4c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b50:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000b52:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b56:	d811      	bhi.n	8000b7c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000b58:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b5a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b5e:	68cf      	ldr	r7, [r1, #12]
 8000b60:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000b64:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000b68:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b6a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b6c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b70:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000b74:	409f      	lsls	r7, r3
 8000b76:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000b7a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b7c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b7e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b80:	688f      	ldr	r7, [r1, #8]
 8000b82:	fa07 f70a 	lsl.w	r7, r7, sl
 8000b86:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000b88:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b8a:	00e5      	lsls	r5, r4, #3
 8000b8c:	d561      	bpl.n	8000c52 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	f04f 0b00 	mov.w	fp, #0
 8000b92:	f8cd b00c 	str.w	fp, [sp, #12]
 8000b96:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b9a:	4d39      	ldr	r5, [pc, #228]	; (8000c80 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ba0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000ba4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000ba8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000bac:	9703      	str	r7, [sp, #12]
 8000bae:	9f03      	ldr	r7, [sp, #12]
 8000bb0:	f023 0703 	bic.w	r7, r3, #3
 8000bb4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000bb8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bbc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000bc0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bc4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000bc8:	f04f 0e0f 	mov.w	lr, #15
 8000bcc:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bd0:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bd2:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bd6:	d043      	beq.n	8000c60 <HAL_GPIO_Init+0x194>
 8000bd8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bdc:	42a8      	cmp	r0, r5
 8000bde:	d041      	beq.n	8000c64 <HAL_GPIO_Init+0x198>
 8000be0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000be4:	42a8      	cmp	r0, r5
 8000be6:	d03f      	beq.n	8000c68 <HAL_GPIO_Init+0x19c>
 8000be8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bec:	42a8      	cmp	r0, r5
 8000bee:	d03d      	beq.n	8000c6c <HAL_GPIO_Init+0x1a0>
 8000bf0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bf4:	42a8      	cmp	r0, r5
 8000bf6:	d03b      	beq.n	8000c70 <HAL_GPIO_Init+0x1a4>
 8000bf8:	4548      	cmp	r0, r9
 8000bfa:	d03b      	beq.n	8000c74 <HAL_GPIO_Init+0x1a8>
 8000bfc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000c00:	42a8      	cmp	r0, r5
 8000c02:	d039      	beq.n	8000c78 <HAL_GPIO_Init+0x1ac>
 8000c04:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c08:	42a8      	cmp	r0, r5
 8000c0a:	bf14      	ite	ne
 8000c0c:	2508      	movne	r5, #8
 8000c0e:	2507      	moveq	r5, #7
 8000c10:	fa05 f50c 	lsl.w	r5, r5, ip
 8000c14:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c18:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000c1a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c1c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c1e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000c22:	bf0c      	ite	eq
 8000c24:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000c26:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000c28:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000c2a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c2c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000c30:	bf0c      	ite	eq
 8000c32:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000c34:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000c36:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c38:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c3a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000c3e:	bf0c      	ite	eq
 8000c40:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000c42:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000c44:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000c46:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c48:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000c4a:	bf54      	ite	pl
 8000c4c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000c4e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000c50:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c52:	3301      	adds	r3, #1
 8000c54:	2b10      	cmp	r3, #16
 8000c56:	f47f af44 	bne.w	8000ae2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000c5a:	b005      	add	sp, #20
 8000c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c60:	465d      	mov	r5, fp
 8000c62:	e7d5      	b.n	8000c10 <HAL_GPIO_Init+0x144>
 8000c64:	2501      	movs	r5, #1
 8000c66:	e7d3      	b.n	8000c10 <HAL_GPIO_Init+0x144>
 8000c68:	2502      	movs	r5, #2
 8000c6a:	e7d1      	b.n	8000c10 <HAL_GPIO_Init+0x144>
 8000c6c:	2503      	movs	r5, #3
 8000c6e:	e7cf      	b.n	8000c10 <HAL_GPIO_Init+0x144>
 8000c70:	2504      	movs	r5, #4
 8000c72:	e7cd      	b.n	8000c10 <HAL_GPIO_Init+0x144>
 8000c74:	2505      	movs	r5, #5
 8000c76:	e7cb      	b.n	8000c10 <HAL_GPIO_Init+0x144>
 8000c78:	2506      	movs	r5, #6
 8000c7a:	e7c9      	b.n	8000c10 <HAL_GPIO_Init+0x144>
 8000c7c:	40013c00 	.word	0x40013c00
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40021400 	.word	0x40021400

08000c8c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c8c:	6903      	ldr	r3, [r0, #16]
 8000c8e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000c90:	bf14      	ite	ne
 8000c92:	2001      	movne	r0, #1
 8000c94:	2000      	moveq	r0, #0
 8000c96:	4770      	bx	lr

08000c98 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c98:	b10a      	cbz	r2, 8000c9e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c9a:	6181      	str	r1, [r0, #24]
 8000c9c:	4770      	bx	lr
 8000c9e:	0409      	lsls	r1, r1, #16
 8000ca0:	e7fb      	b.n	8000c9a <HAL_GPIO_WritePin+0x2>

08000ca2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000ca2:	6943      	ldr	r3, [r0, #20]
 8000ca4:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ca8:	bf08      	it	eq
 8000caa:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cac:	6181      	str	r1, [r0, #24]
 8000cae:	4770      	bx	lr

08000cb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cb4:	4604      	mov	r4, r0
 8000cb6:	b918      	cbnz	r0, 8000cc0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000cb8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000cba:	b002      	add	sp, #8
 8000cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cc0:	6803      	ldr	r3, [r0, #0]
 8000cc2:	07dd      	lsls	r5, r3, #31
 8000cc4:	d410      	bmi.n	8000ce8 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cc6:	6823      	ldr	r3, [r4, #0]
 8000cc8:	0798      	lsls	r0, r3, #30
 8000cca:	d458      	bmi.n	8000d7e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ccc:	6823      	ldr	r3, [r4, #0]
 8000cce:	071a      	lsls	r2, r3, #28
 8000cd0:	f100 809a 	bmi.w	8000e08 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cd4:	6823      	ldr	r3, [r4, #0]
 8000cd6:	075b      	lsls	r3, r3, #29
 8000cd8:	f100 80b8 	bmi.w	8000e4c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cdc:	69a2      	ldr	r2, [r4, #24]
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	f040 8119 	bne.w	8000f16 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	e7e8      	b.n	8000cba <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ce8:	4ba6      	ldr	r3, [pc, #664]	; (8000f84 <HAL_RCC_OscConfig+0x2d4>)
 8000cea:	689a      	ldr	r2, [r3, #8]
 8000cec:	f002 020c 	and.w	r2, r2, #12
 8000cf0:	2a04      	cmp	r2, #4
 8000cf2:	d007      	beq.n	8000d04 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cfa:	2a08      	cmp	r2, #8
 8000cfc:	d10a      	bne.n	8000d14 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	0259      	lsls	r1, r3, #9
 8000d02:	d507      	bpl.n	8000d14 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d04:	4b9f      	ldr	r3, [pc, #636]	; (8000f84 <HAL_RCC_OscConfig+0x2d4>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	039a      	lsls	r2, r3, #14
 8000d0a:	d5dc      	bpl.n	8000cc6 <HAL_RCC_OscConfig+0x16>
 8000d0c:	6863      	ldr	r3, [r4, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1d9      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x16>
 8000d12:	e7d1      	b.n	8000cb8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d14:	6863      	ldr	r3, [r4, #4]
 8000d16:	4d9b      	ldr	r5, [pc, #620]	; (8000f84 <HAL_RCC_OscConfig+0x2d4>)
 8000d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d1c:	d111      	bne.n	8000d42 <HAL_RCC_OscConfig+0x92>
 8000d1e:	682b      	ldr	r3, [r5, #0]
 8000d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d24:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d26:	f7ff fc21 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2a:	4d96      	ldr	r5, [pc, #600]	; (8000f84 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000d2c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2e:	682b      	ldr	r3, [r5, #0]
 8000d30:	039b      	lsls	r3, r3, #14
 8000d32:	d4c8      	bmi.n	8000cc6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d34:	f7ff fc1a 	bl	800056c <HAL_GetTick>
 8000d38:	1b80      	subs	r0, r0, r6
 8000d3a:	2864      	cmp	r0, #100	; 0x64
 8000d3c:	d9f7      	bls.n	8000d2e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000d3e:	2003      	movs	r0, #3
 8000d40:	e7bb      	b.n	8000cba <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d46:	d104      	bne.n	8000d52 <HAL_RCC_OscConfig+0xa2>
 8000d48:	682b      	ldr	r3, [r5, #0]
 8000d4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d4e:	602b      	str	r3, [r5, #0]
 8000d50:	e7e5      	b.n	8000d1e <HAL_RCC_OscConfig+0x6e>
 8000d52:	682a      	ldr	r2, [r5, #0]
 8000d54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d58:	602a      	str	r2, [r5, #0]
 8000d5a:	682a      	ldr	r2, [r5, #0]
 8000d5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d60:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1df      	bne.n	8000d26 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000d66:	f7ff fc01 	bl	800056c <HAL_GetTick>
 8000d6a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d6c:	682b      	ldr	r3, [r5, #0]
 8000d6e:	039f      	lsls	r7, r3, #14
 8000d70:	d5a9      	bpl.n	8000cc6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d72:	f7ff fbfb 	bl	800056c <HAL_GetTick>
 8000d76:	1b80      	subs	r0, r0, r6
 8000d78:	2864      	cmp	r0, #100	; 0x64
 8000d7a:	d9f7      	bls.n	8000d6c <HAL_RCC_OscConfig+0xbc>
 8000d7c:	e7df      	b.n	8000d3e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d7e:	4b81      	ldr	r3, [pc, #516]	; (8000f84 <HAL_RCC_OscConfig+0x2d4>)
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	f012 0f0c 	tst.w	r2, #12
 8000d86:	d007      	beq.n	8000d98 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d8e:	2a08      	cmp	r2, #8
 8000d90:	d111      	bne.n	8000db6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	025e      	lsls	r6, r3, #9
 8000d96:	d40e      	bmi.n	8000db6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d98:	4b7a      	ldr	r3, [pc, #488]	; (8000f84 <HAL_RCC_OscConfig+0x2d4>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	0795      	lsls	r5, r2, #30
 8000d9e:	d502      	bpl.n	8000da6 <HAL_RCC_OscConfig+0xf6>
 8000da0:	68e2      	ldr	r2, [r4, #12]
 8000da2:	2a01      	cmp	r2, #1
 8000da4:	d188      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	6921      	ldr	r1, [r4, #16]
 8000daa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000dae:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000db2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db4:	e78a      	b.n	8000ccc <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000db6:	68e2      	ldr	r2, [r4, #12]
 8000db8:	4b73      	ldr	r3, [pc, #460]	; (8000f88 <HAL_RCC_OscConfig+0x2d8>)
 8000dba:	b1b2      	cbz	r2, 8000dea <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dc0:	f7ff fbd4 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc4:	4d6f      	ldr	r5, [pc, #444]	; (8000f84 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000dc6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc8:	682b      	ldr	r3, [r5, #0]
 8000dca:	0798      	lsls	r0, r3, #30
 8000dcc:	d507      	bpl.n	8000dde <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dce:	682b      	ldr	r3, [r5, #0]
 8000dd0:	6922      	ldr	r2, [r4, #16]
 8000dd2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000dd6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000dda:	602b      	str	r3, [r5, #0]
 8000ddc:	e776      	b.n	8000ccc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dde:	f7ff fbc5 	bl	800056c <HAL_GetTick>
 8000de2:	1b80      	subs	r0, r0, r6
 8000de4:	2802      	cmp	r0, #2
 8000de6:	d9ef      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x118>
 8000de8:	e7a9      	b.n	8000d3e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000dea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dec:	f7ff fbbe 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000df0:	4d64      	ldr	r5, [pc, #400]	; (8000f84 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000df2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000df4:	682b      	ldr	r3, [r5, #0]
 8000df6:	0799      	lsls	r1, r3, #30
 8000df8:	f57f af68 	bpl.w	8000ccc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dfc:	f7ff fbb6 	bl	800056c <HAL_GetTick>
 8000e00:	1b80      	subs	r0, r0, r6
 8000e02:	2802      	cmp	r0, #2
 8000e04:	d9f6      	bls.n	8000df4 <HAL_RCC_OscConfig+0x144>
 8000e06:	e79a      	b.n	8000d3e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e08:	6962      	ldr	r2, [r4, #20]
 8000e0a:	4b60      	ldr	r3, [pc, #384]	; (8000f8c <HAL_RCC_OscConfig+0x2dc>)
 8000e0c:	b17a      	cbz	r2, 8000e2e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000e0e:	2201      	movs	r2, #1
 8000e10:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e12:	f7ff fbab 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e16:	4d5b      	ldr	r5, [pc, #364]	; (8000f84 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000e18:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e1a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e1c:	079f      	lsls	r7, r3, #30
 8000e1e:	f53f af59 	bmi.w	8000cd4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e22:	f7ff fba3 	bl	800056c <HAL_GetTick>
 8000e26:	1b80      	subs	r0, r0, r6
 8000e28:	2802      	cmp	r0, #2
 8000e2a:	d9f6      	bls.n	8000e1a <HAL_RCC_OscConfig+0x16a>
 8000e2c:	e787      	b.n	8000d3e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000e2e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e30:	f7ff fb9c 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e34:	4d53      	ldr	r5, [pc, #332]	; (8000f84 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000e36:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e38:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e3a:	0798      	lsls	r0, r3, #30
 8000e3c:	f57f af4a 	bpl.w	8000cd4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e40:	f7ff fb94 	bl	800056c <HAL_GetTick>
 8000e44:	1b80      	subs	r0, r0, r6
 8000e46:	2802      	cmp	r0, #2
 8000e48:	d9f6      	bls.n	8000e38 <HAL_RCC_OscConfig+0x188>
 8000e4a:	e778      	b.n	8000d3e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e4c:	4b4d      	ldr	r3, [pc, #308]	; (8000f84 <HAL_RCC_OscConfig+0x2d4>)
 8000e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e50:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000e54:	d128      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	9201      	str	r2, [sp, #4]
 8000e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e5e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e66:	9301      	str	r3, [sp, #4]
 8000e68:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e6a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e6c:	4d48      	ldr	r5, [pc, #288]	; (8000f90 <HAL_RCC_OscConfig+0x2e0>)
 8000e6e:	682b      	ldr	r3, [r5, #0]
 8000e70:	05d9      	lsls	r1, r3, #23
 8000e72:	d51b      	bpl.n	8000eac <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e74:	68a3      	ldr	r3, [r4, #8]
 8000e76:	4d43      	ldr	r5, [pc, #268]	; (8000f84 <HAL_RCC_OscConfig+0x2d4>)
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d127      	bne.n	8000ecc <HAL_RCC_OscConfig+0x21c>
 8000e7c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000e84:	f7ff fb72 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e88:	4d3e      	ldr	r5, [pc, #248]	; (8000f84 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000e8a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e8c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e90:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e92:	079b      	lsls	r3, r3, #30
 8000e94:	d539      	bpl.n	8000f0a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	f43f af20 	beq.w	8000cdc <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e9c:	4a39      	ldr	r2, [pc, #228]	; (8000f84 <HAL_RCC_OscConfig+0x2d4>)
 8000e9e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea6:	e719      	b.n	8000cdc <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000ea8:	2600      	movs	r6, #0
 8000eaa:	e7df      	b.n	8000e6c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eac:	682b      	ldr	r3, [r5, #0]
 8000eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000eb4:	f7ff fb5a 	bl	800056c <HAL_GetTick>
 8000eb8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eba:	682b      	ldr	r3, [r5, #0]
 8000ebc:	05da      	lsls	r2, r3, #23
 8000ebe:	d4d9      	bmi.n	8000e74 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ec0:	f7ff fb54 	bl	800056c <HAL_GetTick>
 8000ec4:	1bc0      	subs	r0, r0, r7
 8000ec6:	2802      	cmp	r0, #2
 8000ec8:	d9f7      	bls.n	8000eba <HAL_RCC_OscConfig+0x20a>
 8000eca:	e738      	b.n	8000d3e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ecc:	2b05      	cmp	r3, #5
 8000ece:	d104      	bne.n	8000eda <HAL_RCC_OscConfig+0x22a>
 8000ed0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ed2:	f043 0304 	orr.w	r3, r3, #4
 8000ed6:	672b      	str	r3, [r5, #112]	; 0x70
 8000ed8:	e7d0      	b.n	8000e7c <HAL_RCC_OscConfig+0x1cc>
 8000eda:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000edc:	f022 0201 	bic.w	r2, r2, #1
 8000ee0:	672a      	str	r2, [r5, #112]	; 0x70
 8000ee2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ee4:	f022 0204 	bic.w	r2, r2, #4
 8000ee8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1ca      	bne.n	8000e84 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000eee:	f7ff fb3d 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ef2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ef6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000efa:	0798      	lsls	r0, r3, #30
 8000efc:	d5cb      	bpl.n	8000e96 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000efe:	f7ff fb35 	bl	800056c <HAL_GetTick>
 8000f02:	1bc0      	subs	r0, r0, r7
 8000f04:	4540      	cmp	r0, r8
 8000f06:	d9f7      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x248>
 8000f08:	e719      	b.n	8000d3e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f0a:	f7ff fb2f 	bl	800056c <HAL_GetTick>
 8000f0e:	1bc0      	subs	r0, r0, r7
 8000f10:	4540      	cmp	r0, r8
 8000f12:	d9bd      	bls.n	8000e90 <HAL_RCC_OscConfig+0x1e0>
 8000f14:	e713      	b.n	8000d3e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f16:	4d1b      	ldr	r5, [pc, #108]	; (8000f84 <HAL_RCC_OscConfig+0x2d4>)
 8000f18:	68ab      	ldr	r3, [r5, #8]
 8000f1a:	f003 030c 	and.w	r3, r3, #12
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	f43f aeca 	beq.w	8000cb8 <HAL_RCC_OscConfig+0x8>
 8000f24:	4e1b      	ldr	r6, [pc, #108]	; (8000f94 <HAL_RCC_OscConfig+0x2e4>)
 8000f26:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f28:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000f2a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f2c:	d134      	bne.n	8000f98 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000f2e:	f7ff fb1d 	bl	800056c <HAL_GetTick>
 8000f32:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f34:	682b      	ldr	r3, [r5, #0]
 8000f36:	0199      	lsls	r1, r3, #6
 8000f38:	d41e      	bmi.n	8000f78 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f3a:	6a22      	ldr	r2, [r4, #32]
 8000f3c:	69e3      	ldr	r3, [r4, #28]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f42:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000f46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f48:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000f4c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f4e:	4c0d      	ldr	r4, [pc, #52]	; (8000f84 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f50:	0852      	lsrs	r2, r2, #1
 8000f52:	3a01      	subs	r2, #1
 8000f54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f58:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f5e:	f7ff fb05 	bl	800056c <HAL_GetTick>
 8000f62:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f64:	6823      	ldr	r3, [r4, #0]
 8000f66:	019a      	lsls	r2, r3, #6
 8000f68:	f53f aebc 	bmi.w	8000ce4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f6c:	f7ff fafe 	bl	800056c <HAL_GetTick>
 8000f70:	1b40      	subs	r0, r0, r5
 8000f72:	2802      	cmp	r0, #2
 8000f74:	d9f6      	bls.n	8000f64 <HAL_RCC_OscConfig+0x2b4>
 8000f76:	e6e2      	b.n	8000d3e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f78:	f7ff faf8 	bl	800056c <HAL_GetTick>
 8000f7c:	1bc0      	subs	r0, r0, r7
 8000f7e:	2802      	cmp	r0, #2
 8000f80:	d9d8      	bls.n	8000f34 <HAL_RCC_OscConfig+0x284>
 8000f82:	e6dc      	b.n	8000d3e <HAL_RCC_OscConfig+0x8e>
 8000f84:	40023800 	.word	0x40023800
 8000f88:	42470000 	.word	0x42470000
 8000f8c:	42470e80 	.word	0x42470e80
 8000f90:	40007000 	.word	0x40007000
 8000f94:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000f98:	f7ff fae8 	bl	800056c <HAL_GetTick>
 8000f9c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f9e:	682b      	ldr	r3, [r5, #0]
 8000fa0:	019b      	lsls	r3, r3, #6
 8000fa2:	f57f ae9f 	bpl.w	8000ce4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fa6:	f7ff fae1 	bl	800056c <HAL_GetTick>
 8000faa:	1b00      	subs	r0, r0, r4
 8000fac:	2802      	cmp	r0, #2
 8000fae:	d9f6      	bls.n	8000f9e <HAL_RCC_OscConfig+0x2ee>
 8000fb0:	e6c5      	b.n	8000d3e <HAL_RCC_OscConfig+0x8e>
 8000fb2:	bf00      	nop

08000fb4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fb4:	4913      	ldr	r1, [pc, #76]	; (8001004 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000fb6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fb8:	688b      	ldr	r3, [r1, #8]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	d003      	beq.n	8000fca <HAL_RCC_GetSysClockFreq+0x16>
 8000fc2:	2b08      	cmp	r3, #8
 8000fc4:	d003      	beq.n	8000fce <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000fc6:	4810      	ldr	r0, [pc, #64]	; (8001008 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000fc8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000fca:	4810      	ldr	r0, [pc, #64]	; (800100c <HAL_RCC_GetSysClockFreq+0x58>)
 8000fcc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fce:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fd0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fd2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fd4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fd8:	bf14      	ite	ne
 8000fda:	480c      	ldrne	r0, [pc, #48]	; (800100c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fdc:	480a      	ldreq	r0, [pc, #40]	; (8001008 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fde:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000fe2:	bf18      	it	ne
 8000fe4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fe6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fea:	fba1 0100 	umull	r0, r1, r1, r0
 8000fee:	f7ff f8eb 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <HAL_RCC_GetSysClockFreq+0x50>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000ffe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001002:	bd08      	pop	{r3, pc}
 8001004:	40023800 	.word	0x40023800
 8001008:	00f42400 	.word	0x00f42400
 800100c:	017d7840 	.word	0x017d7840

08001010 <HAL_RCC_ClockConfig>:
{
 8001010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001014:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001016:	4604      	mov	r4, r0
 8001018:	b910      	cbnz	r0, 8001020 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800101a:	2001      	movs	r0, #1
 800101c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001020:	4b44      	ldr	r3, [pc, #272]	; (8001134 <HAL_RCC_ClockConfig+0x124>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	f002 020f 	and.w	r2, r2, #15
 8001028:	428a      	cmp	r2, r1
 800102a:	d328      	bcc.n	800107e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800102c:	6821      	ldr	r1, [r4, #0]
 800102e:	078f      	lsls	r7, r1, #30
 8001030:	d42d      	bmi.n	800108e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001032:	07c8      	lsls	r0, r1, #31
 8001034:	d440      	bmi.n	80010b8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001036:	4b3f      	ldr	r3, [pc, #252]	; (8001134 <HAL_RCC_ClockConfig+0x124>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	f002 020f 	and.w	r2, r2, #15
 800103e:	4295      	cmp	r5, r2
 8001040:	d366      	bcc.n	8001110 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001042:	6822      	ldr	r2, [r4, #0]
 8001044:	0751      	lsls	r1, r2, #29
 8001046:	d46c      	bmi.n	8001122 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001048:	0713      	lsls	r3, r2, #28
 800104a:	d507      	bpl.n	800105c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800104c:	4a3a      	ldr	r2, [pc, #232]	; (8001138 <HAL_RCC_ClockConfig+0x128>)
 800104e:	6921      	ldr	r1, [r4, #16]
 8001050:	6893      	ldr	r3, [r2, #8]
 8001052:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001056:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800105a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800105c:	f7ff ffaa 	bl	8000fb4 <HAL_RCC_GetSysClockFreq>
 8001060:	4b35      	ldr	r3, [pc, #212]	; (8001138 <HAL_RCC_ClockConfig+0x128>)
 8001062:	4a36      	ldr	r2, [pc, #216]	; (800113c <HAL_RCC_ClockConfig+0x12c>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800106a:	5cd3      	ldrb	r3, [r2, r3]
 800106c:	40d8      	lsrs	r0, r3
 800106e:	4b34      	ldr	r3, [pc, #208]	; (8001140 <HAL_RCC_ClockConfig+0x130>)
 8001070:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001072:	2000      	movs	r0, #0
 8001074:	f7ff fa30 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8001078:	2000      	movs	r0, #0
 800107a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800107e:	b2ca      	uxtb	r2, r1
 8001080:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 030f 	and.w	r3, r3, #15
 8001088:	4299      	cmp	r1, r3
 800108a:	d1c6      	bne.n	800101a <HAL_RCC_ClockConfig+0xa>
 800108c:	e7ce      	b.n	800102c <HAL_RCC_ClockConfig+0x1c>
 800108e:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001090:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001094:	bf1e      	ittt	ne
 8001096:	689a      	ldrne	r2, [r3, #8]
 8001098:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800109c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800109e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010a0:	bf42      	ittt	mi
 80010a2:	689a      	ldrmi	r2, [r3, #8]
 80010a4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80010a8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	68a0      	ldr	r0, [r4, #8]
 80010ae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010b2:	4302      	orrs	r2, r0
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	e7bc      	b.n	8001032 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010b8:	6862      	ldr	r2, [r4, #4]
 80010ba:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <HAL_RCC_ClockConfig+0x128>)
 80010bc:	2a01      	cmp	r2, #1
 80010be:	d11d      	bne.n	80010fc <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c6:	d0a8      	beq.n	800101a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010c8:	4e1b      	ldr	r6, [pc, #108]	; (8001138 <HAL_RCC_ClockConfig+0x128>)
 80010ca:	68b3      	ldr	r3, [r6, #8]
 80010cc:	f023 0303 	bic.w	r3, r3, #3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80010d4:	f7ff fa4a 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010d8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80010dc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010de:	68b3      	ldr	r3, [r6, #8]
 80010e0:	6862      	ldr	r2, [r4, #4]
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80010ea:	d0a4      	beq.n	8001036 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ec:	f7ff fa3e 	bl	800056c <HAL_GetTick>
 80010f0:	1bc0      	subs	r0, r0, r7
 80010f2:	4540      	cmp	r0, r8
 80010f4:	d9f3      	bls.n	80010de <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80010f6:	2003      	movs	r0, #3
}
 80010f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010fc:	1e91      	subs	r1, r2, #2
 80010fe:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001100:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001102:	d802      	bhi.n	800110a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001104:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001108:	e7dd      	b.n	80010c6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110a:	f013 0f02 	tst.w	r3, #2
 800110e:	e7da      	b.n	80010c6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001110:	b2ea      	uxtb	r2, r5
 8001112:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	429d      	cmp	r5, r3
 800111c:	f47f af7d 	bne.w	800101a <HAL_RCC_ClockConfig+0xa>
 8001120:	e78f      	b.n	8001042 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001122:	4905      	ldr	r1, [pc, #20]	; (8001138 <HAL_RCC_ClockConfig+0x128>)
 8001124:	68e0      	ldr	r0, [r4, #12]
 8001126:	688b      	ldr	r3, [r1, #8]
 8001128:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800112c:	4303      	orrs	r3, r0
 800112e:	608b      	str	r3, [r1, #8]
 8001130:	e78a      	b.n	8001048 <HAL_RCC_ClockConfig+0x38>
 8001132:	bf00      	nop
 8001134:	40023c00 	.word	0x40023c00
 8001138:	40023800 	.word	0x40023800
 800113c:	08003663 	.word	0x08003663
 8001140:	20000008 	.word	0x20000008

08001144 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001146:	4a05      	ldr	r2, [pc, #20]	; (800115c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800114e:	5cd3      	ldrb	r3, [r2, r3]
 8001150:	4a03      	ldr	r2, [pc, #12]	; (8001160 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001152:	6810      	ldr	r0, [r2, #0]
}
 8001154:	40d8      	lsrs	r0, r3
 8001156:	4770      	bx	lr
 8001158:	40023800 	.word	0x40023800
 800115c:	08003673 	.word	0x08003673
 8001160:	20000008 	.word	0x20000008

08001164 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001166:	4a05      	ldr	r2, [pc, #20]	; (800117c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800116e:	5cd3      	ldrb	r3, [r2, r3]
 8001170:	4a03      	ldr	r2, [pc, #12]	; (8001180 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001172:	6810      	ldr	r0, [r2, #0]
}
 8001174:	40d8      	lsrs	r0, r3
 8001176:	4770      	bx	lr
 8001178:	40023800 	.word	0x40023800
 800117c:	08003673 	.word	0x08003673
 8001180:	20000008 	.word	0x20000008

08001184 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001184:	6a03      	ldr	r3, [r0, #32]
 8001186:	f023 0301 	bic.w	r3, r3, #1
 800118a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800118c:	6a03      	ldr	r3, [r0, #32]
{
 800118e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001190:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001192:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001194:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001196:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800119a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800119c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800119e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80011a2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80011a4:	4d0e      	ldr	r5, [pc, #56]	; (80011e0 <TIM_OC1_SetConfig+0x5c>)
 80011a6:	42a8      	cmp	r0, r5
 80011a8:	d002      	beq.n	80011b0 <TIM_OC1_SetConfig+0x2c>
 80011aa:	4e0e      	ldr	r6, [pc, #56]	; (80011e4 <TIM_OC1_SetConfig+0x60>)
 80011ac:	42b0      	cmp	r0, r6
 80011ae:	d110      	bne.n	80011d2 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80011b0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80011b2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80011b6:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80011b8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80011ba:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80011be:	d002      	beq.n	80011c6 <TIM_OC1_SetConfig+0x42>
 80011c0:	4d08      	ldr	r5, [pc, #32]	; (80011e4 <TIM_OC1_SetConfig+0x60>)
 80011c2:	42a8      	cmp	r0, r5
 80011c4:	d105      	bne.n	80011d2 <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80011c6:	694d      	ldr	r5, [r1, #20]
 80011c8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80011ca:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80011ce:	4335      	orrs	r5, r6
 80011d0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011d2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80011d4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80011d6:	684a      	ldr	r2, [r1, #4]
 80011d8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80011da:	6203      	str	r3, [r0, #32]
 80011dc:	bd70      	pop	{r4, r5, r6, pc}
 80011de:	bf00      	nop
 80011e0:	40010000 	.word	0x40010000
 80011e4:	40010400 	.word	0x40010400

080011e8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80011e8:	6a03      	ldr	r3, [r0, #32]
 80011ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011ee:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80011f0:	6a03      	ldr	r3, [r0, #32]
{
 80011f2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80011f4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80011f6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80011f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80011fa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80011fe:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001200:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001202:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001206:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800120a:	4d11      	ldr	r5, [pc, #68]	; (8001250 <TIM_OC3_SetConfig+0x68>)
 800120c:	42a8      	cmp	r0, r5
 800120e:	d003      	beq.n	8001218 <TIM_OC3_SetConfig+0x30>
 8001210:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001214:	42a8      	cmp	r0, r5
 8001216:	d114      	bne.n	8001242 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001218:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800121a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800121e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001222:	4d0b      	ldr	r5, [pc, #44]	; (8001250 <TIM_OC3_SetConfig+0x68>)
 8001224:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8001226:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800122a:	d003      	beq.n	8001234 <TIM_OC3_SetConfig+0x4c>
 800122c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001230:	42a8      	cmp	r0, r5
 8001232:	d106      	bne.n	8001242 <TIM_OC3_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001234:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001236:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001238:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800123c:	4335      	orrs	r5, r6
 800123e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001242:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001244:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001246:	684a      	ldr	r2, [r1, #4]
 8001248:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800124a:	6203      	str	r3, [r0, #32]
 800124c:	bd70      	pop	{r4, r5, r6, pc}
 800124e:	bf00      	nop
 8001250:	40010000 	.word	0x40010000

08001254 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001254:	6a03      	ldr	r3, [r0, #32]
 8001256:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800125a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800125c:	6a03      	ldr	r3, [r0, #32]
{
 800125e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001260:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001262:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001264:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001266:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800126a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800126e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001270:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001274:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001278:	4d08      	ldr	r5, [pc, #32]	; (800129c <TIM_OC4_SetConfig+0x48>)
 800127a:	42a8      	cmp	r0, r5
 800127c:	d003      	beq.n	8001286 <TIM_OC4_SetConfig+0x32>
 800127e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001282:	42a8      	cmp	r0, r5
 8001284:	d104      	bne.n	8001290 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001286:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001288:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800128c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001290:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001292:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001294:	684a      	ldr	r2, [r1, #4]
 8001296:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001298:	6203      	str	r3, [r0, #32]
 800129a:	bd30      	pop	{r4, r5, pc}
 800129c:	40010000 	.word	0x40010000

080012a0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012a0:	4a30      	ldr	r2, [pc, #192]	; (8001364 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80012a2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012a4:	4290      	cmp	r0, r2
 80012a6:	d012      	beq.n	80012ce <TIM_Base_SetConfig+0x2e>
 80012a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012ac:	d00f      	beq.n	80012ce <TIM_Base_SetConfig+0x2e>
 80012ae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80012b2:	4290      	cmp	r0, r2
 80012b4:	d00b      	beq.n	80012ce <TIM_Base_SetConfig+0x2e>
 80012b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012ba:	4290      	cmp	r0, r2
 80012bc:	d007      	beq.n	80012ce <TIM_Base_SetConfig+0x2e>
 80012be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012c2:	4290      	cmp	r0, r2
 80012c4:	d003      	beq.n	80012ce <TIM_Base_SetConfig+0x2e>
 80012c6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80012ca:	4290      	cmp	r0, r2
 80012cc:	d119      	bne.n	8001302 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 80012ce:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80012d4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012d6:	4a23      	ldr	r2, [pc, #140]	; (8001364 <TIM_Base_SetConfig+0xc4>)
 80012d8:	4290      	cmp	r0, r2
 80012da:	d029      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 80012dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012e0:	d026      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 80012e2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80012e6:	4290      	cmp	r0, r2
 80012e8:	d022      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 80012ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012ee:	4290      	cmp	r0, r2
 80012f0:	d01e      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 80012f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012f6:	4290      	cmp	r0, r2
 80012f8:	d01a      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 80012fa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80012fe:	4290      	cmp	r0, r2
 8001300:	d016      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 8001302:	4a19      	ldr	r2, [pc, #100]	; (8001368 <TIM_Base_SetConfig+0xc8>)
 8001304:	4290      	cmp	r0, r2
 8001306:	d013      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 8001308:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800130c:	4290      	cmp	r0, r2
 800130e:	d00f      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 8001310:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001314:	4290      	cmp	r0, r2
 8001316:	d00b      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 8001318:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800131c:	4290      	cmp	r0, r2
 800131e:	d007      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 8001320:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001324:	4290      	cmp	r0, r2
 8001326:	d003      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 8001328:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800132c:	4290      	cmp	r0, r2
 800132e:	d103      	bne.n	8001338 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001330:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001336:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001338:	694a      	ldr	r2, [r1, #20]
 800133a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800133e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001340:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001342:	688b      	ldr	r3, [r1, #8]
 8001344:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001346:	680b      	ldr	r3, [r1, #0]
 8001348:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <TIM_Base_SetConfig+0xc4>)
 800134c:	4298      	cmp	r0, r3
 800134e:	d003      	beq.n	8001358 <TIM_Base_SetConfig+0xb8>
 8001350:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001354:	4298      	cmp	r0, r3
 8001356:	d101      	bne.n	800135c <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8001358:	690b      	ldr	r3, [r1, #16]
 800135a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800135c:	2301      	movs	r3, #1
 800135e:	6143      	str	r3, [r0, #20]
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40010000 	.word	0x40010000
 8001368:	40014000 	.word	0x40014000

0800136c <HAL_TIM_Base_Init>:
{
 800136c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800136e:	4604      	mov	r4, r0
 8001370:	b1a0      	cbz	r0, 800139c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001372:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001376:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800137a:	b91b      	cbnz	r3, 8001384 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800137c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001380:	f001 fbbc 	bl	8002afc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001384:	2302      	movs	r3, #2
 8001386:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800138a:	6820      	ldr	r0, [r4, #0]
 800138c:	1d21      	adds	r1, r4, #4
 800138e:	f7ff ff87 	bl	80012a0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001392:	2301      	movs	r3, #1
 8001394:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001398:	2000      	movs	r0, #0
 800139a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800139c:	2001      	movs	r0, #1
}
 800139e:	bd10      	pop	{r4, pc}

080013a0 <HAL_TIM_PWM_Init>:
{
 80013a0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80013a2:	4604      	mov	r4, r0
 80013a4:	b1a0      	cbz	r0, 80013d0 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80013a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80013aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013ae:	b91b      	cbnz	r3, 80013b8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80013b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80013b4:	f001 fb72 	bl	8002a9c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80013b8:	2302      	movs	r3, #2
 80013ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013be:	6820      	ldr	r0, [r4, #0]
 80013c0:	1d21      	adds	r1, r4, #4
 80013c2:	f7ff ff6d 	bl	80012a0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80013c6:	2301      	movs	r3, #1
 80013c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80013cc:	2000      	movs	r0, #0
 80013ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80013d0:	2001      	movs	r0, #1
}
 80013d2:	bd10      	pop	{r4, pc}

080013d4 <HAL_TIM_OnePulse_Init>:
{
 80013d4:	b538      	push	{r3, r4, r5, lr}
 80013d6:	460d      	mov	r5, r1
  if (htim == NULL)
 80013d8:	4604      	mov	r4, r0
 80013da:	b1e0      	cbz	r0, 8001416 <HAL_TIM_OnePulse_Init+0x42>
  if (htim->State == HAL_TIM_STATE_RESET)
 80013dc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80013e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013e4:	b91b      	cbnz	r3, 80013ee <HAL_TIM_OnePulse_Init+0x1a>
    htim->Lock = HAL_UNLOCKED;
 80013e6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 80013ea:	f001 fb6f 	bl	8002acc <HAL_TIM_OnePulse_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80013ee:	2302      	movs	r3, #2
 80013f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013f4:	1d21      	adds	r1, r4, #4
 80013f6:	6820      	ldr	r0, [r4, #0]
 80013f8:	f7ff ff52 	bl	80012a0 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80013fc:	6823      	ldr	r3, [r4, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	f022 0208 	bic.w	r2, r2, #8
 8001404:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8001406:	6819      	ldr	r1, [r3, #0]
 8001408:	4329      	orrs	r1, r5
 800140a:	6019      	str	r1, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800140c:	2301      	movs	r3, #1
 800140e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001412:	2000      	movs	r0, #0
 8001414:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001416:	2001      	movs	r0, #1
}
 8001418:	bd38      	pop	{r3, r4, r5, pc}
	...

0800141c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800141c:	6a03      	ldr	r3, [r0, #32]
 800141e:	f023 0310 	bic.w	r3, r3, #16
 8001422:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001424:	6a03      	ldr	r3, [r0, #32]
{
 8001426:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001428:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800142a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800142c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800142e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001432:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001436:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001438:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800143c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001440:	4d10      	ldr	r5, [pc, #64]	; (8001484 <TIM_OC2_SetConfig+0x68>)
 8001442:	42a8      	cmp	r0, r5
 8001444:	d003      	beq.n	800144e <TIM_OC2_SetConfig+0x32>
 8001446:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800144a:	42a8      	cmp	r0, r5
 800144c:	d114      	bne.n	8001478 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800144e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001454:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001458:	4d0a      	ldr	r5, [pc, #40]	; (8001484 <TIM_OC2_SetConfig+0x68>)
 800145a:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800145c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001460:	d003      	beq.n	800146a <TIM_OC2_SetConfig+0x4e>
 8001462:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001466:	42a8      	cmp	r0, r5
 8001468:	d106      	bne.n	8001478 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800146a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800146c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800146e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001472:	4335      	orrs	r5, r6
 8001474:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001478:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800147a:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800147c:	684a      	ldr	r2, [r1, #4]
 800147e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001480:	6203      	str	r3, [r0, #32]
 8001482:	bd70      	pop	{r4, r5, r6, pc}
 8001484:	40010000 	.word	0x40010000

08001488 <HAL_TIM_PWM_ConfigChannel>:
{
 8001488:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800148a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800148e:	2b01      	cmp	r3, #1
{
 8001490:	4604      	mov	r4, r0
 8001492:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001496:	d025      	beq.n	80014e4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001498:	2301      	movs	r3, #1
 800149a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800149e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80014a2:	2a0c      	cmp	r2, #12
 80014a4:	d818      	bhi.n	80014d8 <HAL_TIM_PWM_ConfigChannel+0x50>
 80014a6:	e8df f002 	tbb	[pc, r2]
 80014aa:	1707      	.short	0x1707
 80014ac:	171e1717 	.word	0x171e1717
 80014b0:	172f1717 	.word	0x172f1717
 80014b4:	1717      	.short	0x1717
 80014b6:	40          	.byte	0x40
 80014b7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80014b8:	6820      	ldr	r0, [r4, #0]
 80014ba:	f7ff fe63 	bl	8001184 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80014be:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80014c0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80014c2:	699a      	ldr	r2, [r3, #24]
 80014c4:	f042 0208 	orr.w	r2, r2, #8
 80014c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80014ca:	699a      	ldr	r2, [r3, #24]
 80014cc:	f022 0204 	bic.w	r2, r2, #4
 80014d0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80014d2:	699a      	ldr	r2, [r3, #24]
 80014d4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80014d6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80014d8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80014da:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80014dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80014e0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80014e4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80014e6:	6820      	ldr	r0, [r4, #0]
 80014e8:	f7ff ff98 	bl	800141c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80014ec:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80014ee:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80014f0:	699a      	ldr	r2, [r3, #24]
 80014f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80014f8:	699a      	ldr	r2, [r3, #24]
 80014fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001500:	699a      	ldr	r2, [r3, #24]
 8001502:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001506:	e7e6      	b.n	80014d6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001508:	6820      	ldr	r0, [r4, #0]
 800150a:	f7ff fe6d 	bl	80011e8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800150e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001510:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001512:	69da      	ldr	r2, [r3, #28]
 8001514:	f042 0208 	orr.w	r2, r2, #8
 8001518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800151a:	69da      	ldr	r2, [r3, #28]
 800151c:	f022 0204 	bic.w	r2, r2, #4
 8001520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001522:	69da      	ldr	r2, [r3, #28]
 8001524:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001526:	61da      	str	r2, [r3, #28]
      break;
 8001528:	e7d6      	b.n	80014d8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800152a:	6820      	ldr	r0, [r4, #0]
 800152c:	f7ff fe92 	bl	8001254 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001530:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001532:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001534:	69da      	ldr	r2, [r3, #28]
 8001536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800153a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800153c:	69da      	ldr	r2, [r3, #28]
 800153e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001542:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001544:	69da      	ldr	r2, [r3, #28]
 8001546:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800154a:	e7ec      	b.n	8001526 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800154c <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800154c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800154e:	f001 011f 	and.w	r1, r1, #31
{
 8001552:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001554:	2401      	movs	r4, #1
 8001556:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001558:	ea23 0304 	bic.w	r3, r3, r4
 800155c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800155e:	6a03      	ldr	r3, [r0, #32]
 8001560:	408a      	lsls	r2, r1
 8001562:	431a      	orrs	r2, r3
 8001564:	6202      	str	r2, [r0, #32]
 8001566:	bd10      	pop	{r4, pc}

08001568 <HAL_TIM_PWM_Start>:
{
 8001568:	b510      	push	{r4, lr}
 800156a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800156c:	2201      	movs	r2, #1
 800156e:	6800      	ldr	r0, [r0, #0]
 8001570:	f7ff ffec 	bl	800154c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <HAL_TIM_PWM_Start+0x3c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d00e      	beq.n	800159a <HAL_TIM_PWM_Start+0x32>
 800157c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001580:	4293      	cmp	r3, r2
 8001582:	d00a      	beq.n	800159a <HAL_TIM_PWM_Start+0x32>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800158a:	2a06      	cmp	r2, #6
 800158c:	d003      	beq.n	8001596 <HAL_TIM_PWM_Start+0x2e>
    __HAL_TIM_ENABLE(htim);
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	f042 0201 	orr.w	r2, r2, #1
 8001594:	601a      	str	r2, [r3, #0]
}
 8001596:	2000      	movs	r0, #0
 8001598:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 800159a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800159c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015a0:	645a      	str	r2, [r3, #68]	; 0x44
 80015a2:	e7ef      	b.n	8001584 <HAL_TIM_PWM_Start+0x1c>
 80015a4:	40010000 	.word	0x40010000

080015a8 <HAL_TIM_PWM_Stop>:
{
 80015a8:	b510      	push	{r4, lr}
 80015aa:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80015ac:	2200      	movs	r2, #0
 80015ae:	6800      	ldr	r0, [r0, #0]
 80015b0:	f7ff ffcc 	bl	800154c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80015b4:	6823      	ldr	r3, [r4, #0]
 80015b6:	4a14      	ldr	r2, [pc, #80]	; (8001608 <HAL_TIM_PWM_Stop+0x60>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d003      	beq.n	80015c4 <HAL_TIM_PWM_Stop+0x1c>
 80015bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d10d      	bne.n	80015e0 <HAL_TIM_PWM_Stop+0x38>
    __HAL_TIM_MOE_DISABLE(htim);
 80015c4:	6a19      	ldr	r1, [r3, #32]
 80015c6:	f241 1211 	movw	r2, #4369	; 0x1111
 80015ca:	4211      	tst	r1, r2
 80015cc:	d108      	bne.n	80015e0 <HAL_TIM_PWM_Stop+0x38>
 80015ce:	6a19      	ldr	r1, [r3, #32]
 80015d0:	f240 4244 	movw	r2, #1092	; 0x444
 80015d4:	4211      	tst	r1, r2
 80015d6:	bf02      	ittt	eq
 80015d8:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80015da:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 80015de:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80015e0:	6a19      	ldr	r1, [r3, #32]
 80015e2:	f241 1211 	movw	r2, #4369	; 0x1111
 80015e6:	4211      	tst	r1, r2
 80015e8:	d108      	bne.n	80015fc <HAL_TIM_PWM_Stop+0x54>
 80015ea:	6a19      	ldr	r1, [r3, #32]
 80015ec:	f240 4244 	movw	r2, #1092	; 0x444
 80015f0:	4211      	tst	r1, r2
 80015f2:	d103      	bne.n	80015fc <HAL_TIM_PWM_Stop+0x54>
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	f022 0201 	bic.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80015fc:	2301      	movs	r3, #1
 80015fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001602:	2000      	movs	r0, #0
 8001604:	bd10      	pop	{r4, pc}
 8001606:	bf00      	nop
 8001608:	40010000 	.word	0x40010000

0800160c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800160c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001610:	2b01      	cmp	r3, #1
{
 8001612:	b530      	push	{r4, r5, lr}
 8001614:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001618:	d014      	beq.n	8001644 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800161a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800161c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001620:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001622:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001624:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001626:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001628:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 800162c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001630:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001632:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001634:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001636:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001638:	2301      	movs	r3, #1
 800163a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800163e:	2300      	movs	r3, #0
 8001640:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001644:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001646:	bd30      	pop	{r4, r5, pc}

08001648 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001648:	6803      	ldr	r3, [r0, #0]
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001650:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001652:	695a      	ldr	r2, [r3, #20]
 8001654:	f022 0201 	bic.w	r2, r2, #1
 8001658:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800165a:	2320      	movs	r3, #32
 800165c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001660:	4770      	bx	lr
	...

08001664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001668:	6806      	ldr	r6, [r0, #0]
 800166a:	68c2      	ldr	r2, [r0, #12]
 800166c:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800166e:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001670:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001674:	4313      	orrs	r3, r2
 8001676:	6133      	str	r3, [r6, #16]
{
 8001678:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800167a:	6883      	ldr	r3, [r0, #8]
 800167c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800167e:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001680:	4303      	orrs	r3, r0
 8001682:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001684:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001688:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800168a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800168e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8001690:	4313      	orrs	r3, r2
 8001692:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001694:	6973      	ldr	r3, [r6, #20]
 8001696:	69a2      	ldr	r2, [r4, #24]
 8001698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800169c:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800169e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016a2:	6173      	str	r3, [r6, #20]
 80016a4:	4b7a      	ldr	r3, [pc, #488]	; (8001890 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016a6:	d17c      	bne.n	80017a2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80016a8:	429e      	cmp	r6, r3
 80016aa:	d003      	beq.n	80016b4 <UART_SetConfig+0x50>
 80016ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016b0:	429e      	cmp	r6, r3
 80016b2:	d144      	bne.n	800173e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80016b4:	f7ff fd56 	bl	8001164 <HAL_RCC_GetPCLK2Freq>
 80016b8:	2519      	movs	r5, #25
 80016ba:	fb05 f300 	mul.w	r3, r5, r0
 80016be:	6860      	ldr	r0, [r4, #4]
 80016c0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80016c4:	0040      	lsls	r0, r0, #1
 80016c6:	fbb3 f3f0 	udiv	r3, r3, r0
 80016ca:	fbb3 f3f9 	udiv	r3, r3, r9
 80016ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80016d2:	f7ff fd47 	bl	8001164 <HAL_RCC_GetPCLK2Freq>
 80016d6:	6863      	ldr	r3, [r4, #4]
 80016d8:	4368      	muls	r0, r5
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fbb0 f7f3 	udiv	r7, r0, r3
 80016e0:	f7ff fd40 	bl	8001164 <HAL_RCC_GetPCLK2Freq>
 80016e4:	6863      	ldr	r3, [r4, #4]
 80016e6:	4368      	muls	r0, r5
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ee:	fbb3 f3f9 	udiv	r3, r3, r9
 80016f2:	fb09 7313 	mls	r3, r9, r3, r7
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	3332      	adds	r3, #50	; 0x32
 80016fa:	fbb3 f3f9 	udiv	r3, r3, r9
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001704:	f7ff fd2e 	bl	8001164 <HAL_RCC_GetPCLK2Freq>
 8001708:	6862      	ldr	r2, [r4, #4]
 800170a:	4368      	muls	r0, r5
 800170c:	0052      	lsls	r2, r2, #1
 800170e:	fbb0 faf2 	udiv	sl, r0, r2
 8001712:	f7ff fd27 	bl	8001164 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001716:	6863      	ldr	r3, [r4, #4]
 8001718:	4368      	muls	r0, r5
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001720:	fbb3 f3f9 	udiv	r3, r3, r9
 8001724:	fb09 a313 	mls	r3, r9, r3, sl
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	3332      	adds	r3, #50	; 0x32
 800172c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001736:	443b      	add	r3, r7
 8001738:	60b3      	str	r3, [r6, #8]
 800173a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800173e:	f7ff fd01 	bl	8001144 <HAL_RCC_GetPCLK1Freq>
 8001742:	2519      	movs	r5, #25
 8001744:	fb05 f300 	mul.w	r3, r5, r0
 8001748:	6860      	ldr	r0, [r4, #4]
 800174a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800174e:	0040      	lsls	r0, r0, #1
 8001750:	fbb3 f3f0 	udiv	r3, r3, r0
 8001754:	fbb3 f3f9 	udiv	r3, r3, r9
 8001758:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800175c:	f7ff fcf2 	bl	8001144 <HAL_RCC_GetPCLK1Freq>
 8001760:	6863      	ldr	r3, [r4, #4]
 8001762:	4368      	muls	r0, r5
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	fbb0 f7f3 	udiv	r7, r0, r3
 800176a:	f7ff fceb 	bl	8001144 <HAL_RCC_GetPCLK1Freq>
 800176e:	6863      	ldr	r3, [r4, #4]
 8001770:	4368      	muls	r0, r5
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fbb0 f3f3 	udiv	r3, r0, r3
 8001778:	fbb3 f3f9 	udiv	r3, r3, r9
 800177c:	fb09 7313 	mls	r3, r9, r3, r7
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	3332      	adds	r3, #50	; 0x32
 8001784:	fbb3 f3f9 	udiv	r3, r3, r9
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800178e:	f7ff fcd9 	bl	8001144 <HAL_RCC_GetPCLK1Freq>
 8001792:	6862      	ldr	r2, [r4, #4]
 8001794:	4368      	muls	r0, r5
 8001796:	0052      	lsls	r2, r2, #1
 8001798:	fbb0 faf2 	udiv	sl, r0, r2
 800179c:	f7ff fcd2 	bl	8001144 <HAL_RCC_GetPCLK1Freq>
 80017a0:	e7b9      	b.n	8001716 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80017a2:	429e      	cmp	r6, r3
 80017a4:	d002      	beq.n	80017ac <UART_SetConfig+0x148>
 80017a6:	4b3b      	ldr	r3, [pc, #236]	; (8001894 <UART_SetConfig+0x230>)
 80017a8:	429e      	cmp	r6, r3
 80017aa:	d140      	bne.n	800182e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80017ac:	f7ff fcda 	bl	8001164 <HAL_RCC_GetPCLK2Freq>
 80017b0:	6867      	ldr	r7, [r4, #4]
 80017b2:	2519      	movs	r5, #25
 80017b4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80017b8:	fb05 f300 	mul.w	r3, r5, r0
 80017bc:	00bf      	lsls	r7, r7, #2
 80017be:	fbb3 f3f7 	udiv	r3, r3, r7
 80017c2:	fbb3 f3f9 	udiv	r3, r3, r9
 80017c6:	011f      	lsls	r7, r3, #4
 80017c8:	f7ff fccc 	bl	8001164 <HAL_RCC_GetPCLK2Freq>
 80017cc:	6863      	ldr	r3, [r4, #4]
 80017ce:	4368      	muls	r0, r5
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	fbb0 f8f3 	udiv	r8, r0, r3
 80017d6:	f7ff fcc5 	bl	8001164 <HAL_RCC_GetPCLK2Freq>
 80017da:	6863      	ldr	r3, [r4, #4]
 80017dc:	4368      	muls	r0, r5
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80017e8:	fb09 8313 	mls	r3, r9, r3, r8
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	3332      	adds	r3, #50	; 0x32
 80017f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80017f4:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80017f8:	f7ff fcb4 	bl	8001164 <HAL_RCC_GetPCLK2Freq>
 80017fc:	6862      	ldr	r2, [r4, #4]
 80017fe:	4368      	muls	r0, r5
 8001800:	0092      	lsls	r2, r2, #2
 8001802:	fbb0 faf2 	udiv	sl, r0, r2
 8001806:	f7ff fcad 	bl	8001164 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800180a:	6863      	ldr	r3, [r4, #4]
 800180c:	4368      	muls	r0, r5
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	fbb0 f3f3 	udiv	r3, r0, r3
 8001814:	fbb3 f3f9 	udiv	r3, r3, r9
 8001818:	fb09 a313 	mls	r3, r9, r3, sl
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	3332      	adds	r3, #50	; 0x32
 8001820:	fbb3 f3f9 	udiv	r3, r3, r9
 8001824:	f003 030f 	and.w	r3, r3, #15
 8001828:	ea43 0308 	orr.w	r3, r3, r8
 800182c:	e783      	b.n	8001736 <UART_SetConfig+0xd2>
 800182e:	f7ff fc89 	bl	8001144 <HAL_RCC_GetPCLK1Freq>
 8001832:	6867      	ldr	r7, [r4, #4]
 8001834:	2519      	movs	r5, #25
 8001836:	f04f 0964 	mov.w	r9, #100	; 0x64
 800183a:	fb05 f300 	mul.w	r3, r5, r0
 800183e:	00bf      	lsls	r7, r7, #2
 8001840:	fbb3 f3f7 	udiv	r3, r3, r7
 8001844:	fbb3 f3f9 	udiv	r3, r3, r9
 8001848:	011f      	lsls	r7, r3, #4
 800184a:	f7ff fc7b 	bl	8001144 <HAL_RCC_GetPCLK1Freq>
 800184e:	6863      	ldr	r3, [r4, #4]
 8001850:	4368      	muls	r0, r5
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	fbb0 f8f3 	udiv	r8, r0, r3
 8001858:	f7ff fc74 	bl	8001144 <HAL_RCC_GetPCLK1Freq>
 800185c:	6863      	ldr	r3, [r4, #4]
 800185e:	4368      	muls	r0, r5
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	fbb0 f3f3 	udiv	r3, r0, r3
 8001866:	fbb3 f3f9 	udiv	r3, r3, r9
 800186a:	fb09 8313 	mls	r3, r9, r3, r8
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	3332      	adds	r3, #50	; 0x32
 8001872:	fbb3 f3f9 	udiv	r3, r3, r9
 8001876:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800187a:	f7ff fc63 	bl	8001144 <HAL_RCC_GetPCLK1Freq>
 800187e:	6862      	ldr	r2, [r4, #4]
 8001880:	4368      	muls	r0, r5
 8001882:	0092      	lsls	r2, r2, #2
 8001884:	fbb0 faf2 	udiv	sl, r0, r2
 8001888:	f7ff fc5c 	bl	8001144 <HAL_RCC_GetPCLK1Freq>
 800188c:	e7bd      	b.n	800180a <UART_SetConfig+0x1a6>
 800188e:	bf00      	nop
 8001890:	40011000 	.word	0x40011000
 8001894:	40011400 	.word	0x40011400

08001898 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189a:	4604      	mov	r4, r0
 800189c:	460e      	mov	r6, r1
 800189e:	4617      	mov	r7, r2
 80018a0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018a2:	6821      	ldr	r1, [r4, #0]
 80018a4:	680b      	ldr	r3, [r1, #0]
 80018a6:	ea36 0303 	bics.w	r3, r6, r3
 80018aa:	d101      	bne.n	80018b0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80018ac:	2000      	movs	r0, #0
}
 80018ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80018b0:	1c6b      	adds	r3, r5, #1
 80018b2:	d0f7      	beq.n	80018a4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018b4:	b995      	cbnz	r5, 80018dc <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018b6:	6823      	ldr	r3, [r4, #0]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80018be:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018c0:	695a      	ldr	r2, [r3, #20]
 80018c2:	f022 0201 	bic.w	r2, r2, #1
 80018c6:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80018c8:	2320      	movs	r3, #32
 80018ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80018ce:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80018d2:	2300      	movs	r3, #0
 80018d4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80018d8:	2003      	movs	r0, #3
 80018da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018dc:	f7fe fe46 	bl	800056c <HAL_GetTick>
 80018e0:	1bc0      	subs	r0, r0, r7
 80018e2:	4285      	cmp	r5, r0
 80018e4:	d2dd      	bcs.n	80018a2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80018e6:	e7e6      	b.n	80018b6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080018e8 <HAL_UART_Init>:
{
 80018e8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80018ea:	4604      	mov	r4, r0
 80018ec:	b340      	cbz	r0, 8001940 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80018ee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80018f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018f6:	b91b      	cbnz	r3, 8001900 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80018f8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80018fc:	f001 f976 	bl	8002bec <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001900:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001902:	2324      	movs	r3, #36	; 0x24
 8001904:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001908:	68d3      	ldr	r3, [r2, #12]
 800190a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800190e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001910:	4620      	mov	r0, r4
 8001912:	f7ff fea7 	bl	8001664 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001916:	6823      	ldr	r3, [r4, #0]
 8001918:	691a      	ldr	r2, [r3, #16]
 800191a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800191e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001926:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800192e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001930:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001932:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001934:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001936:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800193a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800193e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001940:	2001      	movs	r0, #1
}
 8001942:	bd10      	pop	{r4, pc}

08001944 <HAL_UART_Transmit>:
{
 8001944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001948:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800194a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800194e:	2b20      	cmp	r3, #32
{
 8001950:	4604      	mov	r4, r0
 8001952:	460d      	mov	r5, r1
 8001954:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001956:	d14f      	bne.n	80019f8 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8001958:	2900      	cmp	r1, #0
 800195a:	d04a      	beq.n	80019f2 <HAL_UART_Transmit+0xae>
 800195c:	2a00      	cmp	r2, #0
 800195e:	d048      	beq.n	80019f2 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001960:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001964:	2b01      	cmp	r3, #1
 8001966:	d047      	beq.n	80019f8 <HAL_UART_Transmit+0xb4>
 8001968:	2301      	movs	r3, #1
 800196a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800196e:	2300      	movs	r3, #0
 8001970:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001972:	2321      	movs	r3, #33	; 0x21
 8001974:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001978:	f7fe fdf8 	bl	800056c <HAL_GetTick>
    huart->TxXferSize = Size;
 800197c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001980:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001982:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001986:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001988:	b29b      	uxth	r3, r3
 800198a:	b96b      	cbnz	r3, 80019a8 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800198c:	463b      	mov	r3, r7
 800198e:	4632      	mov	r2, r6
 8001990:	2140      	movs	r1, #64	; 0x40
 8001992:	4620      	mov	r0, r4
 8001994:	f7ff ff80 	bl	8001898 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001998:	b9b0      	cbnz	r0, 80019c8 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 800199a:	2320      	movs	r3, #32
 800199c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80019a0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80019a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80019a8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80019aa:	3b01      	subs	r3, #1
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80019b0:	68a3      	ldr	r3, [r4, #8]
 80019b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019b6:	4632      	mov	r2, r6
 80019b8:	463b      	mov	r3, r7
 80019ba:	f04f 0180 	mov.w	r1, #128	; 0x80
 80019be:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80019c0:	d10e      	bne.n	80019e0 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019c2:	f7ff ff69 	bl	8001898 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80019c6:	b110      	cbz	r0, 80019ce <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80019c8:	2003      	movs	r0, #3
 80019ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80019ce:	882b      	ldrh	r3, [r5, #0]
 80019d0:	6822      	ldr	r2, [r4, #0]
 80019d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019d6:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80019d8:	6923      	ldr	r3, [r4, #16]
 80019da:	b943      	cbnz	r3, 80019ee <HAL_UART_Transmit+0xaa>
          pData += 2U;
 80019dc:	3502      	adds	r5, #2
 80019de:	e7d2      	b.n	8001986 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019e0:	f7ff ff5a 	bl	8001898 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80019e4:	2800      	cmp	r0, #0
 80019e6:	d1ef      	bne.n	80019c8 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	782a      	ldrb	r2, [r5, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	3501      	adds	r5, #1
 80019f0:	e7c9      	b.n	8001986 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80019f2:	2001      	movs	r0, #1
 80019f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80019f8:	2002      	movs	r0, #2
}
 80019fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080019fe <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80019fe:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001a02:	2b20      	cmp	r3, #32
 8001a04:	d120      	bne.n	8001a48 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8001a06:	b1e9      	cbz	r1, 8001a44 <HAL_UART_Receive_IT+0x46>
 8001a08:	b1e2      	cbz	r2, 8001a44 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8001a0a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d01a      	beq.n	8001a48 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8001a12:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8001a14:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a16:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a18:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a1a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a1c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001a20:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8001a22:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001a24:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8001a26:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001a2a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001a2e:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001a30:	6951      	ldr	r1, [r2, #20]
 8001a32:	f041 0101 	orr.w	r1, r1, #1
 8001a36:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001a38:	68d1      	ldr	r1, [r2, #12]
 8001a3a:	f041 0120 	orr.w	r1, r1, #32
 8001a3e:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001a40:	4618      	mov	r0, r3
 8001a42:	4770      	bx	lr
      return HAL_ERROR;
 8001a44:	2001      	movs	r0, #1
 8001a46:	4770      	bx	lr
    return HAL_BUSY;
 8001a48:	2002      	movs	r0, #2
}
 8001a4a:	4770      	bx	lr

08001a4c <HAL_UART_TxCpltCallback>:
 8001a4c:	4770      	bx	lr

08001a4e <HAL_UART_RxCpltCallback>:
 8001a4e:	4770      	bx	lr

08001a50 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001a50:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001a54:	2b22      	cmp	r3, #34	; 0x22
{
 8001a56:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001a58:	d136      	bne.n	8001ac8 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a5a:	6883      	ldr	r3, [r0, #8]
 8001a5c:	6901      	ldr	r1, [r0, #16]
 8001a5e:	6802      	ldr	r2, [r0, #0]
 8001a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a64:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001a66:	d123      	bne.n	8001ab0 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001a68:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001a6a:	b9e9      	cbnz	r1, 8001aa8 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a70:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001a74:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001a76:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001a78:	3c01      	subs	r4, #1
 8001a7a:	b2a4      	uxth	r4, r4
 8001a7c:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001a7e:	b98c      	cbnz	r4, 8001aa4 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001a80:	6803      	ldr	r3, [r0, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	f022 0220 	bic.w	r2, r2, #32
 8001a88:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a90:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	f022 0201 	bic.w	r2, r2, #1
 8001a98:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001aa0:	f7ff ffd5 	bl	8001a4e <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8001aa4:	2000      	movs	r0, #0
}
 8001aa6:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	f823 2b01 	strh.w	r2, [r3], #1
 8001aae:	e7e1      	b.n	8001a74 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001ab0:	b921      	cbnz	r1, 8001abc <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ab2:	1c59      	adds	r1, r3, #1
 8001ab4:	6852      	ldr	r2, [r2, #4]
 8001ab6:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ab8:	701a      	strb	r2, [r3, #0]
 8001aba:	e7dc      	b.n	8001a76 <UART_Receive_IT+0x26>
 8001abc:	6852      	ldr	r2, [r2, #4]
 8001abe:	1c59      	adds	r1, r3, #1
 8001ac0:	6281      	str	r1, [r0, #40]	; 0x28
 8001ac2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ac6:	e7f7      	b.n	8001ab8 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001ac8:	2002      	movs	r0, #2
 8001aca:	bd10      	pop	{r4, pc}

08001acc <HAL_UART_ErrorCallback>:
 8001acc:	4770      	bx	lr
	...

08001ad0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ad0:	6803      	ldr	r3, [r0, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ad4:	68d9      	ldr	r1, [r3, #12]
{
 8001ad6:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001ad8:	0716      	lsls	r6, r2, #28
{
 8001ada:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001adc:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001ade:	d107      	bne.n	8001af0 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ae0:	0696      	lsls	r6, r2, #26
 8001ae2:	d55a      	bpl.n	8001b9a <HAL_UART_IRQHandler+0xca>
 8001ae4:	068d      	lsls	r5, r1, #26
 8001ae6:	d558      	bpl.n	8001b9a <HAL_UART_IRQHandler+0xca>
}
 8001ae8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001aec:	f7ff bfb0 	b.w	8001a50 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001af0:	f015 0501 	ands.w	r5, r5, #1
 8001af4:	d102      	bne.n	8001afc <HAL_UART_IRQHandler+0x2c>
 8001af6:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001afa:	d04e      	beq.n	8001b9a <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001afc:	07d3      	lsls	r3, r2, #31
 8001afe:	d505      	bpl.n	8001b0c <HAL_UART_IRQHandler+0x3c>
 8001b00:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b02:	bf42      	ittt	mi
 8001b04:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001b06:	f043 0301 	orrmi.w	r3, r3, #1
 8001b0a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b0c:	0750      	lsls	r0, r2, #29
 8001b0e:	d504      	bpl.n	8001b1a <HAL_UART_IRQHandler+0x4a>
 8001b10:	b11d      	cbz	r5, 8001b1a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b1a:	0793      	lsls	r3, r2, #30
 8001b1c:	d504      	bpl.n	8001b28 <HAL_UART_IRQHandler+0x58>
 8001b1e:	b11d      	cbz	r5, 8001b28 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b22:	f043 0304 	orr.w	r3, r3, #4
 8001b26:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b28:	0716      	lsls	r6, r2, #28
 8001b2a:	d504      	bpl.n	8001b36 <HAL_UART_IRQHandler+0x66>
 8001b2c:	b11d      	cbz	r5, 8001b36 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b30:	f043 0308 	orr.w	r3, r3, #8
 8001b34:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d066      	beq.n	8001c0a <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b3c:	0695      	lsls	r5, r2, #26
 8001b3e:	d504      	bpl.n	8001b4a <HAL_UART_IRQHandler+0x7a>
 8001b40:	0688      	lsls	r0, r1, #26
 8001b42:	d502      	bpl.n	8001b4a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001b44:	4620      	mov	r0, r4
 8001b46:	f7ff ff83 	bl	8001a50 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b4e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001b50:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001b52:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b54:	d402      	bmi.n	8001b5c <HAL_UART_IRQHandler+0x8c>
 8001b56:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001b5a:	d01a      	beq.n	8001b92 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001b5c:	f7ff fd74 	bl	8001648 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	0652      	lsls	r2, r2, #25
 8001b66:	d510      	bpl.n	8001b8a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b68:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001b6a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b70:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001b72:	b150      	cbz	r0, 8001b8a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b74:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <HAL_UART_IRQHandler+0x13c>)
 8001b76:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b78:	f7fe ff95 	bl	8000aa6 <HAL_DMA_Abort_IT>
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	d044      	beq.n	8001c0a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b80:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001b82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b86:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001b88:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7ff ff9e 	bl	8001acc <HAL_UART_ErrorCallback>
 8001b90:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001b92:	f7ff ff9b 	bl	8001acc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b96:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001b98:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b9a:	0616      	lsls	r6, r2, #24
 8001b9c:	d527      	bpl.n	8001bee <HAL_UART_IRQHandler+0x11e>
 8001b9e:	060d      	lsls	r5, r1, #24
 8001ba0:	d525      	bpl.n	8001bee <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001ba2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001ba6:	2a21      	cmp	r2, #33	; 0x21
 8001ba8:	d12f      	bne.n	8001c0a <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001baa:	68a2      	ldr	r2, [r4, #8]
 8001bac:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001bb0:	6a22      	ldr	r2, [r4, #32]
 8001bb2:	d117      	bne.n	8001be4 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001bb4:	8811      	ldrh	r1, [r2, #0]
 8001bb6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001bba:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001bbc:	6921      	ldr	r1, [r4, #16]
 8001bbe:	b979      	cbnz	r1, 8001be0 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001bc0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001bc2:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001bc4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001bc6:	3a01      	subs	r2, #1
 8001bc8:	b292      	uxth	r2, r2
 8001bca:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001bcc:	b9ea      	cbnz	r2, 8001c0a <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bd4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001be0:	3201      	adds	r2, #1
 8001be2:	e7ee      	b.n	8001bc2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001be4:	1c51      	adds	r1, r2, #1
 8001be6:	6221      	str	r1, [r4, #32]
 8001be8:	7812      	ldrb	r2, [r2, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	e7ea      	b.n	8001bc4 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001bee:	0650      	lsls	r0, r2, #25
 8001bf0:	d50b      	bpl.n	8001c0a <HAL_UART_IRQHandler+0x13a>
 8001bf2:	064a      	lsls	r2, r1, #25
 8001bf4:	d509      	bpl.n	8001c0a <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bfc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001bfe:	2320      	movs	r3, #32
 8001c00:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001c04:	4620      	mov	r0, r4
 8001c06:	f7ff ff21 	bl	8001a4c <HAL_UART_TxCpltCallback>
 8001c0a:	bd70      	pop	{r4, r5, r6, pc}
 8001c0c:	08001c11 	.word	0x08001c11

08001c10 <UART_DMAAbortOnError>:
{
 8001c10:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c12:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001c18:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001c1a:	f7ff ff57 	bl	8001acc <HAL_UART_ErrorCallback>
 8001c1e:	bd08      	pop	{r3, pc}

08001c20 <transferRecValuesToData>:



}

void transferRecValuesToData(int cnt){
 8001c20:	b510      	push	{r4, lr}
	//   counter=cnt-2;
	   cnt=cnt+1;
	 //  while (!(RecMsg1[i] == 0x7D))
		for(int i=0;i<cnt;i++)
	   {
		   Data[i]=RecMsg4[i];
 8001c22:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <transferRecValuesToData+0x18>)
 8001c24:	4905      	ldr	r1, [pc, #20]	; (8001c3c <transferRecValuesToData+0x1c>)
		for(int i=0;i<cnt;i++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	4283      	cmp	r3, r0
 8001c2a:	dd00      	ble.n	8001c2e <transferRecValuesToData+0xe>
////	   Data[i]=0x7D;
//	   cntVal=i;



}
 8001c2c:	bd10      	pop	{r4, pc}
		   Data[i]=RecMsg4[i];
 8001c2e:	5c5c      	ldrb	r4, [r3, r1]
 8001c30:	549c      	strb	r4, [r3, r2]
		for(int i=0;i<cnt;i++)
 8001c32:	3301      	adds	r3, #1
 8001c34:	e7f8      	b.n	8001c28 <transferRecValuesToData+0x8>
 8001c36:	bf00      	nop
 8001c38:	200005a0 	.word	0x200005a0
 8001c3c:	20000054 	.word	0x20000054

08001c40 <transferRecValuesToDataRecMsg2>:

void transferRecValuesToDataRecMsg2(int cnt){
 8001c40:	b510      	push	{r4, lr}
	//   counter=cnt-2;
	   cnt=cnt+1;
	 //  while (!(RecMsg1[i] == 0x7D))
		for(int i=0;i<cnt;i++)
	   {
		   Data[i]=RecMsg2[i];
 8001c42:	4a05      	ldr	r2, [pc, #20]	; (8001c58 <transferRecValuesToDataRecMsg2+0x18>)
 8001c44:	4905      	ldr	r1, [pc, #20]	; (8001c5c <transferRecValuesToDataRecMsg2+0x1c>)
		for(int i=0;i<cnt;i++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	4283      	cmp	r3, r0
 8001c4a:	dd00      	ble.n	8001c4e <transferRecValuesToDataRecMsg2+0xe>
////	   Data[i]=0x7D;
//	   cntVal=i;



}
 8001c4c:	bd10      	pop	{r4, pc}
		   Data[i]=RecMsg2[i];
 8001c4e:	5c5c      	ldrb	r4, [r3, r1]
 8001c50:	549c      	strb	r4, [r3, r2]
		for(int i=0;i<cnt;i++)
 8001c52:	3301      	adds	r3, #1
 8001c54:	e7f8      	b.n	8001c48 <transferRecValuesToDataRecMsg2+0x8>
 8001c56:	bf00      	nop
 8001c58:	200005a0 	.word	0x200005a0
 8001c5c:	20000c4a 	.word	0x20000c4a

08001c60 <clearingFrameBuffer>:

}

void clearingFrameBuffer()
{
int x=0;
 8001c60:	2300      	movs	r3, #0
for(;x<100;x++)
{
frame[x]=0x00;
 8001c62:	4a03      	ldr	r2, [pc, #12]	; (8001c70 <clearingFrameBuffer+0x10>)
 8001c64:	4619      	mov	r1, r3
 8001c66:	5499      	strb	r1, [r3, r2]
for(;x<100;x++)
 8001c68:	3301      	adds	r3, #1
 8001c6a:	2b64      	cmp	r3, #100	; 0x64
 8001c6c:	d1fb      	bne.n	8001c66 <clearingFrameBuffer+0x6>

}

}
 8001c6e:	4770      	bx	lr
 8001c70:	200009fd 	.word	0x200009fd

08001c74 <function10>:
 {
 8001c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	 	TimingDelay4=6;
 8001c78:	4c40      	ldr	r4, [pc, #256]	; (8001d7c <function10+0x108>)
 8001c7a:	2306      	movs	r3, #6
 8001c7c:	6023      	str	r3, [r4, #0]
	 TimingDelay_Decrement4();
 8001c7e:	f000 f95d 	bl	8001f3c <TimingDelay_Decrement4>
	 if(TimingDelay4==1)
 8001c82:	6822      	ldr	r2, [r4, #0]
 8001c84:	2a01      	cmp	r2, #1
 8001c86:	d1fc      	bne.n	8001c82 <function10+0xe>
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001c88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c8c:	483c      	ldr	r0, [pc, #240]	; (8001d80 <function10+0x10c>)
 8001c8e:	f7ff f803 	bl	8000c98 <HAL_GPIO_WritePin>
	            TimingDelay4=12;
 8001c92:	230c      	movs	r3, #12
 8001c94:	6023      	str	r3, [r4, #0]
	 TimingDelay_Decrement4();
 8001c96:	f000 f951 	bl	8001f3c <TimingDelay_Decrement4>
	 if(TimingDelay4==1)
 8001c9a:	6825      	ldr	r5, [r4, #0]
 8001c9c:	2d01      	cmp	r5, #1
 8001c9e:	d1fc      	bne.n	8001c9a <function10+0x26>
	 clearingFrameBuffer();
 8001ca0:	f7ff ffde 	bl	8001c60 <clearingFrameBuffer>
	 pedestrain[0]=0xFF;
 8001ca4:	4a37      	ldr	r2, [pc, #220]	; (8001d84 <function10+0x110>)
	           frame[0]=adcVal1;//0x01 ; //  (horizontal and vertical bit pattern)
 8001ca6:	4c38      	ldr	r4, [pc, #224]	; (8001d88 <function10+0x114>)
	 	      Disp[0]=frame[0];
 8001ca8:	4838      	ldr	r0, [pc, #224]	; (8001d8c <function10+0x118>)
	 	                  frame[9]=powerStatus;//power status
 8001caa:	7265      	strb	r5, [r4, #9]
	 pedestrain[0]=0xFF;
 8001cac:	23ff      	movs	r3, #255	; 0xff
 8001cae:	7013      	strb	r3, [r2, #0]
	 pedestrain[1]=0xFF;
 8001cb0:	7053      	strb	r3, [r2, #1]
	 powerStatus=1;
 8001cb2:	4a37      	ldr	r2, [pc, #220]	; (8001d90 <function10+0x11c>)
	 	      frame[7]=pedestrain[0];// pedestrain1
 8001cb4:	71e3      	strb	r3, [r4, #7]
	 powerStatus=1;
 8001cb6:	7015      	strb	r5, [r2, #0]
	           frame[0]=adcVal1;//0x01 ; //  (horizontal and vertical bit pattern)
 8001cb8:	4a36      	ldr	r2, [pc, #216]	; (8001d94 <function10+0x120>)
	 	      frame[8]=pedestrain[1];// pedestrain2
 8001cba:	7223      	strb	r3, [r4, #8]
	           frame[0]=adcVal1;//0x01 ; //  (horizontal and vertical bit pattern)
 8001cbc:	f892 9000 	ldrb.w	r9, [r2]
	           frame[1]=adcVal2;//0x02 ; //  (horizontal and vertical bit pattern)
 8001cc0:	4a35      	ldr	r2, [pc, #212]	; (8001d98 <function10+0x124>)
	 	      Disp[0]=frame[0];
 8001cc2:	f880 9000 	strb.w	r9, [r0]
	           frame[1]=adcVal2;//0x02 ; //  (horizontal and vertical bit pattern)
 8001cc6:	f892 8000 	ldrb.w	r8, [r2]
	 	      frame[5]=slaveNo;// slaveNo
 8001cca:	4a34      	ldr	r2, [pc, #208]	; (8001d9c <function10+0x128>)
	 	      Disp[1]=frame[1];
 8001ccc:	f880 8001 	strb.w	r8, [r0, #1]
	 	      frame[5]=slaveNo;// slaveNo
 8001cd0:	f892 e000 	ldrb.w	lr, [r2]
 8001cd4:	f884 e005 	strb.w	lr, [r4, #5]
	           frame[2]=0x02;// segment byte (hundred place)
 8001cd8:	f04f 0c02 	mov.w	ip, #2
	 	      frame[6]=0x06;// GPI
 8001cdc:	2206      	movs	r2, #6
	 	      frame[4]=0x05;// segment byte (unit place)
 8001cde:	2105      	movs	r1, #5
	 	      frame[3]=0x03;// segment byte (tens place)
 8001ce0:	2603      	movs	r6, #3
 	 	    	 	      frame[12]=0x04;//TBD
 8001ce2:	2704      	movs	r7, #4
	           frame[2]=0x02;// segment byte (hundred place)
 8001ce4:	f884 c002 	strb.w	ip, [r4, #2]
	 	      Disp[5]=frame[5];
 8001ce8:	f880 e005 	strb.w	lr, [r0, #5]
	 	      Disp[2]=frame[2];
 8001cec:	f880 c002 	strb.w	ip, [r0, #2]
	 	      frame[6]=0x06;// GPI
 8001cf0:	71a2      	strb	r2, [r4, #6]
 	 	    	 	      frame[13]=0x06;//TBD
 8001cf2:	7362      	strb	r2, [r4, #13]
	 	      frame[4]=0x05;// segment byte (unit place)
 8001cf4:	7121      	strb	r1, [r4, #4]
 	 	    	 	      frame[11]=0x05;//TBD
 8001cf6:	72e1      	strb	r1, [r4, #11]
	 	      Disp[3]=frame[3];
 8001cf8:	70c6      	strb	r6, [r0, #3]
	 	      Disp[4]=frame[4];
 8001cfa:	7101      	strb	r1, [r0, #4]
	 	      Disp[6]=frame[6];
 8001cfc:	7182      	strb	r2, [r0, #6]
	 	      Disp[7]=frame[7];
 8001cfe:	71c3      	strb	r3, [r0, #7]
	 	      Disp[8]=frame[8];
 8001d00:	7203      	strb	r3, [r0, #8]
	 	      Disp[9]=frame[9];
 8001d02:	7245      	strb	r5, [r0, #9]
 	 	      Disp[10]= frame[11];
 8001d04:	7281      	strb	r1, [r0, #10]
 	 	      Disp[11]= frame[12];
 8001d06:	72c7      	strb	r7, [r0, #11]
	           frame[0]=adcVal1;//0x01 ; //  (horizontal and vertical bit pattern)
 8001d08:	f884 9000 	strb.w	r9, [r4]
	           frame[1]=adcVal2;//0x02 ; //  (horizontal and vertical bit pattern)
 8001d0c:	f884 8001 	strb.w	r8, [r4, #1]
	 	      frame[3]=0x03;// segment byte (tens place)
 8001d10:	70e6      	strb	r6, [r4, #3]
 	 	    	 	      frame[10]=0x03;//TBD
 8001d12:	72a6      	strb	r6, [r4, #10]
 	 	    	 	      frame[12]=0x04;//TBD
 8001d14:	7327      	strb	r7, [r4, #12]
		byteToIntegerVal(&Disp[0],0);
 8001d16:	2100      	movs	r1, #0
 	 	      Disp[12]= frame[13];
 8001d18:	7302      	strb	r2, [r0, #12]
 	 	      Disp[13]= frame[14];
 8001d1a:	7ba3      	ldrb	r3, [r4, #14]
 8001d1c:	7343      	strb	r3, [r0, #13]
		byteToIntegerVal(&Disp[0],0);
 8001d1e:	f000 fd9d 	bl	800285c <byteToIntegerVal>
		 	       	CRCValue =	HAL_CRC_Calculate(&hcrc,(uint32_t *)stringInt, 8);
 8001d22:	2208      	movs	r2, #8
 8001d24:	491e      	ldr	r1, [pc, #120]	; (8001da0 <function10+0x12c>)
 8001d26:	481f      	ldr	r0, [pc, #124]	; (8001da4 <function10+0x130>)
 8001d28:	f7fe fea8 	bl	8000a7c <HAL_CRC_Calculate>
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <function10+0x134>)
 8001d2e:	6018      	str	r0, [r3, #0]
		 	       	intToByte(CRCValue);
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	f000 fda3 	bl	800287c <intToByte>
		           frame[14]=crcVal[3]; //CRC
 8001d36:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <function10+0x138>)
	 HAL_UART_Transmit (&huart6, (uint8_t*)frame,20,5000) ;
 8001d38:	481d      	ldr	r0, [pc, #116]	; (8001db0 <function10+0x13c>)
		           frame[14]=crcVal[3]; //CRC
 8001d3a:	78da      	ldrb	r2, [r3, #3]
 8001d3c:	73a2      	strb	r2, [r4, #14]
		           frame[15]=crcVal[2]; //CRC
 8001d3e:	789a      	ldrb	r2, [r3, #2]
 8001d40:	73e2      	strb	r2, [r4, #15]
		           frame[16]=crcVal[1]; //CRC
 8001d42:	785a      	ldrb	r2, [r3, #1]
		           frame[17]=crcVal[0]; //CRC
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	7463      	strb	r3, [r4, #17]
	 frame[18]=125 ;
 8001d48:	237d      	movs	r3, #125	; 0x7d
		           frame[16]=crcVal[1]; //CRC
 8001d4a:	7422      	strb	r2, [r4, #16]
	 frame[18]=125 ;
 8001d4c:	74a3      	strb	r3, [r4, #18]
	 frame[19]=125 ;
 8001d4e:	74e3      	strb	r3, [r4, #19]
	 HAL_UART_Transmit (&huart6, (uint8_t*)frame,20,5000) ;
 8001d50:	4621      	mov	r1, r4
 8001d52:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d56:	2214      	movs	r2, #20
 8001d58:	f7ff fdf4 	bl	8001944 <HAL_UART_Transmit>
	 HAL_UART_Transmit (&huart2, (uint8_t*)frame,20,5000) ;
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d62:	2214      	movs	r2, #20
 8001d64:	4813      	ldr	r0, [pc, #76]	; (8001db4 <function10+0x140>)
 8001d66:	f7ff fded 	bl	8001944 <HAL_UART_Transmit>
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d70:	4803      	ldr	r0, [pc, #12]	; (8001d80 <function10+0x10c>)
}
 8001d72:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d76:	f7fe bf8f 	b.w	8000c98 <HAL_GPIO_WritePin>
 8001d7a:	bf00      	nop
 8001d7c:	2000094c 	.word	0x2000094c
 8001d80:	40020800 	.word	0x40020800
 8001d84:	2000015c 	.word	0x2000015c
 8001d88:	200009fd 	.word	0x200009fd
 8001d8c:	20000168 	.word	0x20000168
 8001d90:	20000250 	.word	0x20000250
 8001d94:	20000f3f 	.word	0x20000f3f
 8001d98:	20000f38 	.word	0x20000f38
 8001d9c:	20000254 	.word	0x20000254
 8001da0:	20000a64 	.word	0x20000a64
 8001da4:	20000150 	.word	0x20000150
 8001da8:	20000654 	.word	0x20000654
 8001dac:	20000add 	.word	0x20000add
 8001db0:	20000740 	.word	0x20000740
 8001db4:	20000950 	.word	0x20000950

08001db8 <slaveSelection>:

void slaveSelection()
{
 8001db8:	b508      	push	{r3, lr}

	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_14)){
 8001dba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dbe:	4820      	ldr	r0, [pc, #128]	; (8001e40 <slaveSelection+0x88>)
 8001dc0:	f7fe ff64 	bl	8000c8c <HAL_GPIO_ReadPin>
 8001dc4:	b140      	cbz	r0, 8001dd8 <slaveSelection+0x20>
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_13))	{
 8001dc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dca:	481d      	ldr	r0, [pc, #116]	; (8001e40 <slaveSelection+0x88>)
 8001dcc:	f7fe ff5e 	bl	8000c8c <HAL_GPIO_ReadPin>
 8001dd0:	b110      	cbz	r0, 8001dd8 <slaveSelection+0x20>

		slaveNo=1;
 8001dd2:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <slaveSelection+0x8c>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
		}}

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_14)){
 8001dd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ddc:	4818      	ldr	r0, [pc, #96]	; (8001e40 <slaveSelection+0x88>)
 8001dde:	f7fe ff55 	bl	8000c8c <HAL_GPIO_ReadPin>
 8001de2:	b958      	cbnz	r0, 8001dfc <slaveSelection+0x44>
		if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_13))	{
 8001de4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001de8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dec:	f500 3004 	add.w	r0, r0, #135168	; 0x21000
 8001df0:	f7fe ff4c 	bl	8000c8c <HAL_GPIO_ReadPin>
 8001df4:	b910      	cbnz	r0, 8001dfc <slaveSelection+0x44>

			slaveNo=2;
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <slaveSelection+0x8c>)
 8001df8:	2202      	movs	r2, #2
 8001dfa:	601a      	str	r2, [r3, #0]
			}}

	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_14)){
 8001dfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e00:	480f      	ldr	r0, [pc, #60]	; (8001e40 <slaveSelection+0x88>)
 8001e02:	f7fe ff43 	bl	8000c8c <HAL_GPIO_ReadPin>
 8001e06:	b140      	cbz	r0, 8001e1a <slaveSelection+0x62>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_13))	{
 8001e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e0c:	480c      	ldr	r0, [pc, #48]	; (8001e40 <slaveSelection+0x88>)
 8001e0e:	f7fe ff3d 	bl	8000c8c <HAL_GPIO_ReadPin>
 8001e12:	b910      	cbnz	r0, 8001e1a <slaveSelection+0x62>

				slaveNo=4;
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <slaveSelection+0x8c>)
 8001e16:	2204      	movs	r2, #4
 8001e18:	601a      	str	r2, [r3, #0]
				}}

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_14)){
 8001e1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e1e:	4808      	ldr	r0, [pc, #32]	; (8001e40 <slaveSelection+0x88>)
 8001e20:	f7fe ff34 	bl	8000c8c <HAL_GPIO_ReadPin>
 8001e24:	b958      	cbnz	r0, 8001e3e <slaveSelection+0x86>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_13))	{
 8001e26:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001e2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e2e:	f500 3004 	add.w	r0, r0, #135168	; 0x21000
 8001e32:	f7fe ff2b 	bl	8000c8c <HAL_GPIO_ReadPin>
 8001e36:	b110      	cbz	r0, 8001e3e <slaveSelection+0x86>

				slaveNo=3;
 8001e38:	4b02      	ldr	r3, [pc, #8]	; (8001e44 <slaveSelection+0x8c>)
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	bd08      	pop	{r3, pc}
 8001e40:	40021000 	.word	0x40021000
 8001e44:	20000254 	.word	0x20000254

08001e48 <setPWM.isra.0.constprop.1>:
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period,uint16_t pulse)
 8001e48:	b084      	sub	sp, #16
 8001e4a:	b510      	push	{r4, lr}
 8001e4c:	b088      	sub	sp, #32
 8001e4e:	ac0a      	add	r4, sp, #40	; 0x28
 8001e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
{
 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 8001e54:	2100      	movs	r1, #0
 8001e56:	4620      	mov	r0, r4
 8001e58:	f7ff fba6 	bl	80015a8 <HAL_TIM_PWM_Stop>
 TIM_OC_InitTypeDef sConfigOC;
// timer.Init.Period = period; // set the period duration
// HAL_TIM_PWM_Init(&timer); // re-inititialise with new period value
 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 sConfigOC.Pulse = pulse; // set the pulse duration
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e5c:	2400      	movs	r4, #0
 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e5e:	2360      	movs	r3, #96	; 0x60
 8001e60:	9301      	str	r3, [sp, #4]
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8001e62:	4622      	mov	r2, r4
 sConfigOC.Pulse = pulse; // set the pulse duration
 8001e64:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8001e68:	9302      	str	r3, [sp, #8]
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8001e6a:	a901      	add	r1, sp, #4
 8001e6c:	a80a      	add	r0, sp, #40	; 0x28
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e6e:	9403      	str	r4, [sp, #12]
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e70:	9405      	str	r4, [sp, #20]
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8001e72:	f7ff fb09 	bl	8001488 <HAL_TIM_PWM_ConfigChannel>
 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 8001e76:	4621      	mov	r1, r4
 8001e78:	a80a      	add	r0, sp, #40	; 0x28
 8001e7a:	f7ff fb75 	bl	8001568 <HAL_TIM_PWM_Start>
}
 8001e7e:	b008      	add	sp, #32
 8001e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e84:	b004      	add	sp, #16
 8001e86:	4770      	bx	lr

08001e88 <SystemClock_Config>:
{
 8001e88:	b500      	push	{lr}
 8001e8a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8c:	2230      	movs	r2, #48	; 0x30
 8001e8e:	2100      	movs	r1, #0
 8001e90:	a808      	add	r0, sp, #32
 8001e92:	f001 fbd1 	bl	8003638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e96:	2214      	movs	r2, #20
 8001e98:	2100      	movs	r1, #0
 8001e9a:	a803      	add	r0, sp, #12
 8001e9c:	f001 fbcc 	bl	8003638 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	4a18      	ldr	r2, [pc, #96]	; (8001f04 <SystemClock_Config+0x7c>)
 8001ea4:	9301      	str	r3, [sp, #4]
 8001ea6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001ea8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001eac:	6411      	str	r1, [r2, #64]	; 0x40
 8001eae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eb0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001eb4:	9201      	str	r2, [sp, #4]
 8001eb6:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eb8:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <SystemClock_Config+0x80>)
 8001eba:	9302      	str	r3, [sp, #8]
 8001ebc:	6811      	ldr	r1, [r2, #0]
 8001ebe:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001ec2:	6011      	str	r1, [r2, #0]
 8001ec4:	6812      	ldr	r2, [r2, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ec6:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ec8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001ecc:	9202      	str	r2, [sp, #8]
 8001ece:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ed8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eda:	2210      	movs	r2, #16
 8001edc:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ede:	f7fe fee7 	bl	8000cb0 <HAL_RCC_OscConfig>
 8001ee2:	4601      	mov	r1, r0
 8001ee4:	b100      	cbz	r0, 8001ee8 <SystemClock_Config+0x60>
 8001ee6:	e7fe      	b.n	8001ee6 <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ee8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001eea:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eec:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001eee:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ef0:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ef2:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ef4:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ef6:	f7ff f88b 	bl	8001010 <HAL_RCC_ClockConfig>
 8001efa:	b100      	cbz	r0, 8001efe <SystemClock_Config+0x76>
 8001efc:	e7fe      	b.n	8001efc <SystemClock_Config+0x74>
}
 8001efe:	b015      	add	sp, #84	; 0x54
 8001f00:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40007000 	.word	0x40007000

08001f0c <TimingDelay_Decrement>:


void TimingDelay_Decrement(void)
{
  if (TimingDelay != 0x00)
 8001f0c:	4a02      	ldr	r2, [pc, #8]	; (8001f18 <TimingDelay_Decrement+0xc>)
 8001f0e:	6813      	ldr	r3, [r2, #0]
 8001f10:	b10b      	cbz	r3, 8001f16 <TimingDelay_Decrement+0xa>
  {
    TimingDelay--;
 8001f12:	3b01      	subs	r3, #1
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	4770      	bx	lr
 8001f18:	200003a8 	.word	0x200003a8

08001f1c <TimingDelay_Decrement1>:
  }
}
void TimingDelay_Decrement1(void)
{
  if (TimingDelay1 != 0x00)
 8001f1c:	4a02      	ldr	r2, [pc, #8]	; (8001f28 <TimingDelay_Decrement1+0xc>)
 8001f1e:	6813      	ldr	r3, [r2, #0]
 8001f20:	b10b      	cbz	r3, 8001f26 <TimingDelay_Decrement1+0xa>
  {
    TimingDelay1--;
 8001f22:	3b01      	subs	r3, #1
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4770      	bx	lr
 8001f28:	200009d4 	.word	0x200009d4

08001f2c <TimingDelay_Decrement3>:
    TimingDelay2--;
  }
}
void TimingDelay_Decrement3(void)
{
  if (TimingDelay3 != 0x00)
 8001f2c:	4a02      	ldr	r2, [pc, #8]	; (8001f38 <TimingDelay_Decrement3+0xc>)
 8001f2e:	6813      	ldr	r3, [r2, #0]
 8001f30:	b10b      	cbz	r3, 8001f36 <TimingDelay_Decrement3+0xa>
  {
    TimingDelay3--;
 8001f32:	3b01      	subs	r3, #1
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	4770      	bx	lr
 8001f38:	20000258 	.word	0x20000258

08001f3c <TimingDelay_Decrement4>:
  }
}
void TimingDelay_Decrement4(void)
{
  if (TimingDelay4 != 0x00)
 8001f3c:	4a02      	ldr	r2, [pc, #8]	; (8001f48 <TimingDelay_Decrement4+0xc>)
 8001f3e:	6813      	ldr	r3, [r2, #0]
 8001f40:	b10b      	cbz	r3, 8001f46 <TimingDelay_Decrement4+0xa>
  {
    TimingDelay4--;
 8001f42:	3b01      	subs	r3, #1
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	4770      	bx	lr
 8001f48:	2000094c 	.word	0x2000094c

08001f4c <TimingDelay_Decrement5>:
  }
}
void TimingDelay_Decrement5(void)
{
  if (TimingDelay5 != 0x00)
 8001f4c:	4a02      	ldr	r2, [pc, #8]	; (8001f58 <TimingDelay_Decrement5+0xc>)
 8001f4e:	6813      	ldr	r3, [r2, #0]
 8001f50:	b10b      	cbz	r3, 8001f56 <TimingDelay_Decrement5+0xa>
  {
    TimingDelay5--;
 8001f52:	3b01      	subs	r3, #1
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	4770      	bx	lr
 8001f58:	20000650 	.word	0x20000650

08001f5c <setPWMPin>:
  }
}

void setPWMPin(uint8_t  pinValue,uint8_t  pinValue1,uint8_t pulse)
{
 8001f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
/*---------------set PWM pin-----------------------------*/
	if(!(RecMsg4[8]==pulse1)){
 8001f60:	4a64      	ldr	r2, [pc, #400]	; (80020f4 <setPWMPin+0x198>)
 8001f62:	4b65      	ldr	r3, [pc, #404]	; (80020f8 <setPWMPin+0x19c>)
{
 8001f64:	460e      	mov	r6, r1
	if(!(RecMsg4[8]==pulse1)){
 8001f66:	7a1b      	ldrb	r3, [r3, #8]
 8001f68:	6811      	ldr	r1, [r2, #0]
 8001f6a:	428b      	cmp	r3, r1
{
 8001f6c:	b08e      	sub	sp, #56	; 0x38
 8001f6e:	4607      	mov	r7, r0
 8001f70:	4690      	mov	r8, r2
	if(!(RecMsg4[8]==pulse1)){
 8001f72:	d046      	beq.n	8002002 <setPWMPin+0xa6>

		pulse1=RecMsg4[8];

		if(pulse1==1){
 8001f74:	2b01      	cmp	r3, #1
		pulse1=RecMsg4[8];
 8001f76:	6013      	str	r3, [r2, #0]
		if(pulse1==1){
 8001f78:	d113      	bne.n	8001fa2 <setPWMPin+0x46>
		 setPWM(htim3, TIM_CHANNEL_1, 255, 400);    //PB4
 8001f7a:	f8df e190 	ldr.w	lr, [pc, #400]	; 800210c <setPWMPin+0x1b0>
 8001f7e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001f82:	930c      	str	r3, [sp, #48]	; 0x30
 8001f84:	f10e 0510 	add.w	r5, lr, #16
 8001f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f8a:	466c      	mov	r4, sp
 8001f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f92:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f9a:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8001f9e:	f7ff ff53 	bl	8001e48 <setPWM.isra.0.constprop.1>
		}
		if(pulse1==2){
 8001fa2:	f8d8 3000 	ldr.w	r3, [r8]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d113      	bne.n	8001fd2 <setPWMPin+0x76>
		 setPWM(htim3, TIM_CHANNEL_1, 255, 600);    //PB4
 8001faa:	f8df e160 	ldr.w	lr, [pc, #352]	; 800210c <setPWMPin+0x1b0>
 8001fae:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001fb2:	930c      	str	r3, [sp, #48]	; 0x30
 8001fb4:	f10e 0510 	add.w	r5, lr, #16
 8001fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fba:	466c      	mov	r4, sp
 8001fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fc2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001fc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fca:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8001fce:	f7ff ff3b 	bl	8001e48 <setPWM.isra.0.constprop.1>
		}
		if(pulse1==3){
 8001fd2:	f8d8 3000 	ldr.w	r3, [r8]
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d113      	bne.n	8002002 <setPWMPin+0xa6>
		 setPWM(htim3, TIM_CHANNEL_1, 255, 1000);    //PB4
 8001fda:	f8df e130 	ldr.w	lr, [pc, #304]	; 800210c <setPWMPin+0x1b0>
 8001fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe2:	930c      	str	r3, [sp, #48]	; 0x30
 8001fe4:	f10e 0510 	add.w	r5, lr, #16
 8001fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fea:	466c      	mov	r4, sp
 8001fec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ff2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ff6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ffa:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8001ffe:	f7ff ff23 	bl	8001e48 <setPWM.isra.0.constprop.1>
//		 setPWM(htim3, TIM_CHANNEL_1, 255, 500);    //PB4
//			pulse1=RecMsg4[8];
//	}
//		 setPWM(htim2, TIM_CHANNEL_2, 255, 200);    //PB3

	 offAll();
 8002002:	f001 fa65 	bl	80034d0 <offAll>

	 /*---------------------------for primary and secondary--------------------------*/
	 /*--------------green1 and green2-----------------*/
	 		 if(( pinValue & 0x33 )== 0x33)
 8002006:	f007 0333 	and.w	r3, r7, #51	; 0x33
 800200a:	2b33      	cmp	r3, #51	; 0x33
 800200c:	d113      	bne.n	8002036 <setPWMPin+0xda>
	 		 {
	 		 //			 setPWM(htim14, TIM_CHANNEL_1, 255, pulse);    //PA7
	 		 			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);//G2
 800200e:	2201      	movs	r2, #1
 8002010:	4611      	mov	r1, r2
 8002012:	483a      	ldr	r0, [pc, #232]	; (80020fc <setPWMPin+0x1a0>)
 8002014:	f7fe fe40 	bl	8000c98 <HAL_GPIO_WritePin>
	 		 			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);//G2
 8002018:	2201      	movs	r2, #1
 800201a:	2110      	movs	r1, #16
 800201c:	4837      	ldr	r0, [pc, #220]	; (80020fc <setPWMPin+0x1a0>)
 800201e:	f7fe fe3b 	bl	8000c98 <HAL_GPIO_WritePin>
	 		 			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);//G1
 8002022:	2201      	movs	r2, #1
 8002024:	2102      	movs	r1, #2
 8002026:	4835      	ldr	r0, [pc, #212]	; (80020fc <setPWMPin+0x1a0>)
 8002028:	f7fe fe36 	bl	8000c98 <HAL_GPIO_WritePin>
	 		 			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);//G1
 800202c:	2201      	movs	r2, #1
 800202e:	2180      	movs	r1, #128	; 0x80
 8002030:	4832      	ldr	r0, [pc, #200]	; (80020fc <setPWMPin+0x1a0>)
 8002032:	f7fe fe31 	bl	8000c98 <HAL_GPIO_WritePin>

	 		 		}
	 /*------------------------amber--------------------*/
	 		 if(( pinValue & 0x44 )== 0x44)
 8002036:	f007 0344 	and.w	r3, r7, #68	; 0x44
 800203a:	2b44      	cmp	r3, #68	; 0x44
 800203c:	d10a      	bne.n	8002054 <setPWMPin+0xf8>
	 			 {
	 			 //			 setPWM(htim14, TIM_CHANNEL_1, 255, pulse);    //PA7
	 			 			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);//A
 800203e:	2201      	movs	r2, #1
 8002040:	4611      	mov	r1, r2
 8002042:	482f      	ldr	r0, [pc, #188]	; (8002100 <setPWMPin+0x1a4>)
 8002044:	f7fe fe28 	bl	8000c98 <HAL_GPIO_WritePin>
	 			 			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);//A
 8002048:	2201      	movs	r2, #1
 800204a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800204e:	482b      	ldr	r0, [pc, #172]	; (80020fc <setPWMPin+0x1a0>)
 8002050:	f7fe fe22 	bl	8000c98 <HAL_GPIO_WritePin>

	 			 		}
	 /*------------------------red--------------------*/
	 		 if(( pinValue & 0x88 )== 0x88)
 8002054:	f007 0788 	and.w	r7, r7, #136	; 0x88
 8002058:	2f88      	cmp	r7, #136	; 0x88
 800205a:	d10a      	bne.n	8002072 <setPWMPin+0x116>
	 		 	{
	 		 	 //			 setPWM(htim14, TIM_CHANNEL_1, 255, pulse);    //PA7
	 		 			 	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);//R
 800205c:	2201      	movs	r2, #1
 800205e:	2108      	movs	r1, #8
 8002060:	4826      	ldr	r0, [pc, #152]	; (80020fc <setPWMPin+0x1a0>)
 8002062:	f7fe fe19 	bl	8000c98 <HAL_GPIO_WritePin>
	 		 			 	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);//R
 8002066:	2201      	movs	r2, #1
 8002068:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800206c:	4823      	ldr	r0, [pc, #140]	; (80020fc <setPWMPin+0x1a0>)
 800206e:	f7fe fe13 	bl	8000c98 <HAL_GPIO_WritePin>
	 		 	}


	 		 /*---------------------------for primary and secondary--------------------------*/
	 		 /*--------------green1 and green2-----------------*/
	 		 		 if(( pinValue1 & 0x33 )== 0x33)
 8002072:	f006 0333 	and.w	r3, r6, #51	; 0x33
 8002076:	2b33      	cmp	r3, #51	; 0x33
 8002078:	d117      	bne.n	80020aa <setPWMPin+0x14e>
	 		 		 {
	 		 		 //			 setPWM(htim14, TIM_CHANNEL_1, 255, pulse);    //PA7
	 		 		 			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);//G2
 800207a:	2201      	movs	r2, #1
 800207c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002080:	481e      	ldr	r0, [pc, #120]	; (80020fc <setPWMPin+0x1a0>)
 8002082:	f7fe fe09 	bl	8000c98 <HAL_GPIO_WritePin>
	 		 		 			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);//G1
 8002086:	2201      	movs	r2, #1
 8002088:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800208c:	481b      	ldr	r0, [pc, #108]	; (80020fc <setPWMPin+0x1a0>)
 800208e:	f7fe fe03 	bl	8000c98 <HAL_GPIO_WritePin>
	 		 		 			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);//G2
 8002092:	2201      	movs	r2, #1
 8002094:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002098:	4818      	ldr	r0, [pc, #96]	; (80020fc <setPWMPin+0x1a0>)
 800209a:	f7fe fdfd 	bl	8000c98 <HAL_GPIO_WritePin>
	 		 		 			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);//G1
 800209e:	2201      	movs	r2, #1
 80020a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020a4:	4817      	ldr	r0, [pc, #92]	; (8002104 <setPWMPin+0x1a8>)
 80020a6:	f7fe fdf7 	bl	8000c98 <HAL_GPIO_WritePin>

	 		 		 		}
	 		 /*------------------------amber--------------------*/
	 		 		 if(( pinValue1 & 0x44 )== 0x44)
 80020aa:	f006 0344 	and.w	r3, r6, #68	; 0x44
 80020ae:	2b44      	cmp	r3, #68	; 0x44
 80020b0:	d10a      	bne.n	80020c8 <setPWMPin+0x16c>
	 		 			 {
	 		 			 //			 setPWM(htim14, TIM_CHANNEL_1, 255, pulse);    //PA7
	 		 			 			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);//A
 80020b2:	2201      	movs	r2, #1
 80020b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020b8:	4810      	ldr	r0, [pc, #64]	; (80020fc <setPWMPin+0x1a0>)
 80020ba:	f7fe fded 	bl	8000c98 <HAL_GPIO_WritePin>
	 		 			 			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);//A
 80020be:	2201      	movs	r2, #1
 80020c0:	2108      	movs	r1, #8
 80020c2:	480f      	ldr	r0, [pc, #60]	; (8002100 <setPWMPin+0x1a4>)
 80020c4:	f7fe fde8 	bl	8000c98 <HAL_GPIO_WritePin>

	 		 			 		}
	 		 /*------------------------red--------------------*/
	 		 		 if(( pinValue1 & 0x88 )== 0x88)
 80020c8:	f006 0688 	and.w	r6, r6, #136	; 0x88
 80020cc:	2e88      	cmp	r6, #136	; 0x88
 80020ce:	d10d      	bne.n	80020ec <setPWMPin+0x190>
	 		 		 	{
	 		 		 	 //			 setPWM(htim14, TIM_CHANNEL_1, 255, pulse);    //PA7
	 		 		 			 	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);//R
 80020d0:	2201      	movs	r2, #1
 80020d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020d6:	4809      	ldr	r0, [pc, #36]	; (80020fc <setPWMPin+0x1a0>)
 80020d8:	f7fe fdde 	bl	8000c98 <HAL_GPIO_WritePin>
	 		 		 			 	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);//R
 80020dc:	480a      	ldr	r0, [pc, #40]	; (8002108 <setPWMPin+0x1ac>)
 80020de:	2201      	movs	r2, #1
 80020e0:	2108      	movs	r1, #8
//




}
 80020e2:	b00e      	add	sp, #56	; 0x38
 80020e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 		 		 			 	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);//R
 80020e8:	f7fe bdd6 	b.w	8000c98 <HAL_GPIO_WritePin>
}
 80020ec:	b00e      	add	sp, #56	; 0x38
 80020ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020f2:	bf00      	nop
 80020f4:	2000002c 	.word	0x2000002c
 80020f8:	20000054 	.word	0x20000054
 80020fc:	40020c00 	.word	0x40020c00
 8002100:	40020000 	.word	0x40020000
 8002104:	40021000 	.word	0x40021000
 8002108:	40020800 	.word	0x40020800
 800210c:	20000368 	.word	0x20000368

08002110 <main>:
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 8002114:	f7fe fa04 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 8002118:	f7ff feb6 	bl	8001e88 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	2214      	movs	r2, #20
 800211e:	2100      	movs	r1, #0
 8002120:	a807      	add	r0, sp, #28
 8002122:	f001 fa89 	bl	8003638 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002126:	2400      	movs	r4, #0
 8002128:	4b90      	ldr	r3, [pc, #576]	; (800236c <main+0x25c>)
 800212a:	9400      	str	r4, [sp, #0]
 800212c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 800212e:	4890      	ldr	r0, [pc, #576]	; (8002370 <main+0x260>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002130:	f042 0204 	orr.w	r2, r2, #4
 8002134:	631a      	str	r2, [r3, #48]	; 0x30
 8002136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002138:	f002 0204 	and.w	r2, r2, #4
 800213c:	9200      	str	r2, [sp, #0]
 800213e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002140:	9401      	str	r4, [sp, #4]
 8002142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002144:	f042 0201 	orr.w	r2, r2, #1
 8002148:	631a      	str	r2, [r3, #48]	; 0x30
 800214a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800214c:	f002 0201 	and.w	r2, r2, #1
 8002150:	9201      	str	r2, [sp, #4]
 8002152:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002154:	9402      	str	r4, [sp, #8]
 8002156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002158:	f042 0202 	orr.w	r2, r2, #2
 800215c:	631a      	str	r2, [r3, #48]	; 0x30
 800215e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002160:	f002 0202 	and.w	r2, r2, #2
 8002164:	9202      	str	r2, [sp, #8]
 8002166:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002168:	9403      	str	r4, [sp, #12]
 800216a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800216c:	f042 0210 	orr.w	r2, r2, #16
 8002170:	631a      	str	r2, [r3, #48]	; 0x30
 8002172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002174:	f002 0210 	and.w	r2, r2, #16
 8002178:	9203      	str	r2, [sp, #12]
 800217a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800217c:	9404      	str	r4, [sp, #16]
 800217e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002180:	f042 0208 	orr.w	r2, r2, #8
 8002184:	631a      	str	r2, [r3, #48]	; 0x30
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 800218e:	4622      	mov	r2, r4
 8002190:	f242 010f 	movw	r1, #8207	; 0x200f
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002194:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 8002196:	f7fe fd7f 	bl	8000c98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800219a:	4622      	mov	r2, r4
 800219c:	f248 018f 	movw	r1, #32911	; 0x808f
 80021a0:	4874      	ldr	r0, [pc, #464]	; (8002374 <main+0x264>)
 80021a2:	f7fe fd79 	bl	8000c98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 80021a6:	4622      	mov	r2, r4
 80021a8:	f649 7180 	movw	r1, #40832	; 0x9f80
 80021ac:	4872      	ldr	r0, [pc, #456]	; (8002378 <main+0x268>)
 80021ae:	f7fe fd73 	bl	8000c98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80021b2:	4622      	mov	r2, r4
 80021b4:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80021b8:	4870      	ldr	r0, [pc, #448]	; (800237c <main+0x26c>)
 80021ba:	f7fe fd6d 	bl	8000c98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 80021be:	4622      	mov	r2, r4
 80021c0:	f64f 519f 	movw	r1, #64927	; 0xfd9f
 80021c4:	486e      	ldr	r0, [pc, #440]	; (8002380 <main+0x270>)
 80021c6:	f7fe fd67 	bl	8000c98 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ca:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 80021cc:	f242 030f 	movw	r3, #8207	; 0x200f
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d0:	a907      	add	r1, sp, #28
 80021d2:	4867      	ldr	r0, [pc, #412]	; (8002370 <main+0x260>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 80021d4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021dc:	f7fe fc76 	bl	8000acc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80021e0:	f248 038f 	movw	r3, #32911	; 0x808f
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e4:	a907      	add	r1, sp, #28
 80021e6:	4863      	ldr	r0, [pc, #396]	; (8002374 <main+0x264>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80021e8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ea:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f0:	f7fe fc6c 	bl	8000acc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80021f4:	2360      	movs	r3, #96	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f6:	a907      	add	r1, sp, #28
 80021f8:	485e      	ldr	r0, [pc, #376]	; (8002374 <main+0x264>)
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80021fa:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fc:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002200:	f7fe fc64 	bl	8000acc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8002204:	f649 7380 	movw	r3, #40832	; 0x9f80
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002208:	a907      	add	r1, sp, #28
 800220a:	485b      	ldr	r0, [pc, #364]	; (8002378 <main+0x268>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800220c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002212:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002214:	f7fe fc5a 	bl	8000acc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002218:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800221c:	a907      	add	r1, sp, #28
 800221e:	4856      	ldr	r0, [pc, #344]	; (8002378 <main+0x268>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002220:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002222:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002226:	f7fe fc51 	bl	8000acc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800222a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222e:	a907      	add	r1, sp, #28
 8002230:	4852      	ldr	r0, [pc, #328]	; (800237c <main+0x26c>)
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002232:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002234:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223a:	f7fe fc47 	bl	8000acc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 800223e:	f64f 539f 	movw	r3, #64927	; 0xfd9f
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002242:	a907      	add	r1, sp, #28
 8002244:	484e      	ldr	r0, [pc, #312]	; (8002380 <main+0x270>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8002246:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002248:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800224e:	f7fe fc3d 	bl	8000acc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002252:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002256:	a907      	add	r1, sp, #28
 8002258:	4845      	ldr	r0, [pc, #276]	; (8002370 <main+0x260>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800225a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800225c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002260:	f7fe fc34 	bl	8000acc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8002264:	f44f 7348 	mov.w	r3, #800	; 0x320
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002268:	4844      	ldr	r0, [pc, #272]	; (800237c <main+0x26c>)
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 800226a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226c:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800226e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002272:	f7fe fc2b 	bl	8000acc <HAL_GPIO_Init>
  huart1.Instance = USART1;
 8002276:	4843      	ldr	r0, [pc, #268]	; (8002384 <main+0x274>)
  huart1.Init.BaudRate = 115200;
 8002278:	4b43      	ldr	r3, [pc, #268]	; (8002388 <main+0x278>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800227a:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 800227c:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002280:	260c      	movs	r6, #12
  huart1.Init.BaudRate = 115200;
 8002282:	e880 0088 	stmia.w	r0, {r3, r7}
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002286:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002288:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800228a:	6146      	str	r6, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228c:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800228e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002290:	f7ff fb2a 	bl	80018e8 <HAL_UART_Init>
 8002294:	b100      	cbz	r0, 8002298 <main+0x188>
 8002296:	e7fe      	b.n	8002296 <main+0x186>
  huart3.Instance = USART3;
 8002298:	4b3c      	ldr	r3, [pc, #240]	; (800238c <main+0x27c>)
 800229a:	4a3d      	ldr	r2, [pc, #244]	; (8002390 <main+0x280>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800229c:	6098      	str	r0, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800229e:	60d8      	str	r0, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022a0:	6118      	str	r0, [r3, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022a2:	6198      	str	r0, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a4:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022a6:	4618      	mov	r0, r3
  huart3.Init.BaudRate = 115200;
 80022a8:	e883 0084 	stmia.w	r3, {r2, r7}
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022ac:	615e      	str	r6, [r3, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022ae:	f7ff fb1b 	bl	80018e8 <HAL_UART_Init>
 80022b2:	b100      	cbz	r0, 80022b6 <main+0x1a6>
 80022b4:	e7fe      	b.n	80022b4 <main+0x1a4>
  huart6.Instance = USART6;
 80022b6:	4b37      	ldr	r3, [pc, #220]	; (8002394 <main+0x284>)
  huart6.Init.BaudRate = 19200;
 80022b8:	4937      	ldr	r1, [pc, #220]	; (8002398 <main+0x288>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80022ba:	6098      	str	r0, [r3, #8]
  huart6.Init.BaudRate = 19200;
 80022bc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
  huart6.Init.StopBits = UART_STOPBITS_1;
 80022c0:	60d8      	str	r0, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80022c2:	6118      	str	r0, [r3, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022c4:	6198      	str	r0, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c6:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80022c8:	4618      	mov	r0, r3
  huart6.Init.BaudRate = 19200;
 80022ca:	e883 0006 	stmia.w	r3, {r1, r2}
  huart6.Init.Mode = UART_MODE_TX_RX;
 80022ce:	615e      	str	r6, [r3, #20]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80022d0:	f7ff fb0a 	bl	80018e8 <HAL_UART_Init>
 80022d4:	b100      	cbz	r0, 80022d8 <main+0x1c8>
 80022d6:	e7fe      	b.n	80022d6 <main+0x1c6>
  htim14.Instance = TIM14;
 80022d8:	4b30      	ldr	r3, [pc, #192]	; (800239c <main+0x28c>)
 80022da:	4a31      	ldr	r2, [pc, #196]	; (80023a0 <main+0x290>)
  htim14.Init.Prescaler = 0;
 80022dc:	6058      	str	r0, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022de:	6098      	str	r0, [r3, #8]
  htim14.Init.Period = 0;
 80022e0:	60d8      	str	r0, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e2:	6118      	str	r0, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e4:	6198      	str	r0, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80022e6:	4618      	mov	r0, r3
  htim14.Instance = TIM14;
 80022e8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80022ea:	f7ff f83f 	bl	800136c <HAL_TIM_Base_Init>
 80022ee:	b100      	cbz	r0, 80022f2 <main+0x1e2>
 80022f0:	e7fe      	b.n	80022f0 <main+0x1e0>
  htim13.Instance = TIM13;
 80022f2:	4b2c      	ldr	r3, [pc, #176]	; (80023a4 <main+0x294>)
 80022f4:	4a2c      	ldr	r2, [pc, #176]	; (80023a8 <main+0x298>)
  htim13.Init.Prescaler = 0;
 80022f6:	6058      	str	r0, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f8:	6098      	str	r0, [r3, #8]
  htim13.Init.Period = 0;
 80022fa:	60d8      	str	r0, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022fc:	6118      	str	r0, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fe:	6198      	str	r0, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002300:	4618      	mov	r0, r3
  htim13.Instance = TIM13;
 8002302:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002304:	f7ff f832 	bl	800136c <HAL_TIM_Base_Init>
 8002308:	b100      	cbz	r0, 800230c <main+0x1fc>
 800230a:	e7fe      	b.n	800230a <main+0x1fa>
  htim11.Instance = TIM11;
 800230c:	4b27      	ldr	r3, [pc, #156]	; (80023ac <main+0x29c>)
 800230e:	4a28      	ldr	r2, [pc, #160]	; (80023b0 <main+0x2a0>)
  htim11.Init.Prescaler = 0;
 8002310:	6058      	str	r0, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002312:	6098      	str	r0, [r3, #8]
  htim11.Init.Period = 0;
 8002314:	60d8      	str	r0, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002316:	6118      	str	r0, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002318:	6198      	str	r0, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800231a:	4618      	mov	r0, r3
  htim11.Instance = TIM11;
 800231c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800231e:	f7ff f825 	bl	800136c <HAL_TIM_Base_Init>
 8002322:	b100      	cbz	r0, 8002326 <main+0x216>
 8002324:	e7fe      	b.n	8002324 <main+0x214>
  htim10.Instance = TIM10;
 8002326:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <main+0x2a4>)
 8002328:	4a23      	ldr	r2, [pc, #140]	; (80023b8 <main+0x2a8>)
  htim10.Init.Prescaler = 0;
 800232a:	6058      	str	r0, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232c:	6098      	str	r0, [r3, #8]
  htim10.Init.Period = 0;
 800232e:	60d8      	str	r0, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002330:	6118      	str	r0, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002332:	6198      	str	r0, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002334:	4618      	mov	r0, r3
  htim10.Instance = TIM10;
 8002336:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002338:	f7ff f818 	bl	800136c <HAL_TIM_Base_Init>
 800233c:	b100      	cbz	r0, 8002340 <main+0x230>
 800233e:	e7fe      	b.n	800233e <main+0x22e>
  hcrc.Instance = CRC;
 8002340:	481e      	ldr	r0, [pc, #120]	; (80023bc <main+0x2ac>)
 8002342:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <main+0x2b0>)
 8002344:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002346:	f7fe fb87 	bl	8000a58 <HAL_CRC_Init>
 800234a:	b100      	cbz	r0, 800234e <main+0x23e>
 800234c:	e7fe      	b.n	800234c <main+0x23c>
  htim5.Instance = TIM5;
 800234e:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <main+0x2b4>)
 8002350:	4a1d      	ldr	r2, [pc, #116]	; (80023c8 <main+0x2b8>)
  htim5.Init.Prescaler = 0;
 8002352:	6058      	str	r0, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002354:	6098      	str	r0, [r3, #8]
  htim5.Init.Period = 0;
 8002356:	60d8      	str	r0, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002358:	6118      	str	r0, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800235a:	6198      	str	r0, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 800235c:	2108      	movs	r1, #8
 800235e:	4618      	mov	r0, r3
  htim5.Instance = TIM5;
 8002360:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8002362:	f7ff f837 	bl	80013d4 <HAL_TIM_OnePulse_Init>
 8002366:	4604      	mov	r4, r0
 8002368:	b380      	cbz	r0, 80023cc <main+0x2bc>
 800236a:	e7fe      	b.n	800236a <main+0x25a>
 800236c:	40023800 	.word	0x40023800
 8002370:	40020800 	.word	0x40020800
 8002374:	40020000 	.word	0x40020000
 8002378:	40021000 	.word	0x40021000
 800237c:	40020400 	.word	0x40020400
 8002380:	40020c00 	.word	0x40020c00
 8002384:	20000520 	.word	0x20000520
 8002388:	40011000 	.word	0x40011000
 800238c:	2000025c 	.word	0x2000025c
 8002390:	40004800 	.word	0x40004800
 8002394:	20000740 	.word	0x20000740
 8002398:	40011400 	.word	0x40011400
 800239c:	20000990 	.word	0x20000990
 80023a0:	40002000 	.word	0x40002000
 80023a4:	200004e0 	.word	0x200004e0
 80023a8:	40001c00 	.word	0x40001c00
 80023ac:	20000560 	.word	0x20000560
 80023b0:	40014800 	.word	0x40014800
 80023b4:	200002e4 	.word	0x200002e4
 80023b8:	40014400 	.word	0x40014400
 80023bc:	20000150 	.word	0x20000150
 80023c0:	40023000 	.word	0x40023000
 80023c4:	20000328 	.word	0x20000328
 80023c8:	40000c00 	.word	0x40000c00
  ADC_ChannelConfTypeDef sConfig = {0};
 80023cc:	4601      	mov	r1, r0
 80023ce:	2210      	movs	r2, #16
 80023d0:	a807      	add	r0, sp, #28
 80023d2:	f001 f931 	bl	8003638 <memset>
  hadc2.Instance = ADC2;
 80023d6:	4843      	ldr	r0, [pc, #268]	; (80024e4 <main+0x3d4>)
 80023d8:	4b43      	ldr	r3, [pc, #268]	; (80024e8 <main+0x3d8>)
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80023da:	6084      	str	r4, [r0, #8]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80023dc:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023e0:	4b42      	ldr	r3, [pc, #264]	; (80024ec <main+0x3dc>)
  hadc2.Init.ScanConvMode = DISABLE;
 80023e2:	6104      	str	r4, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80023e4:	7604      	strb	r4, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80023e6:	f880 4020 	strb.w	r4, [r0, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023ea:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023ec:	6283      	str	r3, [r0, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023ee:	60c4      	str	r4, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 80023f0:	61c5      	str	r5, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80023f2:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023f6:	6145      	str	r5, [r0, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80023f8:	f7fe f8be 	bl	8000578 <HAL_ADC_Init>
 80023fc:	b100      	cbz	r0, 8002400 <main+0x2f0>
 80023fe:	e7fe      	b.n	80023fe <main+0x2ee>
  sConfig.Channel = ADC_CHANNEL_9;
 8002400:	2309      	movs	r3, #9
 8002402:	9307      	str	r3, [sp, #28]
  sConfig.Rank = 1;
 8002404:	2601      	movs	r6, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002406:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002408:	a907      	add	r1, sp, #28
 800240a:	4836      	ldr	r0, [pc, #216]	; (80024e4 <main+0x3d4>)
  sConfig.Rank = 1;
 800240c:	9608      	str	r6, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800240e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002410:	f7fe fa22 	bl	8000858 <HAL_ADC_ConfigChannel>
 8002414:	4605      	mov	r5, r0
 8002416:	b100      	cbz	r0, 800241a <main+0x30a>
 8002418:	e7fe      	b.n	8002418 <main+0x308>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800241a:	221c      	movs	r2, #28
  htim3.Instance = TIM3;
 800241c:	4c34      	ldr	r4, [pc, #208]	; (80024f0 <main+0x3e0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800241e:	9005      	str	r0, [sp, #20]
 8002420:	9006      	str	r0, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002422:	4601      	mov	r1, r0
 8002424:	eb0d 0002 	add.w	r0, sp, r2
 8002428:	f001 f906 	bl	8003638 <memset>
  htim3.Instance = TIM3;
 800242c:	4b31      	ldr	r3, [pc, #196]	; (80024f4 <main+0x3e4>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242e:	60a5      	str	r5, [r4, #8]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002430:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 0;
 8002432:	e884 0028 	stmia.w	r4, {r3, r5}
  htim3.Init.Period = 0;
 8002436:	60e5      	str	r5, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002438:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243a:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800243c:	f7fe ffb0 	bl	80013a0 <HAL_TIM_PWM_Init>
 8002440:	b100      	cbz	r0, 8002444 <main+0x334>
 8002442:	e7fe      	b.n	8002442 <main+0x332>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002444:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002446:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002448:	a905      	add	r1, sp, #20
 800244a:	4620      	mov	r0, r4
 800244c:	f7ff f8de 	bl	800160c <HAL_TIMEx_MasterConfigSynchronization>
 8002450:	4602      	mov	r2, r0
 8002452:	b100      	cbz	r0, 8002456 <main+0x346>
 8002454:	e7fe      	b.n	8002454 <main+0x344>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002456:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8002458:	9008      	str	r0, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800245a:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800245c:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800245e:	a907      	add	r1, sp, #28
 8002460:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002462:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002464:	f7ff f810 	bl	8001488 <HAL_TIM_PWM_ConfigChannel>
 8002468:	4605      	mov	r5, r0
 800246a:	b100      	cbz	r0, 800246e <main+0x35e>
 800246c:	e7fe      	b.n	800246c <main+0x35c>
  HAL_TIM_MspPostInit(&htim3);
 800246e:	4620      	mov	r0, r4
 8002470:	f000 fb92 	bl	8002b98 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 8002474:	4820      	ldr	r0, [pc, #128]	; (80024f8 <main+0x3e8>)
  huart2.Init.BaudRate = 19200;
 8002476:	4a21      	ldr	r2, [pc, #132]	; (80024fc <main+0x3ec>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002478:	6085      	str	r5, [r0, #8]
  huart2.Init.BaudRate = 19200;
 800247a:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 800247e:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002482:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002484:	60c5      	str	r5, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002486:	6105      	str	r5, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002488:	6185      	str	r5, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800248a:	61c5      	str	r5, [r0, #28]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800248c:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800248e:	f7ff fa2b 	bl	80018e8 <HAL_UART_Init>
 8002492:	4605      	mov	r5, r0
 8002494:	b100      	cbz	r0, 8002498 <main+0x388>
 8002496:	e7fe      	b.n	8002496 <main+0x386>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002498:	4601      	mov	r1, r0
 800249a:	2210      	movs	r2, #16
 800249c:	a807      	add	r0, sp, #28
 800249e:	f001 f8cb 	bl	8003638 <memset>
  hadc1.Instance = ADC1;
 80024a2:	4c17      	ldr	r4, [pc, #92]	; (8002500 <main+0x3f0>)
 80024a4:	4b17      	ldr	r3, [pc, #92]	; (8002504 <main+0x3f4>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024a6:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80024a8:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024ac:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <main+0x3dc>)
  hadc1.Init.ScanConvMode = DISABLE;
 80024b0:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024b2:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024b4:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024b8:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024ba:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024bc:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 80024be:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80024c0:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024c4:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024c6:	f7fe f857 	bl	8000578 <HAL_ADC_Init>
 80024ca:	b100      	cbz	r0, 80024ce <main+0x3be>
 80024cc:	e7fe      	b.n	80024cc <main+0x3bc>
  sConfig.Channel = ADC_CHANNEL_8;
 80024ce:	2308      	movs	r3, #8
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80024d0:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024d2:	a907      	add	r1, sp, #28
 80024d4:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_8;
 80024d6:	9307      	str	r3, [sp, #28]
  sConfig.Rank = 1;
 80024d8:	9608      	str	r6, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024da:	f7fe f9bd 	bl	8000858 <HAL_ADC_ConfigChannel>
 80024de:	4604      	mov	r4, r0
 80024e0:	b190      	cbz	r0, 8002508 <main+0x3f8>
 80024e2:	e7fe      	b.n	80024e2 <main+0x3d2>
 80024e4:	2000029c 	.word	0x2000029c
 80024e8:	40012100 	.word	0x40012100
 80024ec:	0f000001 	.word	0x0f000001
 80024f0:	20000368 	.word	0x20000368
 80024f4:	40000400 	.word	0x40000400
 80024f8:	20000950 	.word	0x20000950
 80024fc:	40004400 	.word	0x40004400
 8002500:	200003ac 	.word	0x200003ac
 8002504:	40012000 	.word	0x40012000
         	HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer1,1); // everytime have to enable uart2 interrupt
 8002508:	4632      	mov	r2, r6
 800250a:	4999      	ldr	r1, [pc, #612]	; (8002770 <main+0x660>)
 800250c:	4899      	ldr	r0, [pc, #612]	; (8002774 <main+0x664>)
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);//master
 800250e:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 80027dc <main+0x6cc>
         	HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer1,1); // everytime have to enable uart2 interrupt
 8002512:	f7ff fa74 	bl	80019fe <HAL_UART_Receive_IT>
         	HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer3,1); // everytime have to enable uart2 interrupt
 8002516:	4632      	mov	r2, r6
 8002518:	4997      	ldr	r1, [pc, #604]	; (8002778 <main+0x668>)
 800251a:	4898      	ldr	r0, [pc, #608]	; (800277c <main+0x66c>)
 800251c:	f7ff fa6f 	bl	80019fe <HAL_UART_Receive_IT>
         	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002520:	4622      	mov	r2, r4
 8002522:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002526:	4896      	ldr	r0, [pc, #600]	; (8002780 <main+0x670>)
 8002528:	f7fe fbb6 	bl	8000c98 <HAL_GPIO_WritePin>
         	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);//G2
 800252c:	4632      	mov	r2, r6
 800252e:	2104      	movs	r1, #4
 8002530:	4893      	ldr	r0, [pc, #588]	; (8002780 <main+0x670>)
 8002532:	f7fe fbb1 	bl	8000c98 <HAL_GPIO_WritePin>
         	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);//G2
 8002536:	4632      	mov	r2, r6
 8002538:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800253c:	4891      	ldr	r0, [pc, #580]	; (8002784 <main+0x674>)
	if(msgUnPrcd4==1)
 800253e:	4e92      	ldr	r6, [pc, #584]	; (8002788 <main+0x678>)
         	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);//G2
 8002540:	f7fe fbaa 	bl	8000c98 <HAL_GPIO_WritePin>
         	slaveSelection();
 8002544:	f7ff fc38 	bl	8001db8 <slaveSelection>
 8002548:	4637      	mov	r7, r6
		HAL_UART_Receive_IT(&huart2, (uint8_t *)aRxBuffer4,1); // everytime have to enable uart2 interrupt
 800254a:	2201      	movs	r2, #1
 800254c:	498f      	ldr	r1, [pc, #572]	; (800278c <main+0x67c>)
 800254e:	4890      	ldr	r0, [pc, #576]	; (8002790 <main+0x680>)
 8002550:	4d90      	ldr	r5, [pc, #576]	; (8002794 <main+0x684>)
 8002552:	f7ff fa54 	bl	80019fe <HAL_UART_Receive_IT>
	  HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer,1); // everytime have to enable uart6 interrupt
 8002556:	2201      	movs	r2, #1
 8002558:	498f      	ldr	r1, [pc, #572]	; (8002798 <main+0x688>)
 800255a:	4890      	ldr	r0, [pc, #576]	; (800279c <main+0x68c>)
 800255c:	f7ff fa4f 	bl	80019fe <HAL_UART_Receive_IT>
	if(msgUnPrcd4==1)
 8002560:	6833      	ldr	r3, [r6, #0]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d176      	bne.n	8002654 <main+0x544>
	signVal=msgParse((uint8_t *)RecMsg4,"}}",0); //for slave
 8002566:	4c8e      	ldr	r4, [pc, #568]	; (80027a0 <main+0x690>)
 8002568:	498e      	ldr	r1, [pc, #568]	; (80027a4 <main+0x694>)
 800256a:	2200      	movs	r2, #0
 800256c:	4620      	mov	r0, r4
 800256e:	f000 f9b1 	bl	80028d4 <msgParse>
 8002572:	4b8d      	ldr	r3, [pc, #564]	; (80027a8 <main+0x698>)
 8002574:	6018      	str	r0, [r3, #0]
	if(!(signVal==0))
 8002576:	2800      	cmp	r0, #0
 8002578:	d066      	beq.n	8002648 <main+0x538>
      transferRecValuesToData(19);
 800257a:	2013      	movs	r0, #19
 800257c:	f7ff fb50 	bl	8001c20 <transferRecValuesToData>
	  byteToIntegerVal(&Data[0],0);
 8002580:	2100      	movs	r1, #0
 8002582:	488a      	ldr	r0, [pc, #552]	; (80027ac <main+0x69c>)
 8002584:	f000 f96a 	bl	800285c <byteToIntegerVal>
	  CRCValue = HAL_CRC_Calculate(&hcrc,(uint32_t *)stringInt, 8);
 8002588:	2208      	movs	r2, #8
 800258a:	4989      	ldr	r1, [pc, #548]	; (80027b0 <main+0x6a0>)
 800258c:	4889      	ldr	r0, [pc, #548]	; (80027b4 <main+0x6a4>)
 800258e:	f7fe fa75 	bl	8000a7c <HAL_CRC_Calculate>
 8002592:	4b89      	ldr	r3, [pc, #548]	; (80027b8 <main+0x6a8>)
 8002594:	6018      	str	r0, [r3, #0]
	  crcbits =	CRCValue;
 8002596:	4b89      	ldr	r3, [pc, #548]	; (80027bc <main+0x6ac>)
 8002598:	6018      	str	r0, [r3, #0]
	  crcstring[0] = crcbits & 0xFF;
 800259a:	4b89      	ldr	r3, [pc, #548]	; (80027c0 <main+0x6b0>)
 800259c:	b2c2      	uxtb	r2, r0
	  crcstring[1] = (crcbits >> 8) & 0xFF;
 800259e:	f3c0 2107 	ubfx	r1, r0, #8, #8
	  crcstring[2] = (crcbits >> 16) & 0xFF;
 80025a2:	f3c0 4e07 	ubfx	lr, r0, #16, #8
	  crcstring[3] = (crcbits >> 24) & 0xFF;
 80025a6:	0e00      	lsrs	r0, r0, #24
	  crcstring[0] = crcbits & 0xFF;
 80025a8:	701a      	strb	r2, [r3, #0]
	  crcstring[1] = (crcbits >> 8) & 0xFF;
 80025aa:	7059      	strb	r1, [r3, #1]
	  crcstring[2] = (crcbits >> 16) & 0xFF;
 80025ac:	f883 e002 	strb.w	lr, [r3, #2]
	  crcstring[3] = (crcbits >> 24) & 0xFF;
 80025b0:	70d8      	strb	r0, [r3, #3]
	 if(RecMsg4[20] == crcstring[3])
 80025b2:	7d23      	ldrb	r3, [r4, #20]
 80025b4:	4283      	cmp	r3, r0
 80025b6:	d145      	bne.n	8002644 <main+0x534>
	if(RecMsg4[21] == crcstring[2])
 80025b8:	7d63      	ldrb	r3, [r4, #21]
 80025ba:	4573      	cmp	r3, lr
 80025bc:	d142      	bne.n	8002644 <main+0x534>
	 if(RecMsg4[22] == crcstring[1])
 80025be:	7da3      	ldrb	r3, [r4, #22]
 80025c0:	428b      	cmp	r3, r1
 80025c2:	d13f      	bne.n	8002644 <main+0x534>
	 if(RecMsg4[23] == crcstring[0]){
 80025c4:	7de3      	ldrb	r3, [r4, #23]
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d13c      	bne.n	8002644 <main+0x534>
		 if(RecMsg4[10]==slaveNo)
 80025ca:	f8df 9214 	ldr.w	r9, [pc, #532]	; 80027e0 <main+0x6d0>
 80025ce:	7aa2      	ldrb	r2, [r4, #10]
 80025d0:	f8d9 3000 	ldr.w	r3, [r9]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d133      	bne.n	8002640 <main+0x530>
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);//master
 80025d8:	2108      	movs	r1, #8
 80025da:	4640      	mov	r0, r8
 80025dc:	f7fe fb61 	bl	8000ca2 <HAL_GPIO_TogglePin>
			 checkSide();
 80025e0:	f000 fd34 	bl	800304c <checkSide>
			 if(slaveNo==1){
 80025e4:	f8d9 3000 	ldr.w	r3, [r9]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d106      	bne.n	80025fa <main+0x4ea>
			 setPWMPin(sideNo1,sideNo3,RecMsg4[8]);//pin1 pin2 pwm
 80025ec:	4b75      	ldr	r3, [pc, #468]	; (80027c4 <main+0x6b4>)
 80025ee:	7a22      	ldrb	r2, [r4, #8]
 80025f0:	7819      	ldrb	r1, [r3, #0]
 80025f2:	4b75      	ldr	r3, [pc, #468]	; (80027c8 <main+0x6b8>)
 80025f4:	7818      	ldrb	r0, [r3, #0]
 80025f6:	f7ff fcb1 	bl	8001f5c <setPWMPin>
			 if(slaveNo==2){
 80025fa:	f8d9 3000 	ldr.w	r3, [r9]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d106      	bne.n	8002610 <main+0x500>
			 setPWMPin(sideNo1,sideNo2,RecMsg4[8]);//pin1 pin2 pwm
 8002602:	4b72      	ldr	r3, [pc, #456]	; (80027cc <main+0x6bc>)
 8002604:	7a22      	ldrb	r2, [r4, #8]
 8002606:	7819      	ldrb	r1, [r3, #0]
 8002608:	4b6f      	ldr	r3, [pc, #444]	; (80027c8 <main+0x6b8>)
 800260a:	7818      	ldrb	r0, [r3, #0]
 800260c:	f7ff fca6 	bl	8001f5c <setPWMPin>
			 if(slaveNo==3){
 8002610:	f8d9 3000 	ldr.w	r3, [r9]
 8002614:	2b03      	cmp	r3, #3
 8002616:	d105      	bne.n	8002624 <main+0x514>
				 setPWMPin(sideNo3N,sideNo3N,RecMsg4[8]);//pin1 pin2 pwm
 8002618:	4b6d      	ldr	r3, [pc, #436]	; (80027d0 <main+0x6c0>)
 800261a:	7a22      	ldrb	r2, [r4, #8]
 800261c:	7819      	ldrb	r1, [r3, #0]
 800261e:	4608      	mov	r0, r1
 8002620:	f7ff fc9c 	bl	8001f5c <setPWMPin>
			 if(slaveNo==4){
 8002624:	f8d9 3000 	ldr.w	r3, [r9]
 8002628:	2b04      	cmp	r3, #4
 800262a:	d105      	bne.n	8002638 <main+0x528>
			 setPWMPin(sideNo4,sideNo4,RecMsg4[8]);//pin1 pin2 pwm
 800262c:	4b69      	ldr	r3, [pc, #420]	; (80027d4 <main+0x6c4>)
 800262e:	7a22      	ldrb	r2, [r4, #8]
 8002630:	7819      	ldrb	r1, [r3, #0]
 8002632:	4608      	mov	r0, r1
 8002634:	f7ff fc92 	bl	8001f5c <setPWMPin>
			 checkFeedback();
 8002638:	f000 fd3e 	bl	80030b8 <checkFeedback>
	function10();
 800263c:	f7ff fb1a 	bl	8001c74 <function10>
	commFlag=1;
 8002640:	2301      	movs	r3, #1
 8002642:	602b      	str	r3, [r5, #0]
	  	  	msgUnPrcd4=0;
 8002644:	2300      	movs	r3, #0
 8002646:	603b      	str	r3, [r7, #0]
	    clearBuffer4();
 8002648:	f000 f8f4 	bl	8002834 <clearBuffer4>
	    clearaRxBuffer4();
 800264c:	f000 f8fc 	bl	8002848 <clearaRxBuffer4>
	    msgUnPrcd4=0;
 8002650:	2300      	movs	r3, #0
 8002652:	603b      	str	r3, [r7, #0]
	if(msgUnPrcd==1)
 8002654:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80027e4 <main+0x6d4>
 8002658:	f8d9 3000 	ldr.w	r3, [r9]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d17a      	bne.n	8002756 <main+0x646>
	signVal=msgParse((uint8_t *)RecMsg2,"}}",0); //for slave
 8002660:	4c5d      	ldr	r4, [pc, #372]	; (80027d8 <main+0x6c8>)
 8002662:	4950      	ldr	r1, [pc, #320]	; (80027a4 <main+0x694>)
 8002664:	2200      	movs	r2, #0
 8002666:	4620      	mov	r0, r4
 8002668:	f000 f934 	bl	80028d4 <msgParse>
 800266c:	4b4e      	ldr	r3, [pc, #312]	; (80027a8 <main+0x698>)
 800266e:	6018      	str	r0, [r3, #0]
	if(!(signVal==0))
 8002670:	2800      	cmp	r0, #0
 8002672:	d069      	beq.n	8002748 <main+0x638>
	  transferRecValuesToDataRecMsg2(19);
 8002674:	2013      	movs	r0, #19
 8002676:	f7ff fae3 	bl	8001c40 <transferRecValuesToDataRecMsg2>
	  byteToIntegerVal(&Data[0],0);
 800267a:	2100      	movs	r1, #0
 800267c:	484b      	ldr	r0, [pc, #300]	; (80027ac <main+0x69c>)
 800267e:	f000 f8ed 	bl	800285c <byteToIntegerVal>
	  CRCValue = HAL_CRC_Calculate(&hcrc,(uint32_t *)stringInt, 8);
 8002682:	2208      	movs	r2, #8
 8002684:	494a      	ldr	r1, [pc, #296]	; (80027b0 <main+0x6a0>)
 8002686:	484b      	ldr	r0, [pc, #300]	; (80027b4 <main+0x6a4>)
 8002688:	f7fe f9f8 	bl	8000a7c <HAL_CRC_Calculate>
 800268c:	4b4a      	ldr	r3, [pc, #296]	; (80027b8 <main+0x6a8>)
 800268e:	6018      	str	r0, [r3, #0]
	  crcbits =	CRCValue;
 8002690:	4b4a      	ldr	r3, [pc, #296]	; (80027bc <main+0x6ac>)
 8002692:	6018      	str	r0, [r3, #0]
	  crcstring[0] = crcbits & 0xFF;
 8002694:	4b4a      	ldr	r3, [pc, #296]	; (80027c0 <main+0x6b0>)
 8002696:	b2c2      	uxtb	r2, r0
	  crcstring[1] = (crcbits >> 8) & 0xFF;
 8002698:	f3c0 2107 	ubfx	r1, r0, #8, #8
	  crcstring[2] = (crcbits >> 16) & 0xFF;
 800269c:	f3c0 4e07 	ubfx	lr, r0, #16, #8
	  crcstring[3] = (crcbits >> 24) & 0xFF;
 80026a0:	0e00      	lsrs	r0, r0, #24
	  crcstring[0] = crcbits & 0xFF;
 80026a2:	701a      	strb	r2, [r3, #0]
	  crcstring[1] = (crcbits >> 8) & 0xFF;
 80026a4:	7059      	strb	r1, [r3, #1]
	  crcstring[2] = (crcbits >> 16) & 0xFF;
 80026a6:	f883 e002 	strb.w	lr, [r3, #2]
	  crcstring[3] = (crcbits >> 24) & 0xFF;
 80026aa:	70d8      	strb	r0, [r3, #3]
	 if(RecMsg2[20] == crcstring[3])
 80026ac:	7d23      	ldrb	r3, [r4, #20]
 80026ae:	4283      	cmp	r3, r0
 80026b0:	d147      	bne.n	8002742 <main+0x632>
	if(RecMsg2[21] == crcstring[2])
 80026b2:	7d63      	ldrb	r3, [r4, #21]
 80026b4:	4573      	cmp	r3, lr
 80026b6:	d144      	bne.n	8002742 <main+0x632>
	 if(RecMsg2[22] == crcstring[1])
 80026b8:	7da3      	ldrb	r3, [r4, #22]
 80026ba:	428b      	cmp	r3, r1
 80026bc:	d141      	bne.n	8002742 <main+0x632>
	 if(RecMsg2[23] == crcstring[0]){
 80026be:	7de3      	ldrb	r3, [r4, #23]
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d13e      	bne.n	8002742 <main+0x632>
		 if(RecMsg2[10]==slaveNo)
 80026c4:	f8df a118 	ldr.w	sl, [pc, #280]	; 80027e0 <main+0x6d0>
 80026c8:	7aa2      	ldrb	r2, [r4, #10]
 80026ca:	f8da 3000 	ldr.w	r3, [sl]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d135      	bne.n	800273e <main+0x62e>
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);//master
 80026d2:	2108      	movs	r1, #8
 80026d4:	4640      	mov	r0, r8
 80026d6:	f7fe fae4 	bl	8000ca2 <HAL_GPIO_TogglePin>
			 checkSide();
 80026da:	f000 fcb7 	bl	800304c <checkSide>
			 if(slaveNo==1){
 80026de:	f8da 3000 	ldr.w	r3, [sl]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d106      	bne.n	80026f4 <main+0x5e4>
			 setPWMPin(sideNo1,sideNo3,RecMsg2[8]);//pin1 pin2 pwm
 80026e6:	4b37      	ldr	r3, [pc, #220]	; (80027c4 <main+0x6b4>)
 80026e8:	7a22      	ldrb	r2, [r4, #8]
 80026ea:	7819      	ldrb	r1, [r3, #0]
 80026ec:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <main+0x6b8>)
 80026ee:	7818      	ldrb	r0, [r3, #0]
 80026f0:	f7ff fc34 	bl	8001f5c <setPWMPin>
			 if(slaveNo==2){
 80026f4:	f8da 3000 	ldr.w	r3, [sl]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d106      	bne.n	800270a <main+0x5fa>
			 setPWMPin(sideNo2,sideNo4,RecMsg2[8]);//pin1 pin2 pwm
 80026fc:	4b35      	ldr	r3, [pc, #212]	; (80027d4 <main+0x6c4>)
 80026fe:	7a22      	ldrb	r2, [r4, #8]
 8002700:	7819      	ldrb	r1, [r3, #0]
 8002702:	4b32      	ldr	r3, [pc, #200]	; (80027cc <main+0x6bc>)
 8002704:	7818      	ldrb	r0, [r3, #0]
 8002706:	f7ff fc29 	bl	8001f5c <setPWMPin>
			 if(slaveNo==3){
 800270a:	f8da 3000 	ldr.w	r3, [sl]
 800270e:	2b03      	cmp	r3, #3
 8002710:	d106      	bne.n	8002720 <main+0x610>
				 setPWMPin(sideNo3,sideNo1,RecMsg2[8]);//pin1 pin2 pwm
 8002712:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <main+0x6b8>)
 8002714:	7a22      	ldrb	r2, [r4, #8]
 8002716:	7819      	ldrb	r1, [r3, #0]
 8002718:	4b2a      	ldr	r3, [pc, #168]	; (80027c4 <main+0x6b4>)
 800271a:	7818      	ldrb	r0, [r3, #0]
 800271c:	f7ff fc1e 	bl	8001f5c <setPWMPin>
			 if(slaveNo==4){
 8002720:	f8da 3000 	ldr.w	r3, [sl]
 8002724:	2b04      	cmp	r3, #4
 8002726:	d106      	bne.n	8002736 <main+0x626>
			 setPWMPin(sideNo4,sideNo2,RecMsg2[8]);//pin1 pin2 pwm
 8002728:	4b28      	ldr	r3, [pc, #160]	; (80027cc <main+0x6bc>)
 800272a:	7a22      	ldrb	r2, [r4, #8]
 800272c:	7819      	ldrb	r1, [r3, #0]
 800272e:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <main+0x6c4>)
 8002730:	7818      	ldrb	r0, [r3, #0]
 8002732:	f7ff fc13 	bl	8001f5c <setPWMPin>
			 checkFeedback();
 8002736:	f000 fcbf 	bl	80030b8 <checkFeedback>
	function10();
 800273a:	f7ff fa9b 	bl	8001c74 <function10>
	commFlag=1;
 800273e:	2301      	movs	r3, #1
 8002740:	602b      	str	r3, [r5, #0]
	  	  	msgUnPrcd=0;
 8002742:	2300      	movs	r3, #0
 8002744:	f8c9 3000 	str.w	r3, [r9]
	    clearBuffer();
 8002748:	f000 f860 	bl	800280c <clearBuffer>
	    clearaRxBuffer();
 800274c:	f000 f868 	bl	8002820 <clearaRxBuffer>
	    msgUnPrcd=0;
 8002750:	2300      	movs	r3, #0
 8002752:	f8c9 3000 	str.w	r3, [r9]
	   if(commFlag==1){
 8002756:	682b      	ldr	r3, [r5, #0]
 8002758:	2b01      	cmp	r3, #1
	  	 commFlag++;
 800275a:	bf04      	itt	eq
 800275c:	2302      	moveq	r3, #2
 800275e:	602b      	streq	r3, [r5, #0]
	   if(commFlag==3){
 8002760:	682b      	ldr	r3, [r5, #0]
 8002762:	2b03      	cmp	r3, #3
 8002764:	f47f aef1 	bne.w	800254a <main+0x43a>
	  		commFlag=0;
 8002768:	2300      	movs	r3, #0
 800276a:	602b      	str	r3, [r5, #0]
 800276c:	e6ed      	b.n	800254a <main+0x43a>
 800276e:	bf00      	nop
 8002770:	2000065c 	.word	0x2000065c
 8002774:	20000520 	.word	0x20000520
 8002778:	200003fc 	.word	0x200003fc
 800277c:	2000025c 	.word	0x2000025c
 8002780:	40020800 	.word	0x40020800
 8002784:	40020000 	.word	0x40020000
 8002788:	20000324 	.word	0x20000324
 800278c:	20000868 	.word	0x20000868
 8002790:	20000950 	.word	0x20000950
 8002794:	20000028 	.word	0x20000028
 8002798:	20000780 	.word	0x20000780
 800279c:	20000740 	.word	0x20000740
 80027a0:	20000054 	.word	0x20000054
 80027a4:	08003660 	.word	0x08003660
 80027a8:	200009d0 	.word	0x200009d0
 80027ac:	200005a0 	.word	0x200005a0
 80027b0:	20000a64 	.word	0x20000a64
 80027b4:	20000150 	.word	0x20000150
 80027b8:	20000654 	.word	0x20000654
 80027bc:	20000604 	.word	0x20000604
 80027c0:	200003f8 	.word	0x200003f8
 80027c4:	20000f3e 	.word	0x20000f3e
 80027c8:	20000f39 	.word	0x20000f39
 80027cc:	20000f3c 	.word	0x20000f3c
 80027d0:	20000f41 	.word	0x20000f41
 80027d4:	20000f3b 	.word	0x20000f3b
 80027d8:	20000c4a 	.word	0x20000c4a
 80027dc:	40021000 	.word	0x40021000
 80027e0:	20000254 	.word	0x20000254
 80027e4:	200003f4 	.word	0x200003f4

080027e8 <SetAdcChannel>:



void SetAdcChannel(unsigned long AdcChannel)
{
 80027e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80027ea:	4604      	mov	r4, r0
	ADC_ChannelConfTypeDef sConfig = {0};
 80027ec:	2210      	movs	r2, #16
 80027ee:	2100      	movs	r1, #0
 80027f0:	4668      	mov	r0, sp
 80027f2:	f000 ff21 	bl	8003638 <memset>

	sConfig.Channel = AdcChannel;
	sConfig.Rank = 1;
 80027f6:	2301      	movs	r3, #1
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
	HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 80027f8:	4669      	mov	r1, sp
 80027fa:	4803      	ldr	r0, [pc, #12]	; (8002808 <SetAdcChannel+0x20>)
	sConfig.Channel = AdcChannel;
 80027fc:	9400      	str	r4, [sp, #0]
	sConfig.Rank = 1;
 80027fe:	9301      	str	r3, [sp, #4]
	HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 8002800:	f7fe f82a 	bl	8000858 <HAL_ADC_ConfigChannel>
}
 8002804:	b004      	add	sp, #16
 8002806:	bd10      	pop	{r4, pc}
 8002808:	2000029c 	.word	0x2000029c

0800280c <clearBuffer>:
void intToByte(int val);



void clearBuffer(){
	int x=0;
 800280c:	2300      	movs	r3, #0
	for(;x<160;x++)
	{
		RecMsg2[x]=0x00;
 800280e:	4a03      	ldr	r2, [pc, #12]	; (800281c <clearBuffer+0x10>)
 8002810:	4619      	mov	r1, r3
 8002812:	5499      	strb	r1, [r3, r2]
	for(;x<160;x++)
 8002814:	3301      	adds	r3, #1
 8002816:	2ba0      	cmp	r3, #160	; 0xa0
 8002818:	d1fb      	bne.n	8002812 <clearBuffer+0x6>

	}
}
 800281a:	4770      	bx	lr
 800281c:	20000c4a 	.word	0x20000c4a

08002820 <clearaRxBuffer>:


void clearaRxBuffer(){
	int x=0;
 8002820:	2300      	movs	r3, #0
	for(;x<160;x++)
	{
		aRxBuffer[x]=0x00;
 8002822:	4a03      	ldr	r2, [pc, #12]	; (8002830 <clearaRxBuffer+0x10>)
 8002824:	4619      	mov	r1, r3
 8002826:	5499      	strb	r1, [r3, r2]
	for(;x<160;x++)
 8002828:	3301      	adds	r3, #1
 800282a:	2ba0      	cmp	r3, #160	; 0xa0
 800282c:	d1fb      	bne.n	8002826 <clearaRxBuffer+0x6>

	}
}
 800282e:	4770      	bx	lr
 8002830:	20000780 	.word	0x20000780

08002834 <clearBuffer4>:

	}
}

void clearBuffer4(){
	int x=0;
 8002834:	2300      	movs	r3, #0
	for(;x<160;x++)
	{
		RecMsg4[x]=0x00;
 8002836:	4a03      	ldr	r2, [pc, #12]	; (8002844 <clearBuffer4+0x10>)
 8002838:	4619      	mov	r1, r3
 800283a:	5499      	strb	r1, [r3, r2]
	for(;x<160;x++)
 800283c:	3301      	adds	r3, #1
 800283e:	2ba0      	cmp	r3, #160	; 0xa0
 8002840:	d1fb      	bne.n	800283a <clearBuffer4+0x6>

	}
}
 8002842:	4770      	bx	lr
 8002844:	20000054 	.word	0x20000054

08002848 <clearaRxBuffer4>:


void clearaRxBuffer4(){
	int x=0;
 8002848:	2300      	movs	r3, #0
	for(;x<160;x++)
	{
		aRxBuffer4[x]=0x00;
 800284a:	4a03      	ldr	r2, [pc, #12]	; (8002858 <clearaRxBuffer4+0x10>)
 800284c:	4619      	mov	r1, r3
 800284e:	5499      	strb	r1, [r3, r2]
	for(;x<160;x++)
 8002850:	3301      	adds	r3, #1
 8002852:	2ba0      	cmp	r3, #160	; 0xa0
 8002854:	d1fb      	bne.n	800284e <clearaRxBuffer4+0x6>

	}
}
 8002856:	4770      	bx	lr
 8002858:	20000868 	.word	0x20000868

0800285c <byteToIntegerVal>:

	//	}
//	}
}
void byteToIntegerVal(char *dat,uint8_t index)
{
 800285c:	b530      	push	{r4, r5, lr}
int zx =0 ;
//	while (zx<8)
while (zx<24)

{
	stringInt[zx+index]= *dat ;
 800285e:	4a06      	ldr	r2, [pc, #24]	; (8002878 <byteToIntegerVal+0x1c>)
 8002860:	f100 0318 	add.w	r3, r0, #24
 8002864:	1a09      	subs	r1, r1, r0
 8002866:	1844      	adds	r4, r0, r1
 8002868:	f810 5b01 	ldrb.w	r5, [r0], #1
 800286c:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
while (zx<24)
 8002870:	4298      	cmp	r0, r3
 8002872:	d1f8      	bne.n	8002866 <byteToIntegerVal+0xa>

	*dat++;
	zx++;

	}
}
 8002874:	bd30      	pop	{r4, r5, pc}
 8002876:	bf00      	nop
 8002878:	20000a64 	.word	0x20000a64

0800287c <intToByte>:

void intToByte(int val)
{
test = val ;
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <intToByte+0x34>)
 800287e:	6018      	str	r0, [r3, #0]
test &=0xFF ;
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	601a      	str	r2, [r3, #0]
crcVal[0]= test;
 8002886:	4a0b      	ldr	r2, [pc, #44]	; (80028b4 <intToByte+0x38>)
 8002888:	6819      	ldr	r1, [r3, #0]
 800288a:	7011      	strb	r1, [r2, #0]

test = (val & 0xFF00) >> 8 ;
 800288c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8002890:	6019      	str	r1, [r3, #0]
crcVal[1]= test ;
 8002892:	6819      	ldr	r1, [r3, #0]
 8002894:	7051      	strb	r1, [r2, #1]

test = (val & 0xFF0000) >> 16;
 8002896:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800289a:	6019      	str	r1, [r3, #0]
crcVal[2]= test ;
test = (val & 0xFF000000) >> 24;
 800289c:	0e00      	lsrs	r0, r0, #24
crcVal[2]= test ;
 800289e:	6819      	ldr	r1, [r3, #0]
test = (val & 0xFF000000) >> 24;
 80028a0:	6018      	str	r0, [r3, #0]
crcVal[3]= test ;
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	70d3      	strb	r3, [r2, #3]
crcVal[4]= 0 ;
 80028a6:	2300      	movs	r3, #0
crcVal[2]= test ;
 80028a8:	7091      	strb	r1, [r2, #2]
crcVal[4]= 0 ;
 80028aa:	7113      	strb	r3, [r2, #4]
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000030 	.word	0x20000030
 80028b4:	20000add 	.word	0x20000add

080028b8 <clearStringNsign>:


		void clearStringNsign(void)
		{
int a =0 ;
	for (a=0;a<100;a++)
 80028b8:	2300      	movs	r3, #0
		{
string[a]=0;
 80028ba:	4804      	ldr	r0, [pc, #16]	; (80028cc <clearStringNsign+0x14>)
sign[a]=0;
 80028bc:	4904      	ldr	r1, [pc, #16]	; (80028d0 <clearStringNsign+0x18>)
string[a]=0;
 80028be:	461a      	mov	r2, r3
 80028c0:	541a      	strb	r2, [r3, r0]
sign[a]=0;
 80028c2:	545a      	strb	r2, [r3, r1]
	for (a=0;a<100;a++)
 80028c4:	3301      	adds	r3, #1
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d1fa      	bne.n	80028c0 <clearStringNsign+0x8>
}
}
 80028ca:	4770      	bx	lr
 80028cc:	20000b69 	.word	0x20000b69
 80028d0:	20000af6 	.word	0x20000af6

080028d4 <msgParse>:
	{
 80028d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d6:	4606      	mov	r6, r0
 80028d8:	4615      	mov	r5, r2
 80028da:	460f      	mov	r7, r1
	 signCntr = 0 ;
 80028dc:	4c29      	ldr	r4, [pc, #164]	; (8002984 <msgParse+0xb0>)
	 clearStringNsign();
 80028de:	f7ff ffeb 	bl	80028b8 <clearStringNsign>
	 msgCntr =  0 ;
 80028e2:	4b29      	ldr	r3, [pc, #164]	; (8002988 <msgParse+0xb4>)
	 signCntr = 0 ;
 80028e4:	2200      	movs	r2, #0
 80028e6:	8022      	strh	r2, [r4, #0]
	 msgCntr =  0 ;
 80028e8:	801a      	strh	r2, [r3, #0]
 80028ea:	4630      	mov	r0, r6
 80028ec:	4602      	mov	r2, r0
 80028ee:	3001      	adds	r0, #1
	  while(*SPtr == '\0'){
 80028f0:	7811      	ldrb	r1, [r2, #0]
 80028f2:	b329      	cbz	r1, 8002940 <msgParse+0x6c>
 80028f4:	4e25      	ldr	r6, [pc, #148]	; (800298c <msgParse+0xb8>)
 80028f6:	3a01      	subs	r2, #1
		while(*SPtr != '\0') {
 80028f8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80028fc:	bb21      	cbnz	r1, 8002948 <msgParse+0x74>
      string[msgCntr] =  '\0' ;
 80028fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002902:	54b1      	strb	r1, [r6, r2]
 8002904:	1e79      	subs	r1, r7, #1
 8002906:	4f22      	ldr	r7, [pc, #136]	; (8002990 <msgParse+0xbc>)
      while(*sigPtr != '\0') {
 8002908:	f811 0f01 	ldrb.w	r0, [r1, #1]!
      sign[signCntr] =  *sigPtr ;
 800290c:	f9b4 2000 	ldrsh.w	r2, [r4]
 8002910:	54b8      	strb	r0, [r7, r2]
      while(*sigPtr != '\0') {
 8002912:	b9f8      	cbnz	r0, 8002954 <msgParse+0x80>
 8002914:	1c6a      	adds	r2, r5, #1
	 signCntr = 0 ;
 8002916:	8020      	strh	r0, [r4, #0]
 8002918:	b292      	uxth	r2, r2
	 msgCntr = pointer ;
 800291a:	4601      	mov	r1, r0
            if(string[msgCntr]!=sign[signCntr])
 800291c:	1e55      	subs	r5, r2, #1
 800291e:	b22d      	sxth	r5, r5
 8002920:	f816 e005 	ldrb.w	lr, [r6, r5]
 8002924:	5c7d      	ldrb	r5, [r7, r1]
 8002926:	45ae      	cmp	lr, r5
 8002928:	b215      	sxth	r5, r2
 800292a:	d01b      	beq.n	8002964 <msgParse+0x90>
                if (string[msgCntr]=='\0')
 800292c:	f816 e005 	ldrb.w	lr, [r6, r5]
 8002930:	f1be 0f00 	cmp.w	lr, #0
 8002934:	d111      	bne.n	800295a <msgParse+0x86>
 8002936:	801d      	strh	r5, [r3, #0]
 8002938:	b100      	cbz	r0, 800293c <msgParse+0x68>
 800293a:	8021      	strh	r1, [r4, #0]
                 return 0 ;
 800293c:	2000      	movs	r0, #0
 800293e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	   msgCntr++;
 8002940:	881a      	ldrh	r2, [r3, #0]
 8002942:	3201      	adds	r2, #1
 8002944:	801a      	strh	r2, [r3, #0]
 8002946:	e7d1      	b.n	80028ec <msgParse+0x18>
      string[msgCntr] =  *SPtr ;
 8002948:	f9b3 0000 	ldrsh.w	r0, [r3]
 800294c:	5431      	strb	r1, [r6, r0]
      msgCntr++;
 800294e:	3001      	adds	r0, #1
 8002950:	8018      	strh	r0, [r3, #0]
 8002952:	e7d1      	b.n	80028f8 <msgParse+0x24>
      signCntr++;
 8002954:	3201      	adds	r2, #1
 8002956:	8022      	strh	r2, [r4, #0]
 8002958:	e7d6      	b.n	8002908 <msgParse+0x34>
				signCntr = 0 ;  // Reset signature counter
 800295a:	2100      	movs	r1, #0
 800295c:	3201      	adds	r2, #1
 800295e:	b292      	uxth	r2, r2
 8002960:	2001      	movs	r0, #1
 8002962:	e7db      	b.n	800291c <msgParse+0x48>
            signCntr++ ;
 8002964:	3101      	adds	r1, #1
 8002966:	b209      	sxth	r1, r1
            msgCntr++ ;
 8002968:	4628      	mov	r0, r5
                if (sign[signCntr]=='\0')
 800296a:	f817 e001 	ldrb.w	lr, [r7, r1]
 800296e:	f1be 0f00 	cmp.w	lr, #0
 8002972:	d102      	bne.n	800297a <msgParse+0xa6>
 8002974:	801d      	strh	r5, [r3, #0]
 8002976:	8021      	strh	r1, [r4, #0]
 8002978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if (string[msgCntr]=='\0')
 800297a:	5d70      	ldrb	r0, [r6, r5]
 800297c:	2800      	cmp	r0, #0
 800297e:	d1ed      	bne.n	800295c <msgParse+0x88>
 8002980:	801d      	strh	r5, [r3, #0]
 8002982:	e7da      	b.n	800293a <msgParse+0x66>
 8002984:	20000036 	.word	0x20000036
 8002988:	20000034 	.word	0x20000034
 800298c:	20000b69 	.word	0x20000b69
 8002990:	20000af6 	.word	0x20000af6

08002994 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002994:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002996:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <HAL_MspInit+0x34>)
 8002998:	2100      	movs	r1, #0
 800299a:	9100      	str	r1, [sp, #0]
 800299c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800299e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029a2:	645a      	str	r2, [r3, #68]	; 0x44
 80029a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029a6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80029aa:	9200      	str	r2, [sp, #0]
 80029ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ae:	9101      	str	r1, [sp, #4]
 80029b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029be:	9301      	str	r3, [sp, #4]
 80029c0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029c2:	b002      	add	sp, #8
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800

080029cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029cc:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ce:	2214      	movs	r2, #20
{
 80029d0:	b08a      	sub	sp, #40	; 0x28
 80029d2:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	2100      	movs	r1, #0
 80029d6:	eb0d 0002 	add.w	r0, sp, r2
 80029da:	f000 fe2d 	bl	8003638 <memset>
  if(hadc->Instance==ADC1)
 80029de:	6823      	ldr	r3, [r4, #0]
 80029e0:	4a1e      	ldr	r2, [pc, #120]	; (8002a5c <HAL_ADC_MspInit+0x90>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d11f      	bne.n	8002a26 <HAL_ADC_MspInit+0x5a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029e6:	4b1e      	ldr	r3, [pc, #120]	; (8002a60 <HAL_ADC_MspInit+0x94>)
 80029e8:	2100      	movs	r1, #0
 80029ea:	9101      	str	r1, [sp, #4]
 80029ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029f2:	645a      	str	r2, [r3, #68]	; 0x44
 80029f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029f6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80029fa:	9201      	str	r2, [sp, #4]
 80029fc:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fe:	9102      	str	r1, [sp, #8]
 8002a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a02:	f042 0202 	orr.w	r2, r2, #2
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	9302      	str	r3, [sp, #8]
 8002a10:	9b02      	ldr	r3, [sp, #8]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a12:	2301      	movs	r3, #1
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
    /**ADC2 GPIO Configuration    
    PB1     ------> ADC2_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a14:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a16:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a18:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1a:	4812      	ldr	r0, [pc, #72]	; (8002a64 <HAL_ADC_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a1c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1e:	f7fe f855 	bl	8000acc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002a22:	b00a      	add	sp, #40	; 0x28
 8002a24:	bd10      	pop	{r4, pc}
  else if(hadc->Instance==ADC2)
 8002a26:	4a10      	ldr	r2, [pc, #64]	; (8002a68 <HAL_ADC_MspInit+0x9c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d1fa      	bne.n	8002a22 <HAL_ADC_MspInit+0x56>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <HAL_ADC_MspInit+0x94>)
 8002a2e:	2100      	movs	r1, #0
 8002a30:	9103      	str	r1, [sp, #12]
 8002a32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a38:	645a      	str	r2, [r3, #68]	; 0x44
 8002a3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a3c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002a40:	9203      	str	r2, [sp, #12]
 8002a42:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a44:	9104      	str	r1, [sp, #16]
 8002a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a48:	f042 0202 	orr.w	r2, r2, #2
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	9304      	str	r3, [sp, #16]
 8002a56:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e7db      	b.n	8002a14 <HAL_ADC_MspInit+0x48>
 8002a5c:	40012000 	.word	0x40012000
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40020400 	.word	0x40020400
 8002a68:	40012100 	.word	0x40012100

08002a6c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8002a6c:	6802      	ldr	r2, [r0, #0]
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <HAL_CRC_MspInit+0x28>)
 8002a70:	429a      	cmp	r2, r3
{
 8002a72:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8002a74:	d10b      	bne.n	8002a8e <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <HAL_CRC_MspInit+0x2c>)
 8002a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a8a:	9301      	str	r3, [sp, #4]
 8002a8c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002a8e:	b002      	add	sp, #8
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40023000 	.word	0x40023000
 8002a98:	40023800 	.word	0x40023800

08002a9c <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 8002a9c:	6802      	ldr	r2, [r0, #0]
 8002a9e:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_TIM_PWM_MspInit+0x28>)
 8002aa0:	429a      	cmp	r2, r3
{
 8002aa2:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 8002aa4:	d10b      	bne.n	8002abe <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <HAL_TIM_PWM_MspInit+0x2c>)
 8002aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aae:	f042 0202 	orr.w	r2, r2, #2
 8002ab2:	641a      	str	r2, [r3, #64]	; 0x40
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002abe:	b002      	add	sp, #8
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40000400 	.word	0x40000400
 8002ac8:	40023800 	.word	0x40023800

08002acc <HAL_TIM_OnePulse_MspInit>:
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
  if(htim_onepulse->Instance==TIM5)
 8002acc:	6802      	ldr	r2, [r0, #0]
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <HAL_TIM_OnePulse_MspInit+0x28>)
 8002ad0:	429a      	cmp	r2, r3
{
 8002ad2:	b082      	sub	sp, #8
  if(htim_onepulse->Instance==TIM5)
 8002ad4:	d10b      	bne.n	8002aee <HAL_TIM_OnePulse_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <HAL_TIM_OnePulse_MspInit+0x2c>)
 8002adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ade:	f042 0208 	orr.w	r2, r2, #8
 8002ae2:	641a      	str	r2, [r3, #64]	; 0x40
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002aee:	b002      	add	sp, #8
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40000c00 	.word	0x40000c00
 8002af8:	40023800 	.word	0x40023800

08002afc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM10)
 8002afc:	6803      	ldr	r3, [r0, #0]
 8002afe:	4a21      	ldr	r2, [pc, #132]	; (8002b84 <HAL_TIM_Base_MspInit+0x88>)
 8002b00:	4293      	cmp	r3, r2
{
 8002b02:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM10)
 8002b04:	d10d      	bne.n	8002b22 <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	4b1f      	ldr	r3, [pc, #124]	; (8002b88 <HAL_TIM_Base_MspInit+0x8c>)
 8002b0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b0e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002b12:	645a      	str	r2, [r3, #68]	; 0x44
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002b1e:	b004      	add	sp, #16
 8002b20:	4770      	bx	lr
  else if(htim_base->Instance==TIM11)
 8002b22:	4a1a      	ldr	r2, [pc, #104]	; (8002b8c <HAL_TIM_Base_MspInit+0x90>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d10c      	bne.n	8002b42 <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002b28:	2300      	movs	r3, #0
 8002b2a:	9301      	str	r3, [sp, #4]
 8002b2c:	4b16      	ldr	r3, [pc, #88]	; (8002b88 <HAL_TIM_Base_MspInit+0x8c>)
 8002b2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b30:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002b34:	645a      	str	r2, [r3, #68]	; 0x44
 8002b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	9b01      	ldr	r3, [sp, #4]
 8002b40:	e7ed      	b.n	8002b1e <HAL_TIM_Base_MspInit+0x22>
  else if(htim_base->Instance==TIM13)
 8002b42:	4a13      	ldr	r2, [pc, #76]	; (8002b90 <HAL_TIM_Base_MspInit+0x94>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d10c      	bne.n	8002b62 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002b48:	2300      	movs	r3, #0
 8002b4a:	9302      	str	r3, [sp, #8]
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <HAL_TIM_Base_MspInit+0x8c>)
 8002b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5c:	9302      	str	r3, [sp, #8]
 8002b5e:	9b02      	ldr	r3, [sp, #8]
 8002b60:	e7dd      	b.n	8002b1e <HAL_TIM_Base_MspInit+0x22>
  else if(htim_base->Instance==TIM14)
 8002b62:	4a0c      	ldr	r2, [pc, #48]	; (8002b94 <HAL_TIM_Base_MspInit+0x98>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d1da      	bne.n	8002b1e <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002b68:	2300      	movs	r3, #0
 8002b6a:	9303      	str	r3, [sp, #12]
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_TIM_Base_MspInit+0x8c>)
 8002b6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	9303      	str	r3, [sp, #12]
 8002b7e:	9b03      	ldr	r3, [sp, #12]
}
 8002b80:	e7cd      	b.n	8002b1e <HAL_TIM_Base_MspInit+0x22>
 8002b82:	bf00      	nop
 8002b84:	40014400 	.word	0x40014400
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40014800 	.word	0x40014800
 8002b90:	40001c00 	.word	0x40001c00
 8002b94:	40002000 	.word	0x40002000

08002b98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b98:	b510      	push	{r4, lr}
 8002b9a:	4604      	mov	r4, r0
 8002b9c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b9e:	2214      	movs	r2, #20
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	a801      	add	r0, sp, #4
 8002ba4:	f000 fd48 	bl	8003638 <memset>
  if(htim->Instance==TIM3)
 8002ba8:	6822      	ldr	r2, [r4, #0]
 8002baa:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <HAL_TIM_MspPostInit+0x48>)
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d114      	bne.n	8002bda <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb6:	480c      	ldr	r0, [pc, #48]	; (8002be8 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bba:	f042 0202 	orr.w	r2, r2, #2
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002bca:	2310      	movs	r3, #16
 8002bcc:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bce:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bd4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd6:	f7fd ff79 	bl	8000acc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002bda:	b006      	add	sp, #24
 8002bdc:	bd10      	pop	{r4, pc}
 8002bde:	bf00      	nop
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40020400 	.word	0x40020400

08002bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	2214      	movs	r2, #20
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	a809      	add	r0, sp, #36	; 0x24
 8002bfa:	f000 fd1d 	bl	8003638 <memset>
  if(huart->Instance==USART1)
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	4a6a      	ldr	r2, [pc, #424]	; (8002dac <HAL_UART_MspInit+0x1c0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d12e      	bne.n	8002c64 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c06:	4b6a      	ldr	r3, [pc, #424]	; (8002db0 <HAL_UART_MspInit+0x1c4>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c08:	486a      	ldr	r0, [pc, #424]	; (8002db4 <HAL_UART_MspInit+0x1c8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c0a:	2400      	movs	r4, #0
 8002c0c:	9400      	str	r4, [sp, #0]
 8002c0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c10:	f042 0210 	orr.w	r2, r2, #16
 8002c14:	645a      	str	r2, [r3, #68]	; 0x44
 8002c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c18:	f002 0210 	and.w	r2, r2, #16
 8002c1c:	9200      	str	r2, [sp, #0]
 8002c1e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c20:	9401      	str	r4, [sp, #4]
 8002c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c24:	f042 0202 	orr.w	r2, r2, #2
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	9301      	str	r3, [sp, #4]
 8002c32:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c34:	23c0      	movs	r3, #192	; 0xc0
 8002c36:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c40:	2303      	movs	r3, #3
 8002c42:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c44:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c46:	2307      	movs	r3, #7
 8002c48:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4a:	f7fd ff3f 	bl	8000acc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c4e:	2025      	movs	r0, #37	; 0x25
 8002c50:	4622      	mov	r2, r4
 8002c52:	4621      	mov	r1, r4
 8002c54:	f7fd fea8 	bl	80009a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c58:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002c5a:	f7fd fed9 	bl	8000a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002c5e:	b00e      	add	sp, #56	; 0x38
 8002c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(huart->Instance==USART2)
 8002c64:	4a54      	ldr	r2, [pc, #336]	; (8002db8 <HAL_UART_MspInit+0x1cc>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d12a      	bne.n	8002cc0 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c6a:	4b51      	ldr	r3, [pc, #324]	; (8002db0 <HAL_UART_MspInit+0x1c4>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c6c:	4853      	ldr	r0, [pc, #332]	; (8002dbc <HAL_UART_MspInit+0x1d0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c6e:	2400      	movs	r4, #0
 8002c70:	9402      	str	r4, [sp, #8]
 8002c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c74:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40
 8002c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c7c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002c80:	9202      	str	r2, [sp, #8]
 8002c82:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c84:	9403      	str	r4, [sp, #12]
 8002c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c88:	f042 0208 	orr.w	r2, r2, #8
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	9303      	str	r3, [sp, #12]
 8002c96:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002c98:	2360      	movs	r3, #96	; 0x60
 8002c9a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ca8:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002caa:	2307      	movs	r3, #7
 8002cac:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cae:	f7fd ff0d 	bl	8000acc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002cb2:	2026      	movs	r0, #38	; 0x26
 8002cb4:	4622      	mov	r2, r4
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	f7fd fe76 	bl	80009a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002cbc:	2026      	movs	r0, #38	; 0x26
 8002cbe:	e7cc      	b.n	8002c5a <HAL_UART_MspInit+0x6e>
  else if(huart->Instance==USART3)
 8002cc0:	4a3f      	ldr	r2, [pc, #252]	; (8002dc0 <HAL_UART_MspInit+0x1d4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d143      	bne.n	8002d4e <HAL_UART_MspInit+0x162>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cc6:	4b3a      	ldr	r3, [pc, #232]	; (8002db0 <HAL_UART_MspInit+0x1c4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc8:	483a      	ldr	r0, [pc, #232]	; (8002db4 <HAL_UART_MspInit+0x1c8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cca:	2400      	movs	r4, #0
 8002ccc:	9404      	str	r4, [sp, #16]
 8002cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cd0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40
 8002cd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cd8:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002cdc:	9204      	str	r2, [sp, #16]
 8002cde:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce0:	9405      	str	r4, [sp, #20]
 8002ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce4:	f042 0202 	orr.w	r2, r2, #2
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
 8002cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cec:	f002 0202 	and.w	r2, r2, #2
 8002cf0:	9205      	str	r2, [sp, #20]
 8002cf2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cf4:	9406      	str	r4, [sp, #24]
 8002cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf8:	f042 0208 	orr.w	r2, r2, #8
 8002cfc:	631a      	str	r2, [r3, #48]	; 0x30
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	9306      	str	r3, [sp, #24]
 8002d06:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d08:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d10:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d12:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d14:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d16:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d18:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d1e:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d20:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d22:	950d      	str	r5, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d24:	f7fd fed2 	bl	8000acc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d28:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d2c:	a909      	add	r1, sp, #36	; 0x24
 8002d2e:	4823      	ldr	r0, [pc, #140]	; (8002dbc <HAL_UART_MspInit+0x1d0>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d30:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d32:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d36:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d38:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d3a:	950d      	str	r5, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d3c:	f7fd fec6 	bl	8000acc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002d40:	2027      	movs	r0, #39	; 0x27
 8002d42:	4622      	mov	r2, r4
 8002d44:	4621      	mov	r1, r4
 8002d46:	f7fd fe2f 	bl	80009a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d4a:	2027      	movs	r0, #39	; 0x27
 8002d4c:	e785      	b.n	8002c5a <HAL_UART_MspInit+0x6e>
  else if(huart->Instance==USART6)
 8002d4e:	4a1d      	ldr	r2, [pc, #116]	; (8002dc4 <HAL_UART_MspInit+0x1d8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d184      	bne.n	8002c5e <HAL_UART_MspInit+0x72>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d54:	4b16      	ldr	r3, [pc, #88]	; (8002db0 <HAL_UART_MspInit+0x1c4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d56:	481c      	ldr	r0, [pc, #112]	; (8002dc8 <HAL_UART_MspInit+0x1dc>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d58:	2400      	movs	r4, #0
 8002d5a:	9407      	str	r4, [sp, #28]
 8002d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d5e:	f042 0220 	orr.w	r2, r2, #32
 8002d62:	645a      	str	r2, [r3, #68]	; 0x44
 8002d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d66:	f002 0220 	and.w	r2, r2, #32
 8002d6a:	9207      	str	r2, [sp, #28]
 8002d6c:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d6e:	9408      	str	r4, [sp, #32]
 8002d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d72:	f042 0204 	orr.w	r2, r2, #4
 8002d76:	631a      	str	r2, [r3, #48]	; 0x30
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	9308      	str	r3, [sp, #32]
 8002d80:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d82:	23c0      	movs	r3, #192	; 0xc0
 8002d84:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d86:	2302      	movs	r3, #2
 8002d88:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d92:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d94:	2308      	movs	r3, #8
 8002d96:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d98:	f7fd fe98 	bl	8000acc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002d9c:	2047      	movs	r0, #71	; 0x47
 8002d9e:	4622      	mov	r2, r4
 8002da0:	4621      	mov	r1, r4
 8002da2:	f7fd fe01 	bl	80009a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002da6:	2047      	movs	r0, #71	; 0x47
 8002da8:	e757      	b.n	8002c5a <HAL_UART_MspInit+0x6e>
 8002daa:	bf00      	nop
 8002dac:	40011000 	.word	0x40011000
 8002db0:	40023800 	.word	0x40023800
 8002db4:	40020400 	.word	0x40020400
 8002db8:	40004400 	.word	0x40004400
 8002dbc:	40020c00 	.word	0x40020c00
 8002dc0:	40004800 	.word	0x40004800
 8002dc4:	40011400 	.word	0x40011400
 8002dc8:	40020800 	.word	0x40020800

08002dcc <NMI_Handler>:
 8002dcc:	4770      	bx	lr

08002dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dce:	e7fe      	b.n	8002dce <HardFault_Handler>

08002dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd0:	e7fe      	b.n	8002dd0 <MemManage_Handler>

08002dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dd2:	e7fe      	b.n	8002dd2 <BusFault_Handler>

08002dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dd4:	e7fe      	b.n	8002dd4 <UsageFault_Handler>

08002dd6 <SVC_Handler>:
 8002dd6:	4770      	bx	lr

08002dd8 <DebugMon_Handler>:
 8002dd8:	4770      	bx	lr

08002dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dda:	4770      	bx	lr

08002ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ddc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	          TimingDelay_Decrement();
 8002dde:	f7ff f895 	bl	8001f0c <TimingDelay_Decrement>
			  TimingDelay_Decrement1();
 8002de2:	f7ff f89b 	bl	8001f1c <TimingDelay_Decrement1>
			  TimingDelay_Decrement3();
 8002de6:	f7ff f8a1 	bl	8001f2c <TimingDelay_Decrement3>
			  TimingDelay_Decrement4();
 8002dea:	f7ff f8a7 	bl	8001f3c <TimingDelay_Decrement4>
			  TimingDelay_Decrement5();
 8002dee:	f7ff f8ad 	bl	8001f4c <TimingDelay_Decrement5>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002df2:	f7fd fbaf 	bl	8000554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /*for */
       	if (TimingDelay<2) //if timming delay is less than 2
 8002df6:	4b1c      	ldr	r3, [pc, #112]	; (8002e68 <SysTick_Handler+0x8c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d809      	bhi.n	8002e12 <SysTick_Handler+0x36>
       		{
       		if (flag2==1)  //flag is 1 (flag tells that has msg came)
 8002dfe:	491b      	ldr	r1, [pc, #108]	; (8002e6c <SysTick_Handler+0x90>)
 8002e00:	680a      	ldr	r2, [r1, #0]
 8002e02:	2a01      	cmp	r2, #1
 8002e04:	d105      	bne.n	8002e12 <SysTick_Handler+0x36>
       			{
       //	__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
       //	 __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
       //	 	HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer1,1);

             flag2= 0 ;
 8002e06:	2300      	movs	r3, #0
 8002e08:	600b      	str	r3, [r1, #0]
       		  msgUnPrcd = 1 ;     //Raise flag to indicate a msg to be processed by main is present
 8002e0a:	4919      	ldr	r1, [pc, #100]	; (8002e70 <SysTick_Handler+0x94>)
 8002e0c:	600a      	str	r2, [r1, #0]
       		  RxCount2 = 0 ;
 8002e0e:	4a19      	ldr	r2, [pc, #100]	; (8002e74 <SysTick_Handler+0x98>)
 8002e10:	8013      	strh	r3, [r2, #0]
       //      USART_ITConfig(USART1, USART_IT_RXNE, DISABLE);

       }
       }
        /*for uart1*/
         	if (TimingDelay1<2) //if timming delay is less than 2
 8002e12:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <SysTick_Handler+0x9c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d809      	bhi.n	8002e2e <SysTick_Handler+0x52>
         		{
         		if (flag1==1)  //flag is 1 (flag tells that has msg came)
 8002e1a:	4918      	ldr	r1, [pc, #96]	; (8002e7c <SysTick_Handler+0xa0>)
 8002e1c:	680a      	ldr	r2, [r1, #0]
 8002e1e:	2a01      	cmp	r2, #1
 8002e20:	d105      	bne.n	8002e2e <SysTick_Handler+0x52>
         			{
         //	__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
         //	 __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
         //	 	HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer1,1);

               flag1= 0 ;
 8002e22:	2300      	movs	r3, #0
 8002e24:	600b      	str	r3, [r1, #0]
         		  msgUnPrcd1 = 1 ;     //Raise flag to indicate a msg to be processed by main is present
 8002e26:	4916      	ldr	r1, [pc, #88]	; (8002e80 <SysTick_Handler+0xa4>)
 8002e28:	600a      	str	r2, [r1, #0]
         		  RxCount1 = 0 ;
 8002e2a:	4a16      	ldr	r2, [pc, #88]	; (8002e84 <SysTick_Handler+0xa8>)
 8002e2c:	8013      	strh	r3, [r2, #0]
         //      USART_ITConfig(USART1, USART_IT_RXNE, DISABLE);

         }
         }
            /*for uart3*/
              	if (TimingDelay3<2) //if timming delay is less than 2
 8002e2e:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <SysTick_Handler+0xac>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d809      	bhi.n	8002e4a <SysTick_Handler+0x6e>
              		{
              		if (flag3==1)  //flag is 1 (flag tells that has msg came)
 8002e36:	4915      	ldr	r1, [pc, #84]	; (8002e8c <SysTick_Handler+0xb0>)
 8002e38:	680a      	ldr	r2, [r1, #0]
 8002e3a:	2a01      	cmp	r2, #1
 8002e3c:	d105      	bne.n	8002e4a <SysTick_Handler+0x6e>
              			{
              //	__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
              //	 __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
              //	 	HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer1,1);

                    flag3= 0 ;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	600b      	str	r3, [r1, #0]
              		  msgUnPrcd3 = 1 ;     //Raise flag to indicate a msg to be processed by main is present
 8002e42:	4913      	ldr	r1, [pc, #76]	; (8002e90 <SysTick_Handler+0xb4>)
 8002e44:	600a      	str	r2, [r1, #0]
              		  RxCount3 = 0 ;
 8002e46:	4a13      	ldr	r2, [pc, #76]	; (8002e94 <SysTick_Handler+0xb8>)
 8002e48:	8013      	strh	r3, [r2, #0]
              //      USART_ITConfig(USART1, USART_IT_RXNE, DISABLE);

              }
              }
                /*for uart2*/
                  	if (TimingDelay4<2) //if timming delay is less than 2
 8002e4a:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <SysTick_Handler+0xbc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d809      	bhi.n	8002e66 <SysTick_Handler+0x8a>
                  		{
                  		if (flag4==1)  //flag is 1 (flag tells that has msg came)
 8002e52:	4912      	ldr	r1, [pc, #72]	; (8002e9c <SysTick_Handler+0xc0>)
 8002e54:	680a      	ldr	r2, [r1, #0]
 8002e56:	2a01      	cmp	r2, #1
 8002e58:	d105      	bne.n	8002e66 <SysTick_Handler+0x8a>
                  			{
                  //	__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
                  //	 __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
                  //	 	HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer1,1);

                        flag4= 0 ;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	600b      	str	r3, [r1, #0]
                  		  msgUnPrcd4 = 1 ;     //Raise flag to indicate a msg to be processed by main is present
 8002e5e:	4910      	ldr	r1, [pc, #64]	; (8002ea0 <SysTick_Handler+0xc4>)
 8002e60:	600a      	str	r2, [r1, #0]
                  		  RxCount4 = 0 ;
 8002e62:	4a10      	ldr	r2, [pc, #64]	; (8002ea4 <SysTick_Handler+0xc8>)
 8002e64:	8013      	strh	r3, [r2, #0]
 8002e66:	bd08      	pop	{r3, pc}
 8002e68:	200003a8 	.word	0x200003a8
 8002e6c:	20000044 	.word	0x20000044
 8002e70:	200003f4 	.word	0x200003f4
 8002e74:	2000003a 	.word	0x2000003a
 8002e78:	200009d4 	.word	0x200009d4
 8002e7c:	20000040 	.word	0x20000040
 8002e80:	20000864 	.word	0x20000864
 8002e84:	20000038 	.word	0x20000038
 8002e88:	20000258 	.word	0x20000258
 8002e8c:	20000048 	.word	0x20000048
 8002e90:	20000658 	.word	0x20000658
 8002e94:	2000003c 	.word	0x2000003c
 8002e98:	2000094c 	.word	0x2000094c
 8002e9c:	2000004c 	.word	0x2000004c
 8002ea0:	20000324 	.word	0x20000324
 8002ea4:	2000003e 	.word	0x2000003e

08002ea8 <USART1_IRQHandler>:
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */
	TimingDelay1 = 10; //initilizing timingDelay with 10 & decremening this delay.
 8002ea8:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <USART1_IRQHandler+0x3c>)
 8002eaa:	220a      	movs	r2, #10
{
 8002eac:	b510      	push	{r4, lr}
	TimingDelay1 = 10; //initilizing timingDelay with 10 & decremening this delay.
 8002eae:	601a      	str	r2, [r3, #0]
  	if(flag1==0)     //if flag was previous 0,it means that 1byte is being rec(fresh msg) if not goes to else part
 8002eb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <USART1_IRQHandler+0x40>)
 8002eb2:	4c0e      	ldr	r4, [pc, #56]	; (8002eec <USART1_IRQHandler+0x44>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	b98a      	cbnz	r2, 8002edc <USART1_IRQHandler+0x34>
  {
  RxCount1 = 0 ; //initilizing the count of recieved array with 0,means that it is the first byte(0 is used bcoz indexing in array is done from 0th index)
 8002eb8:	8022      	strh	r2, [r4, #0]
  flag1=1;   		//UART is active in process of receiving a messege
 8002eba:	2201      	movs	r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]
//	msgTime = 0 ;
  }
	else // if it is not a fresh msg than incrementing RxCount2(RxCount2 shows the number of bytes being rec)
		RxCount1++;

	if (RxCount1>50)
 8002ebe:	8822      	ldrh	r2, [r4, #0]
//		comCount=1;
//		comCount=2;

  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ec0:	480b      	ldr	r0, [pc, #44]	; (8002ef0 <USART1_IRQHandler+0x48>)
	if (RxCount1>50)
 8002ec2:	2a32      	cmp	r2, #50	; 0x32
		flag1=0 ;
 8002ec4:	bf82      	ittt	hi
 8002ec6:	2200      	movhi	r2, #0
 8002ec8:	601a      	strhi	r2, [r3, #0]
		RxCount1 = 0 ;
 8002eca:	8022      	strhhi	r2, [r4, #0]
  HAL_UART_IRQHandler(&huart1);
 8002ecc:	f7fe fe00 	bl	8001ad0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  RecMsg1[RxCount1]=aRxBuffer1[0]; //after every byte is rec it is transferred to RecMsg2 array(here RxCount2 counter is used for placing the rec byte at correct index place)
 8002ed0:	4a08      	ldr	r2, [pc, #32]	; (8002ef4 <USART1_IRQHandler+0x4c>)
 8002ed2:	8823      	ldrh	r3, [r4, #0]
 8002ed4:	7811      	ldrb	r1, [r2, #0]
 8002ed6:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <USART1_IRQHandler+0x50>)
 8002ed8:	54d1      	strb	r1, [r2, r3]
 8002eda:	bd10      	pop	{r4, pc}
		RxCount1++;
 8002edc:	8822      	ldrh	r2, [r4, #0]
 8002ede:	3201      	adds	r2, #1
 8002ee0:	8022      	strh	r2, [r4, #0]
 8002ee2:	e7ec      	b.n	8002ebe <USART1_IRQHandler+0x16>
 8002ee4:	200009d4 	.word	0x200009d4
 8002ee8:	20000040 	.word	0x20000040
 8002eec:	20000038 	.word	0x20000038
 8002ef0:	20000520 	.word	0x20000520
 8002ef4:	2000065c 	.word	0x2000065c
 8002ef8:	20000e3e 	.word	0x20000e3e

08002efc <USART2_IRQHandler>:
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */
	TimingDelay4 = 10; //initilizing timingDelay with 10 & decremening this delay.
 8002efc:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <USART2_IRQHandler+0x44>)
 8002efe:	220a      	movs	r2, #10
{
 8002f00:	b510      	push	{r4, lr}
	TimingDelay4 = 10; //initilizing timingDelay with 10 & decremening this delay.
 8002f02:	601a      	str	r2, [r3, #0]
				  	if(flag4==0)     //if flag was previous 0,it means that 1byte is being rec(fresh msg) if not goes to else part
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <USART2_IRQHandler+0x48>)
 8002f06:	4c10      	ldr	r4, [pc, #64]	; (8002f48 <USART2_IRQHandler+0x4c>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	b99a      	cbnz	r2, 8002f34 <USART2_IRQHandler+0x38>
				  {
				  RxCount4 = 0 ; //initilizing the count of recieved array with 0,means that it is the first byte(0 is used bcoz indexing in array is done from 0th index)
 8002f0c:	8022      	strh	r2, [r4, #0]
				  flag4=1;   		//UART is active in process of receiving a messege
 8002f0e:	2201      	movs	r2, #1
 8002f10:	601a      	str	r2, [r3, #0]
				//	msgTime = 0 ;
				  }
					else // if it is not a fresh msg than incrementing RxCount2(RxCount2 shows the number of bytes being rec)
						RxCount4++;

					if (RxCount4>150)
 8002f12:	8822      	ldrh	r2, [r4, #0]
				//		comCount=1;
				//		comCount=2;

				  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f14:	480d      	ldr	r0, [pc, #52]	; (8002f4c <USART2_IRQHandler+0x50>)
					if (RxCount4>150)
 8002f16:	b292      	uxth	r2, r2
 8002f18:	2a96      	cmp	r2, #150	; 0x96
						flag4=0 ;
 8002f1a:	bf82      	ittt	hi
 8002f1c:	2200      	movhi	r2, #0
 8002f1e:	601a      	strhi	r2, [r3, #0]
						RxCount4 = 0 ;
 8002f20:	8022      	strhhi	r2, [r4, #0]
  HAL_UART_IRQHandler(&huart2);
 8002f22:	f7fe fdd5 	bl	8001ad0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  RecMsg4[RxCount4]=aRxBuffer4[0]; //after every byte is rec it is transferred to RecMsg2 array(here RxCount2 counter is used for placing the rec byte at correct index place)
 8002f26:	4a0a      	ldr	r2, [pc, #40]	; (8002f50 <USART2_IRQHandler+0x54>)
 8002f28:	8823      	ldrh	r3, [r4, #0]
 8002f2a:	7811      	ldrb	r1, [r2, #0]
 8002f2c:	4a09      	ldr	r2, [pc, #36]	; (8002f54 <USART2_IRQHandler+0x58>)
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	54d1      	strb	r1, [r2, r3]
 8002f32:	bd10      	pop	{r4, pc}
						RxCount4++;
 8002f34:	8822      	ldrh	r2, [r4, #0]
 8002f36:	3201      	adds	r2, #1
 8002f38:	b292      	uxth	r2, r2
 8002f3a:	8022      	strh	r2, [r4, #0]
 8002f3c:	e7e9      	b.n	8002f12 <USART2_IRQHandler+0x16>
 8002f3e:	bf00      	nop
 8002f40:	2000094c 	.word	0x2000094c
 8002f44:	2000004c 	.word	0x2000004c
 8002f48:	2000003e 	.word	0x2000003e
 8002f4c:	20000950 	.word	0x20000950
 8002f50:	20000868 	.word	0x20000868
 8002f54:	20000054 	.word	0x20000054

08002f58 <USART3_IRQHandler>:
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */
	TimingDelay3 = 10; //initilizing timingDelay with 10 & decremening this delay.
 8002f58:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <USART3_IRQHandler+0x3c>)
 8002f5a:	220a      	movs	r2, #10
{
 8002f5c:	b510      	push	{r4, lr}
	TimingDelay3 = 10; //initilizing timingDelay with 10 & decremening this delay.
 8002f5e:	601a      	str	r2, [r3, #0]
			  	if(flag3==0)     //if flag was previous 0,it means that 1byte is being rec(fresh msg) if not goes to else part
 8002f60:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <USART3_IRQHandler+0x40>)
 8002f62:	4c0e      	ldr	r4, [pc, #56]	; (8002f9c <USART3_IRQHandler+0x44>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	b98a      	cbnz	r2, 8002f8c <USART3_IRQHandler+0x34>
			  {
			  RxCount3 = 0 ; //initilizing the count of recieved array with 0,means that it is the first byte(0 is used bcoz indexing in array is done from 0th index)
 8002f68:	8022      	strh	r2, [r4, #0]
			  flag3=1;   		//UART is active in process of receiving a messege
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
			//	msgTime = 0 ;
			  }
				else // if it is not a fresh msg than incrementing RxCount2(RxCount2 shows the number of bytes being rec)
					RxCount3++;

				if (RxCount3>50)
 8002f6e:	8822      	ldrh	r2, [r4, #0]
			//		comCount=1;
			//		comCount=2;

			  }
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002f70:	480b      	ldr	r0, [pc, #44]	; (8002fa0 <USART3_IRQHandler+0x48>)
				if (RxCount3>50)
 8002f72:	2a32      	cmp	r2, #50	; 0x32
					flag3=0 ;
 8002f74:	bf82      	ittt	hi
 8002f76:	2200      	movhi	r2, #0
 8002f78:	601a      	strhi	r2, [r3, #0]
					RxCount3 = 0 ;
 8002f7a:	8022      	strhhi	r2, [r4, #0]
  HAL_UART_IRQHandler(&huart3);
 8002f7c:	f7fe fda8 	bl	8001ad0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  RecMsg3[RxCount3]=aRxBuffer3[0]; //after every byte is rec it is transferred to RecMsg2 array(here RxCount2 counter is used for placing the rec byte at correct index place)
 8002f80:	4a08      	ldr	r2, [pc, #32]	; (8002fa4 <USART3_IRQHandler+0x4c>)
 8002f82:	8823      	ldrh	r3, [r4, #0]
 8002f84:	7811      	ldrb	r1, [r2, #0]
 8002f86:	4a08      	ldr	r2, [pc, #32]	; (8002fa8 <USART3_IRQHandler+0x50>)
 8002f88:	54d1      	strb	r1, [r2, r3]
 8002f8a:	bd10      	pop	{r4, pc}
					RxCount3++;
 8002f8c:	8822      	ldrh	r2, [r4, #0]
 8002f8e:	3201      	adds	r2, #1
 8002f90:	8022      	strh	r2, [r4, #0]
 8002f92:	e7ec      	b.n	8002f6e <USART3_IRQHandler+0x16>
 8002f94:	20000258 	.word	0x20000258
 8002f98:	20000048 	.word	0x20000048
 8002f9c:	2000003c 	.word	0x2000003c
 8002fa0:	2000025c 	.word	0x2000025c
 8002fa4:	200003fc 	.word	0x200003fc
 8002fa8:	20000d44 	.word	0x20000d44

08002fac <USART6_IRQHandler>:
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */
	TimingDelay = 10; //initilizing timingDelay with 10 & decremening this delay.
 8002fac:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <USART6_IRQHandler+0x3c>)
 8002fae:	220a      	movs	r2, #10
{
 8002fb0:	b510      	push	{r4, lr}
	TimingDelay = 10; //initilizing timingDelay with 10 & decremening this delay.
 8002fb2:	601a      	str	r2, [r3, #0]
					  	if(flag2==0)     //if flag was previous 0,it means that 1byte is being rec(fresh msg) if not goes to else part
 8002fb4:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <USART6_IRQHandler+0x40>)
 8002fb6:	4c0e      	ldr	r4, [pc, #56]	; (8002ff0 <USART6_IRQHandler+0x44>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	b98a      	cbnz	r2, 8002fe0 <USART6_IRQHandler+0x34>
					  {
					  RxCount2 = 0 ; //initilizing the count of recieved array with 0,means that it is the first byte(0 is used bcoz indexing in array is done from 0th index)
 8002fbc:	8022      	strh	r2, [r4, #0]
					  flag2=1;   		//UART is active in process of receiving a messege
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
					//	msgTime = 0 ;
					  }
						else // if it is not a fresh msg than incrementing RxCount2(RxCount2 shows the number of bytes being rec)
							RxCount2++;

						if (RxCount2>50)
 8002fc2:	8822      	ldrh	r2, [r4, #0]
					//		comCount=1;
					//		comCount=2;

					  }
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002fc4:	480b      	ldr	r0, [pc, #44]	; (8002ff4 <USART6_IRQHandler+0x48>)
						if (RxCount2>50)
 8002fc6:	2a32      	cmp	r2, #50	; 0x32
							flag2=0 ;
 8002fc8:	bf82      	ittt	hi
 8002fca:	2200      	movhi	r2, #0
 8002fcc:	601a      	strhi	r2, [r3, #0]
							RxCount2 = 0 ;
 8002fce:	8022      	strhhi	r2, [r4, #0]
  HAL_UART_IRQHandler(&huart6);
 8002fd0:	f7fe fd7e 	bl	8001ad0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  RecMsg2[RxCount2]=aRxBuffer[0]; //after every byte is rec it is transferred to RecMsg2 array(here RxCount2 counter is used for placing the rec byte at correct index place)
 8002fd4:	4a08      	ldr	r2, [pc, #32]	; (8002ff8 <USART6_IRQHandler+0x4c>)
 8002fd6:	8823      	ldrh	r3, [r4, #0]
 8002fd8:	7811      	ldrb	r1, [r2, #0]
 8002fda:	4a08      	ldr	r2, [pc, #32]	; (8002ffc <USART6_IRQHandler+0x50>)
 8002fdc:	54d1      	strb	r1, [r2, r3]
 8002fde:	bd10      	pop	{r4, pc}
							RxCount2++;
 8002fe0:	8822      	ldrh	r2, [r4, #0]
 8002fe2:	3201      	adds	r2, #1
 8002fe4:	8022      	strh	r2, [r4, #0]
 8002fe6:	e7ec      	b.n	8002fc2 <USART6_IRQHandler+0x16>
 8002fe8:	200003a8 	.word	0x200003a8
 8002fec:	20000044 	.word	0x20000044
 8002ff0:	2000003a 	.word	0x2000003a
 8002ff4:	20000740 	.word	0x20000740
 8002ff8:	20000780 	.word	0x20000780
 8002ffc:	20000c4a 	.word	0x20000c4a

08003000 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003000:	490f      	ldr	r1, [pc, #60]	; (8003040 <SystemInit+0x40>)
 8003002:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003006:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800300a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800300e:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <SystemInit+0x44>)
 8003010:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003012:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800301a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003022:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003026:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003028:	4a07      	ldr	r2, [pc, #28]	; (8003048 <SystemInit+0x48>)
 800302a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003032:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003034:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003036:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800303a:	608b      	str	r3, [r1, #8]
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	e000ed00 	.word	0xe000ed00
 8003044:	40023800 	.word	0x40023800
 8003048:	24003010 	.word	0x24003010

0800304c <checkSide>:
void checkSide(){

//	RecMsg4[5]=0x84;//side13
//	RecMsg4[6]=0x38;
	/*----------------Separating the values of sides------------------*/
	sideNo1= RecMsg4[5] >> 4; // right shift 4 bit
 800304c:	4911      	ldr	r1, [pc, #68]	; (8003094 <checkSide+0x48>)
	sideNo1=sideNo1 << 4 ; //left shift 4 bit
 800304e:	4812      	ldr	r0, [pc, #72]	; (8003098 <checkSide+0x4c>)
	sideNo1= RecMsg4[5] >> 4; // right shift 4 bit
 8003050:	794b      	ldrb	r3, [r1, #5]
	sideNo1=sideNo1 << 4 ; //left shift 4 bit
 8003052:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003056:	7002      	strb	r2, [r0, #0]
    /*-----------------making it for 8bit--------------for ex-side1=0x80 converting it to 0x88*/
	sideNo1N=sideNo1 >> 4;
	sideNo1N=sideNo1^sideNo1N;
 8003058:	4810      	ldr	r0, [pc, #64]	; (800309c <checkSide+0x50>)
 800305a:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
 800305e:	7002      	strb	r2, [r0, #0]

	sideNo3=  RecMsg4[5] ^ sideNo1; //
 8003060:	4a0f      	ldr	r2, [pc, #60]	; (80030a0 <checkSide+0x54>)
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	7013      	strb	r3, [r2, #0]

    sideNo3N=sideNo3 << 4;
    sideNo3N=sideNo3N^sideNo3;
 8003068:	4a0e      	ldr	r2, [pc, #56]	; (80030a4 <checkSide+0x58>)
 800306a:	ea43 1303 	orr.w	r3, r3, r3, lsl #4
 800306e:	7013      	strb	r3, [r2, #0]


	sideNo2= RecMsg4[6] >> 4; // right shift 4 bit
 8003070:	798b      	ldrb	r3, [r1, #6]
	sideNo2=sideNo2 << 4 ; //left shift 4 bit
 8003072:	490d      	ldr	r1, [pc, #52]	; (80030a8 <checkSide+0x5c>)
 8003074:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003078:	700a      	strb	r2, [r1, #0]

	/*-----------------making it for 8bit--------------for ex-side1=0x80 converting it to 0x88*/
		sideNo2N=sideNo2 >> 4;
		sideNo2N=sideNo2^sideNo2N;
 800307a:	490c      	ldr	r1, [pc, #48]	; (80030ac <checkSide+0x60>)
 800307c:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
 8003080:	700a      	strb	r2, [r1, #0]


	sideNo4=  RecMsg4[6] ^ sideNo2; //
 8003082:	4a0b      	ldr	r2, [pc, #44]	; (80030b0 <checkSide+0x64>)
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	7013      	strb	r3, [r2, #0]

	sideNo4N=sideNo4 << 4;
	sideNo4N=sideNo4N^sideNo4;
 800308a:	4a0a      	ldr	r2, [pc, #40]	; (80030b4 <checkSide+0x68>)
 800308c:	ea43 1303 	orr.w	r3, r3, r3, lsl #4
 8003090:	7013      	strb	r3, [r2, #0]
 8003092:	4770      	bx	lr
 8003094:	20000054 	.word	0x20000054
 8003098:	20000f39 	.word	0x20000f39
 800309c:	20000f3a 	.word	0x20000f3a
 80030a0:	20000f3e 	.word	0x20000f3e
 80030a4:	20000f41 	.word	0x20000f41
 80030a8:	20000f3c 	.word	0x20000f3c
 80030ac:	20000f40 	.word	0x20000f40
 80030b0:	20000f3b 	.word	0x20000f3b
 80030b4:	20000f42 	.word	0x20000f42

080030b8 <checkFeedback>:


}


void checkFeedback(){
 80030b8:	b570      	push	{r4, r5, r6, lr}

	adcVal1=0;
 80030ba:	4dcb      	ldr	r5, [pc, #812]	; (80033e8 <checkFeedback+0x330>)
	adcVal2=0;
 80030bc:	4ccb      	ldr	r4, [pc, #812]	; (80033ec <checkFeedback+0x334>)
	/*-------------------ADC---------------------------*/

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET); //a       0
 80030be:	48cc      	ldr	r0, [pc, #816]	; (80033f0 <checkFeedback+0x338>)
	adcVal1=0;
 80030c0:	2600      	movs	r6, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET); //a       0
 80030c2:	4632      	mov	r2, r6
 80030c4:	2180      	movs	r1, #128	; 0x80
	adcVal1=0;
 80030c6:	702e      	strb	r6, [r5, #0]
	adcVal2=0;
 80030c8:	7026      	strb	r6, [r4, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET); //a       0
 80030ca:	f7fd fde5 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET); //b       0
 80030ce:	4632      	mov	r2, r6
 80030d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030d4:	48c6      	ldr	r0, [pc, #792]	; (80033f0 <checkFeedback+0x338>)
 80030d6:	f7fd fddf 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET); //c       0
 80030da:	4632      	mov	r2, r6
 80030dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030e0:	48c3      	ldr	r0, [pc, #780]	; (80033f0 <checkFeedback+0x338>)

	SetAdcChannel(ADC_CHANNEL_9);
	HAL_ADC_Start(&hadc2);
	HAL_ADC_PollForConversion(&hadc2, 100);

	AdcVal[1] = HAL_ADC_GetValue(&hadc2);
 80030e2:	4ec4      	ldr	r6, [pc, #784]	; (80033f4 <checkFeedback+0x33c>)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET); //c       0
 80030e4:	f7fd fdd8 	bl	8000c98 <HAL_GPIO_WritePin>
	SetAdcChannel(ADC_CHANNEL_9);
 80030e8:	2009      	movs	r0, #9
 80030ea:	f7ff fb7d 	bl	80027e8 <SetAdcChannel>
	HAL_ADC_Start(&hadc2);
 80030ee:	48c2      	ldr	r0, [pc, #776]	; (80033f8 <checkFeedback+0x340>)
 80030f0:	f7fd fae8 	bl	80006c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 80030f4:	2164      	movs	r1, #100	; 0x64
 80030f6:	48c0      	ldr	r0, [pc, #768]	; (80033f8 <checkFeedback+0x340>)
 80030f8:	f7fd fb5a 	bl	80007b0 <HAL_ADC_PollForConversion>
	AdcVal[1] = HAL_ADC_GetValue(&hadc2);
 80030fc:	48be      	ldr	r0, [pc, #760]	; (80033f8 <checkFeedback+0x340>)
 80030fe:	f7fd fba7 	bl	8000850 <HAL_ADC_GetValue>
 8003102:	782b      	ldrb	r3, [r5, #0]
 8003104:	6070      	str	r0, [r6, #4]

	/*--------------updating the value of adc variable-----------------------*/
   if(AdcVal[1]>100)
 8003106:	2864      	cmp	r0, #100	; 0x64
   {
	adcVal1=adcVal1^0x01;
 8003108:	bf8c      	ite	hi
 800310a:	f083 0301 	eorhi.w	r3, r3, #1
   }
   else{
	adcVal1=adcVal1&0xFE;
 800310e:	f023 0301 	bicls.w	r3, r3, #1
   }

	SetAdcChannel(ADC_CHANNEL_8);
 8003112:	2008      	movs	r0, #8
	adcVal1=adcVal1&0xFE;
 8003114:	702b      	strb	r3, [r5, #0]
	SetAdcChannel(ADC_CHANNEL_8);
 8003116:	f7ff fb67 	bl	80027e8 <SetAdcChannel>
	HAL_ADC_Start(&hadc1);
 800311a:	48b8      	ldr	r0, [pc, #736]	; (80033fc <checkFeedback+0x344>)
 800311c:	f7fd fad2 	bl	80006c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8003120:	2164      	movs	r1, #100	; 0x64
 8003122:	48b6      	ldr	r0, [pc, #728]	; (80033fc <checkFeedback+0x344>)
 8003124:	f7fd fb44 	bl	80007b0 <HAL_ADC_PollForConversion>

	AdcVal[9] = HAL_ADC_GetValue(&hadc1);
 8003128:	48b4      	ldr	r0, [pc, #720]	; (80033fc <checkFeedback+0x344>)
 800312a:	f7fd fb91 	bl	8000850 <HAL_ADC_GetValue>

	/*--------------updating the value of adc variable-----------------------*/
   if(AdcVal[9]>100)
   {
	adcVal2=adcVal2^0x01;
 800312e:	7823      	ldrb	r3, [r4, #0]
	AdcVal[9] = HAL_ADC_GetValue(&hadc1);
 8003130:	6270      	str	r0, [r6, #36]	; 0x24
   if(AdcVal[9]>100)
 8003132:	2864      	cmp	r0, #100	; 0x64
	adcVal2=adcVal2^0x01;
 8003134:	bf8c      	ite	hi
 8003136:	f083 0301 	eorhi.w	r3, r3, #1
   }
   else{
	adcVal2=adcVal2&0xFE;
 800313a:	f023 0301 	bicls.w	r3, r3, #1
   }

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);		//a       1
 800313e:	2201      	movs	r2, #1
 8003140:	2180      	movs	r1, #128	; 0x80
 8003142:	48ab      	ldr	r0, [pc, #684]	; (80033f0 <checkFeedback+0x338>)
	adcVal2=adcVal2&0xFE;
 8003144:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);		//a       1
 8003146:	f7fd fda7 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);		//b   0
 800314a:	2200      	movs	r2, #0
 800314c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003150:	48a7      	ldr	r0, [pc, #668]	; (80033f0 <checkFeedback+0x338>)
 8003152:	f7fd fda1 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);		//c   0
 8003156:	2200      	movs	r2, #0
 8003158:	f44f 7100 	mov.w	r1, #512	; 0x200
 800315c:	48a4      	ldr	r0, [pc, #656]	; (80033f0 <checkFeedback+0x338>)
 800315e:	f7fd fd9b 	bl	8000c98 <HAL_GPIO_WritePin>
	//for channel 1

	SetAdcChannel(ADC_CHANNEL_9);
 8003162:	2009      	movs	r0, #9
 8003164:	f7ff fb40 	bl	80027e8 <SetAdcChannel>
	HAL_ADC_Start(&hadc2);
 8003168:	48a3      	ldr	r0, [pc, #652]	; (80033f8 <checkFeedback+0x340>)
 800316a:	f7fd faab 	bl	80006c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 800316e:	2164      	movs	r1, #100	; 0x64
 8003170:	48a1      	ldr	r0, [pc, #644]	; (80033f8 <checkFeedback+0x340>)
 8003172:	f7fd fb1d 	bl	80007b0 <HAL_ADC_PollForConversion>

	AdcVal[2] = HAL_ADC_GetValue(&hadc2);
 8003176:	48a0      	ldr	r0, [pc, #640]	; (80033f8 <checkFeedback+0x340>)
 8003178:	f7fd fb6a 	bl	8000850 <HAL_ADC_GetValue>

	/*--------------updating the value of adc variable-----------------------*/
   if(AdcVal[2]>100)
   {
	adcVal1=adcVal1^0x02;
 800317c:	782b      	ldrb	r3, [r5, #0]
	AdcVal[2] = HAL_ADC_GetValue(&hadc2);
 800317e:	60b0      	str	r0, [r6, #8]
   if(AdcVal[2]>100)
 8003180:	2864      	cmp	r0, #100	; 0x64
	adcVal1=adcVal1^0x02;
 8003182:	bf8c      	ite	hi
 8003184:	f083 0302 	eorhi.w	r3, r3, #2
   }
   else{
	adcVal1=adcVal1&0xFD;
 8003188:	f023 0302 	bicls.w	r3, r3, #2
   }


	SetAdcChannel(ADC_CHANNEL_8);
 800318c:	2008      	movs	r0, #8
	adcVal1=adcVal1&0xFD;
 800318e:	702b      	strb	r3, [r5, #0]
	SetAdcChannel(ADC_CHANNEL_8);
 8003190:	f7ff fb2a 	bl	80027e8 <SetAdcChannel>
	HAL_ADC_Start(&hadc1);
 8003194:	4899      	ldr	r0, [pc, #612]	; (80033fc <checkFeedback+0x344>)
 8003196:	f7fd fa95 	bl	80006c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 800319a:	2164      	movs	r1, #100	; 0x64
 800319c:	4897      	ldr	r0, [pc, #604]	; (80033fc <checkFeedback+0x344>)
 800319e:	f7fd fb07 	bl	80007b0 <HAL_ADC_PollForConversion>

	AdcVal[10] = HAL_ADC_GetValue(&hadc1);
 80031a2:	4896      	ldr	r0, [pc, #600]	; (80033fc <checkFeedback+0x344>)
 80031a4:	f7fd fb54 	bl	8000850 <HAL_ADC_GetValue>

	/*--------------updating the value of adc variable-----------------------*/
   if(AdcVal[10]>100)
   {
	adcVal2=adcVal2^0x02;
 80031a8:	7823      	ldrb	r3, [r4, #0]
	AdcVal[10] = HAL_ADC_GetValue(&hadc1);
 80031aa:	62b0      	str	r0, [r6, #40]	; 0x28
   if(AdcVal[10]>100)
 80031ac:	2864      	cmp	r0, #100	; 0x64
	adcVal2=adcVal2^0x02;
 80031ae:	bf8c      	ite	hi
 80031b0:	f083 0302 	eorhi.w	r3, r3, #2
   }
   else{
	adcVal2=adcVal2&0xFD;
 80031b4:	f023 0302 	bicls.w	r3, r3, #2
   }

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);	//a     0
 80031b8:	2200      	movs	r2, #0
 80031ba:	2180      	movs	r1, #128	; 0x80
 80031bc:	488c      	ldr	r0, [pc, #560]	; (80033f0 <checkFeedback+0x338>)
	adcVal2=adcVal2&0xFD;
 80031be:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);	//a     0
 80031c0:	f7fd fd6a 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);	//b         1
 80031c4:	2201      	movs	r2, #1
 80031c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031ca:	4889      	ldr	r0, [pc, #548]	; (80033f0 <checkFeedback+0x338>)
 80031cc:	f7fd fd64 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);	//c     0
 80031d0:	2200      	movs	r2, #0
 80031d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031d6:	4886      	ldr	r0, [pc, #536]	; (80033f0 <checkFeedback+0x338>)
 80031d8:	f7fd fd5e 	bl	8000c98 <HAL_GPIO_WritePin>
	//for channel 2

	SetAdcChannel(ADC_CHANNEL_9);
 80031dc:	2009      	movs	r0, #9
 80031de:	f7ff fb03 	bl	80027e8 <SetAdcChannel>
	HAL_ADC_Start(&hadc2);
 80031e2:	4885      	ldr	r0, [pc, #532]	; (80033f8 <checkFeedback+0x340>)
 80031e4:	f7fd fa6e 	bl	80006c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 80031e8:	2164      	movs	r1, #100	; 0x64
 80031ea:	4883      	ldr	r0, [pc, #524]	; (80033f8 <checkFeedback+0x340>)
 80031ec:	f7fd fae0 	bl	80007b0 <HAL_ADC_PollForConversion>

	AdcVal[3] = HAL_ADC_GetValue(&hadc2);
 80031f0:	4881      	ldr	r0, [pc, #516]	; (80033f8 <checkFeedback+0x340>)
 80031f2:	f7fd fb2d 	bl	8000850 <HAL_ADC_GetValue>

	/*--------------updating the value of adc variable-----------------------*/
   if(AdcVal[3]>100)
   {
	adcVal1=adcVal1^0x04;
 80031f6:	782b      	ldrb	r3, [r5, #0]
	AdcVal[3] = HAL_ADC_GetValue(&hadc2);
 80031f8:	60f0      	str	r0, [r6, #12]
   if(AdcVal[3]>100)
 80031fa:	2864      	cmp	r0, #100	; 0x64
	adcVal1=adcVal1^0x04;
 80031fc:	bf8c      	ite	hi
 80031fe:	f083 0304 	eorhi.w	r3, r3, #4
   }
   else{
	adcVal1=adcVal1&0xFB;
 8003202:	f023 0304 	bicls.w	r3, r3, #4
   }


	SetAdcChannel(ADC_CHANNEL_8);
 8003206:	2008      	movs	r0, #8
	adcVal1=adcVal1&0xFB;
 8003208:	702b      	strb	r3, [r5, #0]
	SetAdcChannel(ADC_CHANNEL_8);
 800320a:	f7ff faed 	bl	80027e8 <SetAdcChannel>
	HAL_ADC_Start(&hadc1);
 800320e:	487b      	ldr	r0, [pc, #492]	; (80033fc <checkFeedback+0x344>)
 8003210:	f7fd fa58 	bl	80006c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8003214:	2164      	movs	r1, #100	; 0x64
 8003216:	4879      	ldr	r0, [pc, #484]	; (80033fc <checkFeedback+0x344>)
 8003218:	f7fd faca 	bl	80007b0 <HAL_ADC_PollForConversion>

	AdcVal[11] = HAL_ADC_GetValue(&hadc1);
 800321c:	4877      	ldr	r0, [pc, #476]	; (80033fc <checkFeedback+0x344>)
 800321e:	f7fd fb17 	bl	8000850 <HAL_ADC_GetValue>

	/*--------------updating the value of adc variable-----------------------*/
   if(AdcVal[11]>100)
   {
	adcVal2=adcVal2^0x04;
 8003222:	7823      	ldrb	r3, [r4, #0]
	AdcVal[11] = HAL_ADC_GetValue(&hadc1);
 8003224:	62f0      	str	r0, [r6, #44]	; 0x2c
   if(AdcVal[11]>100)
 8003226:	2864      	cmp	r0, #100	; 0x64
	adcVal2=adcVal2^0x04;
 8003228:	bf8c      	ite	hi
 800322a:	f083 0304 	eorhi.w	r3, r3, #4
   }
   else{
	adcVal2=adcVal2&0xFB;
 800322e:	f023 0304 	bicls.w	r3, r3, #4
   }

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);		//a       1
 8003232:	2201      	movs	r2, #1
 8003234:	2180      	movs	r1, #128	; 0x80
 8003236:	486e      	ldr	r0, [pc, #440]	; (80033f0 <checkFeedback+0x338>)
	adcVal2=adcVal2&0xFB;
 8003238:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);		//a       1
 800323a:	f7fd fd2d 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);		//b       1
 800323e:	2201      	movs	r2, #1
 8003240:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003244:	486a      	ldr	r0, [pc, #424]	; (80033f0 <checkFeedback+0x338>)
 8003246:	f7fd fd27 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);		//c   0
 800324a:	2200      	movs	r2, #0
 800324c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003250:	4867      	ldr	r0, [pc, #412]	; (80033f0 <checkFeedback+0x338>)
 8003252:	f7fd fd21 	bl	8000c98 <HAL_GPIO_WritePin>
	//for channel 3

	SetAdcChannel(ADC_CHANNEL_9);
 8003256:	2009      	movs	r0, #9
 8003258:	f7ff fac6 	bl	80027e8 <SetAdcChannel>
	HAL_ADC_Start(&hadc2);
 800325c:	4866      	ldr	r0, [pc, #408]	; (80033f8 <checkFeedback+0x340>)
 800325e:	f7fd fa31 	bl	80006c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 8003262:	2164      	movs	r1, #100	; 0x64
 8003264:	4864      	ldr	r0, [pc, #400]	; (80033f8 <checkFeedback+0x340>)
 8003266:	f7fd faa3 	bl	80007b0 <HAL_ADC_PollForConversion>

	AdcVal[4] = HAL_ADC_GetValue(&hadc2);
 800326a:	4863      	ldr	r0, [pc, #396]	; (80033f8 <checkFeedback+0x340>)
 800326c:	f7fd faf0 	bl	8000850 <HAL_ADC_GetValue>

	/*--------------updating the value of adc variable-----------------------*/
   if(AdcVal[4]>100)
   {
	adcVal1=adcVal1^0x08;
 8003270:	782b      	ldrb	r3, [r5, #0]
	AdcVal[4] = HAL_ADC_GetValue(&hadc2);
 8003272:	6130      	str	r0, [r6, #16]
   if(AdcVal[4]>100)
 8003274:	2864      	cmp	r0, #100	; 0x64
	adcVal1=adcVal1^0x08;
 8003276:	bf8c      	ite	hi
 8003278:	f083 0308 	eorhi.w	r3, r3, #8
   }
   else{
	adcVal1=adcVal1&0xF7;
 800327c:	f023 0308 	bicls.w	r3, r3, #8
   }

	SetAdcChannel(ADC_CHANNEL_8);
 8003280:	2008      	movs	r0, #8
	adcVal1=adcVal1&0xF7;
 8003282:	702b      	strb	r3, [r5, #0]
	SetAdcChannel(ADC_CHANNEL_8);
 8003284:	f7ff fab0 	bl	80027e8 <SetAdcChannel>
	HAL_ADC_Start(&hadc1);
 8003288:	485c      	ldr	r0, [pc, #368]	; (80033fc <checkFeedback+0x344>)
 800328a:	f7fd fa1b 	bl	80006c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 800328e:	2164      	movs	r1, #100	; 0x64
 8003290:	485a      	ldr	r0, [pc, #360]	; (80033fc <checkFeedback+0x344>)
 8003292:	f7fd fa8d 	bl	80007b0 <HAL_ADC_PollForConversion>

	AdcVal[12] = HAL_ADC_GetValue(&hadc1);
 8003296:	4859      	ldr	r0, [pc, #356]	; (80033fc <checkFeedback+0x344>)
 8003298:	f7fd fada 	bl	8000850 <HAL_ADC_GetValue>

	/*--------------updating the value of adc variable-----------------------*/
   if(AdcVal[12]>100)
   {
	adcVal2=adcVal2^0x08;
 800329c:	7823      	ldrb	r3, [r4, #0]
	AdcVal[12] = HAL_ADC_GetValue(&hadc1);
 800329e:	6330      	str	r0, [r6, #48]	; 0x30
   if(AdcVal[12]>100)
 80032a0:	2864      	cmp	r0, #100	; 0x64
	adcVal2=adcVal2^0x08;
 80032a2:	bf8c      	ite	hi
 80032a4:	f083 0308 	eorhi.w	r3, r3, #8
   }
   else{
	adcVal2=adcVal2&0xF7;
 80032a8:	f023 0308 	bicls.w	r3, r3, #8
   }


	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);	//a         0
 80032ac:	2200      	movs	r2, #0
 80032ae:	2180      	movs	r1, #128	; 0x80
 80032b0:	484f      	ldr	r0, [pc, #316]	; (80033f0 <checkFeedback+0x338>)
	adcVal2=adcVal2&0xF7;
 80032b2:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);	//a         0
 80032b4:	f7fd fcf0 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);	//b         0
 80032b8:	2200      	movs	r2, #0
 80032ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032be:	484c      	ldr	r0, [pc, #304]	; (80033f0 <checkFeedback+0x338>)
 80032c0:	f7fd fcea 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);		//c         1
 80032c4:	2201      	movs	r2, #1
 80032c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032ca:	4849      	ldr	r0, [pc, #292]	; (80033f0 <checkFeedback+0x338>)
 80032cc:	f7fd fce4 	bl	8000c98 <HAL_GPIO_WritePin>
	//for channel 4

	SetAdcChannel(ADC_CHANNEL_9);
 80032d0:	2009      	movs	r0, #9
 80032d2:	f7ff fa89 	bl	80027e8 <SetAdcChannel>
	HAL_ADC_Start(&hadc2);
 80032d6:	4848      	ldr	r0, [pc, #288]	; (80033f8 <checkFeedback+0x340>)
 80032d8:	f7fd f9f4 	bl	80006c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 80032dc:	2164      	movs	r1, #100	; 0x64
 80032de:	4846      	ldr	r0, [pc, #280]	; (80033f8 <checkFeedback+0x340>)
 80032e0:	f7fd fa66 	bl	80007b0 <HAL_ADC_PollForConversion>

	AdcVal[5] = HAL_ADC_GetValue(&hadc2);
 80032e4:	4844      	ldr	r0, [pc, #272]	; (80033f8 <checkFeedback+0x340>)
 80032e6:	f7fd fab3 	bl	8000850 <HAL_ADC_GetValue>

	/*--------------updating the value of adc variable-----------------------*/
   if(AdcVal[5]>100)
   {
	adcVal1=adcVal1^0x10;
 80032ea:	782b      	ldrb	r3, [r5, #0]
	AdcVal[5] = HAL_ADC_GetValue(&hadc2);
 80032ec:	6170      	str	r0, [r6, #20]
   if(AdcVal[5]>100)
 80032ee:	2864      	cmp	r0, #100	; 0x64
	adcVal1=adcVal1^0x10;
 80032f0:	bf8c      	ite	hi
 80032f2:	f083 0310 	eorhi.w	r3, r3, #16
   }
   else{
	adcVal1=adcVal1&0xEF;
 80032f6:	f023 0310 	bicls.w	r3, r3, #16
   }

	SetAdcChannel(ADC_CHANNEL_8);
 80032fa:	2008      	movs	r0, #8
	adcVal1=adcVal1&0xEF;
 80032fc:	702b      	strb	r3, [r5, #0]
	SetAdcChannel(ADC_CHANNEL_8);
 80032fe:	f7ff fa73 	bl	80027e8 <SetAdcChannel>
	HAL_ADC_Start(&hadc1);
 8003302:	483e      	ldr	r0, [pc, #248]	; (80033fc <checkFeedback+0x344>)
 8003304:	f7fd f9de 	bl	80006c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8003308:	2164      	movs	r1, #100	; 0x64
 800330a:	483c      	ldr	r0, [pc, #240]	; (80033fc <checkFeedback+0x344>)
 800330c:	f7fd fa50 	bl	80007b0 <HAL_ADC_PollForConversion>

	AdcVal[13] = HAL_ADC_GetValue(&hadc1);
 8003310:	483a      	ldr	r0, [pc, #232]	; (80033fc <checkFeedback+0x344>)
 8003312:	f7fd fa9d 	bl	8000850 <HAL_ADC_GetValue>

	/*--------------updating the value of adc variable-----------------------*/
   if(AdcVal[13]>100)
   {
	adcVal2=adcVal2^0x10;
 8003316:	7823      	ldrb	r3, [r4, #0]
	AdcVal[13] = HAL_ADC_GetValue(&hadc1);
 8003318:	6370      	str	r0, [r6, #52]	; 0x34
   if(AdcVal[13]>100)
 800331a:	2864      	cmp	r0, #100	; 0x64
	adcVal2=adcVal2^0x10;
 800331c:	bf8c      	ite	hi
 800331e:	f083 0310 	eorhi.w	r3, r3, #16
   }
   else{
	adcVal2=adcVal2&0xEF;
 8003322:	f023 0310 	bicls.w	r3, r3, #16
   }

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);		//a        1
 8003326:	2201      	movs	r2, #1
 8003328:	2180      	movs	r1, #128	; 0x80
 800332a:	4831      	ldr	r0, [pc, #196]	; (80033f0 <checkFeedback+0x338>)
	adcVal2=adcVal2&0xEF;
 800332c:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);		//a        1
 800332e:	f7fd fcb3 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);	//b        0
 8003332:	2200      	movs	r2, #0
 8003334:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003338:	482d      	ldr	r0, [pc, #180]	; (80033f0 <checkFeedback+0x338>)
 800333a:	f7fd fcad 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);		//c        1
 800333e:	2201      	movs	r2, #1
 8003340:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003344:	482a      	ldr	r0, [pc, #168]	; (80033f0 <checkFeedback+0x338>)
 8003346:	f7fd fca7 	bl	8000c98 <HAL_GPIO_WritePin>
	//for channel 5

	SetAdcChannel(ADC_CHANNEL_9);
 800334a:	2009      	movs	r0, #9
 800334c:	f7ff fa4c 	bl	80027e8 <SetAdcChannel>
	HAL_ADC_Start(&hadc2);
 8003350:	4829      	ldr	r0, [pc, #164]	; (80033f8 <checkFeedback+0x340>)
 8003352:	f7fd f9b7 	bl	80006c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 8003356:	2164      	movs	r1, #100	; 0x64
 8003358:	4827      	ldr	r0, [pc, #156]	; (80033f8 <checkFeedback+0x340>)
 800335a:	f7fd fa29 	bl	80007b0 <HAL_ADC_PollForConversion>

	AdcVal[6] = HAL_ADC_GetValue(&hadc2);
 800335e:	4826      	ldr	r0, [pc, #152]	; (80033f8 <checkFeedback+0x340>)
 8003360:	f7fd fa76 	bl	8000850 <HAL_ADC_GetValue>

	/*--------------updating the value of adc variable-----------------------*/
   if(AdcVal[6]>100)
   {
	adcVal1=adcVal1^0x20;
 8003364:	782b      	ldrb	r3, [r5, #0]
	AdcVal[6] = HAL_ADC_GetValue(&hadc2);
 8003366:	61b0      	str	r0, [r6, #24]
   if(AdcVal[6]>100)
 8003368:	2864      	cmp	r0, #100	; 0x64
	adcVal1=adcVal1^0x20;
 800336a:	bf8c      	ite	hi
 800336c:	f083 0320 	eorhi.w	r3, r3, #32
   }
   else{
	adcVal1=adcVal1&0xDF;
 8003370:	f023 0320 	bicls.w	r3, r3, #32
   }

	SetAdcChannel(ADC_CHANNEL_8);
 8003374:	2008      	movs	r0, #8
	adcVal1=adcVal1&0xDF;
 8003376:	702b      	strb	r3, [r5, #0]
	SetAdcChannel(ADC_CHANNEL_8);
 8003378:	f7ff fa36 	bl	80027e8 <SetAdcChannel>
	HAL_ADC_Start(&hadc1);
 800337c:	481f      	ldr	r0, [pc, #124]	; (80033fc <checkFeedback+0x344>)
 800337e:	f7fd f9a1 	bl	80006c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8003382:	2164      	movs	r1, #100	; 0x64
 8003384:	481d      	ldr	r0, [pc, #116]	; (80033fc <checkFeedback+0x344>)
 8003386:	f7fd fa13 	bl	80007b0 <HAL_ADC_PollForConversion>

	AdcVal[14] = HAL_ADC_GetValue(&hadc1);
 800338a:	481c      	ldr	r0, [pc, #112]	; (80033fc <checkFeedback+0x344>)
 800338c:	f7fd fa60 	bl	8000850 <HAL_ADC_GetValue>

	/*--------------updating the value of adc variable-----------------------*/
   if(AdcVal[14]>100)
   {
	adcVal2=adcVal2^0x20;
 8003390:	7823      	ldrb	r3, [r4, #0]
	AdcVal[14] = HAL_ADC_GetValue(&hadc1);
 8003392:	63b0      	str	r0, [r6, #56]	; 0x38
   if(AdcVal[14]>100)
 8003394:	2864      	cmp	r0, #100	; 0x64
	adcVal2=adcVal2^0x20;
 8003396:	bf8c      	ite	hi
 8003398:	f083 0320 	eorhi.w	r3, r3, #32
   }
   else{
	adcVal2=adcVal2&0xDF;
 800339c:	f023 0320 	bicls.w	r3, r3, #32
   }

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);	//a      0
 80033a0:	2200      	movs	r2, #0
 80033a2:	2180      	movs	r1, #128	; 0x80
 80033a4:	4812      	ldr	r0, [pc, #72]	; (80033f0 <checkFeedback+0x338>)
	adcVal2=adcVal2&0xDF;
 80033a6:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);	//a      0
 80033a8:	f7fd fc76 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);		//b      1
 80033ac:	2201      	movs	r2, #1
 80033ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033b2:	480f      	ldr	r0, [pc, #60]	; (80033f0 <checkFeedback+0x338>)
 80033b4:	f7fd fc70 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);		//c      1
 80033b8:	2201      	movs	r2, #1
 80033ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033be:	480c      	ldr	r0, [pc, #48]	; (80033f0 <checkFeedback+0x338>)
 80033c0:	f7fd fc6a 	bl	8000c98 <HAL_GPIO_WritePin>
	//for channel 6

	SetAdcChannel(ADC_CHANNEL_9);
 80033c4:	2009      	movs	r0, #9
 80033c6:	f7ff fa0f 	bl	80027e8 <SetAdcChannel>
	HAL_ADC_Start(&hadc2);
 80033ca:	480b      	ldr	r0, [pc, #44]	; (80033f8 <checkFeedback+0x340>)
 80033cc:	f7fd f97a 	bl	80006c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 80033d0:	2164      	movs	r1, #100	; 0x64
 80033d2:	4809      	ldr	r0, [pc, #36]	; (80033f8 <checkFeedback+0x340>)
 80033d4:	f7fd f9ec 	bl	80007b0 <HAL_ADC_PollForConversion>

	AdcVal[7] = HAL_ADC_GetValue(&hadc2);
 80033d8:	4807      	ldr	r0, [pc, #28]	; (80033f8 <checkFeedback+0x340>)
 80033da:	f7fd fa39 	bl	8000850 <HAL_ADC_GetValue>

	/*--------------updating the value of adc variable-----------------------*/
   if(AdcVal[7]>100)
   {
	adcVal1=adcVal1^0x40;
 80033de:	782b      	ldrb	r3, [r5, #0]
	AdcVal[7] = HAL_ADC_GetValue(&hadc2);
 80033e0:	61f0      	str	r0, [r6, #28]
   if(AdcVal[7]>100)
 80033e2:	2864      	cmp	r0, #100	; 0x64
 80033e4:	e00c      	b.n	8003400 <checkFeedback+0x348>
 80033e6:	bf00      	nop
 80033e8:	20000f3f 	.word	0x20000f3f
 80033ec:	20000f38 	.word	0x20000f38
 80033f0:	40021000 	.word	0x40021000
 80033f4:	20000608 	.word	0x20000608
 80033f8:	2000029c 	.word	0x2000029c
 80033fc:	200003ac 	.word	0x200003ac
	adcVal1=adcVal1^0x40;
 8003400:	bf8c      	ite	hi
 8003402:	f083 0340 	eorhi.w	r3, r3, #64	; 0x40
   }
   else{
	adcVal1=adcVal1&0xBF;
 8003406:	f023 0340 	bicls.w	r3, r3, #64	; 0x40
   }

	SetAdcChannel(ADC_CHANNEL_8);
 800340a:	2008      	movs	r0, #8
	adcVal1=adcVal1&0xBF;
 800340c:	702b      	strb	r3, [r5, #0]
	SetAdcChannel(ADC_CHANNEL_8);
 800340e:	f7ff f9eb 	bl	80027e8 <SetAdcChannel>
	HAL_ADC_Start(&hadc1);
 8003412:	482c      	ldr	r0, [pc, #176]	; (80034c4 <checkFeedback+0x40c>)
 8003414:	f7fd f956 	bl	80006c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8003418:	2164      	movs	r1, #100	; 0x64
 800341a:	482a      	ldr	r0, [pc, #168]	; (80034c4 <checkFeedback+0x40c>)
 800341c:	f7fd f9c8 	bl	80007b0 <HAL_ADC_PollForConversion>

	AdcVal[15] = HAL_ADC_GetValue(&hadc1);
 8003420:	4828      	ldr	r0, [pc, #160]	; (80034c4 <checkFeedback+0x40c>)
 8003422:	f7fd fa15 	bl	8000850 <HAL_ADC_GetValue>

	/*--------------updating the value of adc variable-----------------------*/
   if(AdcVal[15]>100)
   {
	adcVal2=adcVal2^0x40;
 8003426:	7823      	ldrb	r3, [r4, #0]
	AdcVal[15] = HAL_ADC_GetValue(&hadc1);
 8003428:	63f0      	str	r0, [r6, #60]	; 0x3c
   if(AdcVal[15]>100)
 800342a:	2864      	cmp	r0, #100	; 0x64
	adcVal2=adcVal2^0x40;
 800342c:	bf8c      	ite	hi
 800342e:	f083 0340 	eorhi.w	r3, r3, #64	; 0x40
   }
   else{
	adcVal2=adcVal2&0xBF;
 8003432:	f023 0340 	bicls.w	r3, r3, #64	; 0x40
   }

//	       AdcVal[1] = HAL_ADC_GetValue(&hadc2);

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);	//a        1
 8003436:	2201      	movs	r2, #1
 8003438:	2180      	movs	r1, #128	; 0x80
 800343a:	4823      	ldr	r0, [pc, #140]	; (80034c8 <checkFeedback+0x410>)
	adcVal2=adcVal2&0xBF;
 800343c:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);	//a        1
 800343e:	f7fd fc2b 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);	//b        1
 8003442:	2201      	movs	r2, #1
 8003444:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003448:	481f      	ldr	r0, [pc, #124]	; (80034c8 <checkFeedback+0x410>)
 800344a:	f7fd fc25 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);	//c        1
 800344e:	2201      	movs	r2, #1
 8003450:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003454:	481c      	ldr	r0, [pc, #112]	; (80034c8 <checkFeedback+0x410>)
 8003456:	f7fd fc1f 	bl	8000c98 <HAL_GPIO_WritePin>
	//for channel 6

	SetAdcChannel(ADC_CHANNEL_9);
 800345a:	2009      	movs	r0, #9
 800345c:	f7ff f9c4 	bl	80027e8 <SetAdcChannel>
	HAL_ADC_Start(&hadc2);
 8003460:	481a      	ldr	r0, [pc, #104]	; (80034cc <checkFeedback+0x414>)
 8003462:	f7fd f92f 	bl	80006c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 8003466:	2164      	movs	r1, #100	; 0x64
 8003468:	4818      	ldr	r0, [pc, #96]	; (80034cc <checkFeedback+0x414>)
 800346a:	f7fd f9a1 	bl	80007b0 <HAL_ADC_PollForConversion>

	AdcVal[8] = HAL_ADC_GetValue(&hadc2);
 800346e:	4817      	ldr	r0, [pc, #92]	; (80034cc <checkFeedback+0x414>)
 8003470:	f7fd f9ee 	bl	8000850 <HAL_ADC_GetValue>

	/*--------------updating the value of adc variable-----------------------*/
   if(AdcVal[8]>100)
   {
	adcVal1=adcVal1^0x80;
 8003474:	782b      	ldrb	r3, [r5, #0]
	AdcVal[8] = HAL_ADC_GetValue(&hadc2);
 8003476:	6230      	str	r0, [r6, #32]
   if(AdcVal[8]>100)
 8003478:	2864      	cmp	r0, #100	; 0x64
	adcVal1=adcVal1^0x80;
 800347a:	bf8c      	ite	hi
 800347c:	f083 0380 	eorhi.w	r3, r3, #128	; 0x80
   }
   else{
	adcVal1=adcVal1&0x7F;
 8003480:	f003 037f 	andls.w	r3, r3, #127	; 0x7f
   }

	SetAdcChannel(ADC_CHANNEL_8);
 8003484:	2008      	movs	r0, #8
	adcVal1=adcVal1&0x7F;
 8003486:	702b      	strb	r3, [r5, #0]
	SetAdcChannel(ADC_CHANNEL_8);
 8003488:	f7ff f9ae 	bl	80027e8 <SetAdcChannel>
	HAL_ADC_Start(&hadc1);
 800348c:	480d      	ldr	r0, [pc, #52]	; (80034c4 <checkFeedback+0x40c>)
 800348e:	f7fd f919 	bl	80006c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8003492:	2164      	movs	r1, #100	; 0x64
 8003494:	480b      	ldr	r0, [pc, #44]	; (80034c4 <checkFeedback+0x40c>)
 8003496:	f7fd f98b 	bl	80007b0 <HAL_ADC_PollForConversion>

	AdcVal[16] = HAL_ADC_GetValue(&hadc1);
 800349a:	480a      	ldr	r0, [pc, #40]	; (80034c4 <checkFeedback+0x40c>)
 800349c:	f7fd f9d8 	bl	8000850 <HAL_ADC_GetValue>

	/*--------------updating the value of adc variable-----------------------*/
   if(AdcVal[16]>100)
   {
	adcVal2=adcVal2^0x80;
 80034a0:	7823      	ldrb	r3, [r4, #0]
	AdcVal[16] = HAL_ADC_GetValue(&hadc1);
 80034a2:	6430      	str	r0, [r6, #64]	; 0x40
   if(AdcVal[16]>100)
 80034a4:	2864      	cmp	r0, #100	; 0x64
	adcVal2=adcVal2^0x80;
 80034a6:	bf8c      	ite	hi
 80034a8:	f083 0380 	eorhi.w	r3, r3, #128	; 0x80
   }
   else{
	adcVal2=adcVal2&0x7F;
 80034ac:	f003 037f 	andls.w	r3, r3, #127	; 0x7f
 80034b0:	7023      	strb	r3, [r4, #0]
   }

/*-----------------if adcVal1 or adcVal2 is 0, making it 0xFF-----------------*/

   if(adcVal1==0x00){
 80034b2:	782b      	ldrb	r3, [r5, #0]
 80034b4:	b90b      	cbnz	r3, 80034ba <checkFeedback+0x402>
	   adcVal1=0xFF;
 80034b6:	23ff      	movs	r3, #255	; 0xff
 80034b8:	702b      	strb	r3, [r5, #0]
   }
   if(adcVal2==0x00){
 80034ba:	7823      	ldrb	r3, [r4, #0]
 80034bc:	b90b      	cbnz	r3, 80034c2 <checkFeedback+0x40a>
	   adcVal2=0xFF;
 80034be:	23ff      	movs	r3, #255	; 0xff
 80034c0:	7023      	strb	r3, [r4, #0]
 80034c2:	bd70      	pop	{r4, r5, r6, pc}
 80034c4:	200003ac 	.word	0x200003ac
 80034c8:	40021000 	.word	0x40021000
 80034cc:	2000029c 	.word	0x2000029c

080034d0 <offAll>:


}


void offAll(){
 80034d0:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80034d2:	4c2e      	ldr	r4, [pc, #184]	; (800358c <offAll+0xbc>)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80034d4:	4d2e      	ldr	r5, [pc, #184]	; (8003590 <offAll+0xc0>)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80034d6:	4620      	mov	r0, r4
 80034d8:	2200      	movs	r2, #0
 80034da:	2101      	movs	r1, #1
 80034dc:	f7fd fbdc 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 80034e0:	4620      	mov	r0, r4
 80034e2:	2200      	movs	r2, #0
 80034e4:	2102      	movs	r1, #2
 80034e6:	f7fd fbd7 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80034ea:	4628      	mov	r0, r5
 80034ec:	2200      	movs	r2, #0
 80034ee:	2101      	movs	r1, #1
 80034f0:	f7fd fbd2 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 80034f4:	4620      	mov	r0, r4
 80034f6:	2200      	movs	r2, #0
 80034f8:	2108      	movs	r1, #8
 80034fa:	f7fd fbcd 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80034fe:	4620      	mov	r0, r4
 8003500:	2200      	movs	r2, #0
 8003502:	2110      	movs	r1, #16
 8003504:	f7fd fbc8 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8003508:	4620      	mov	r0, r4
 800350a:	2200      	movs	r2, #0
 800350c:	2180      	movs	r1, #128	; 0x80
 800350e:	f7fd fbc3 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8003512:	4620      	mov	r0, r4
 8003514:	2200      	movs	r2, #0
 8003516:	f44f 7180 	mov.w	r1, #256	; 0x100
 800351a:	f7fd fbbd 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 800351e:	4620      	mov	r0, r4
 8003520:	2200      	movs	r2, #0
 8003522:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003526:	f7fd fbb7 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800352a:	4620      	mov	r0, r4
 800352c:	2200      	movs	r2, #0
 800352e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003532:	f7fd fbb1 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8003536:	4620      	mov	r0, r4
 8003538:	2200      	movs	r2, #0
 800353a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800353e:	f7fd fbab 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8003542:	4620      	mov	r0, r4
 8003544:	2200      	movs	r2, #0
 8003546:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800354a:	f7fd fba5 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800354e:	4620      	mov	r0, r4
 8003550:	2200      	movs	r2, #0
 8003552:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003556:	f7fd fb9f 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800355a:	4620      	mov	r0, r4
 800355c:	2200      	movs	r2, #0
 800355e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003562:	f7fd fb99 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8003566:	2200      	movs	r2, #0
 8003568:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800356c:	4809      	ldr	r0, [pc, #36]	; (8003594 <offAll+0xc4>)
 800356e:	f7fd fb93 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8003572:	4628      	mov	r0, r5
 8003574:	2200      	movs	r2, #0
 8003576:	2108      	movs	r1, #8
 8003578:	f7fd fb8e 	bl	8000c98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800357c:	2200      	movs	r2, #0
 800357e:	2108      	movs	r1, #8
 8003580:	4805      	ldr	r0, [pc, #20]	; (8003598 <offAll+0xc8>)
}
 8003582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8003586:	f7fd bb87 	b.w	8000c98 <HAL_GPIO_WritePin>
 800358a:	bf00      	nop
 800358c:	40020c00 	.word	0x40020c00
 8003590:	40020000 	.word	0x40020000
 8003594:	40021000 	.word	0x40021000
 8003598:	40020800 	.word	0x40020800

0800359c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800359c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80035a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80035a2:	e003      	b.n	80035ac <LoopCopyDataInit>

080035a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80035a4:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80035a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80035a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80035aa:	3104      	adds	r1, #4

080035ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80035ac:	480b      	ldr	r0, [pc, #44]	; (80035dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80035ae:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80035b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80035b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035b4:	d3f6      	bcc.n	80035a4 <CopyDataInit>
  ldr  r2, =_sbss
 80035b6:	4a0b      	ldr	r2, [pc, #44]	; (80035e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80035b8:	e002      	b.n	80035c0 <LoopFillZerobss>

080035ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80035ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80035bc:	f842 3b04 	str.w	r3, [r2], #4

080035c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035c0:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80035c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035c4:	d3f9      	bcc.n	80035ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80035c6:	f7ff fd1b 	bl	8003000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035ca:	f000 f811 	bl	80035f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035ce:	f7fe fd9f 	bl	8002110 <main>
  bx  lr    
 80035d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80035d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80035d8:	0800368c 	.word	0x0800368c
  ldr  r0, =_sdata
 80035dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80035e0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80035e4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80035e8:	20000f44 	.word	0x20000f44

080035ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035ec:	e7fe      	b.n	80035ec <ADC_IRQHandler>
	...

080035f0 <__libc_init_array>:
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	4e0d      	ldr	r6, [pc, #52]	; (8003628 <__libc_init_array+0x38>)
 80035f4:	4c0d      	ldr	r4, [pc, #52]	; (800362c <__libc_init_array+0x3c>)
 80035f6:	1ba4      	subs	r4, r4, r6
 80035f8:	10a4      	asrs	r4, r4, #2
 80035fa:	2500      	movs	r5, #0
 80035fc:	42a5      	cmp	r5, r4
 80035fe:	d109      	bne.n	8003614 <__libc_init_array+0x24>
 8003600:	4e0b      	ldr	r6, [pc, #44]	; (8003630 <__libc_init_array+0x40>)
 8003602:	4c0c      	ldr	r4, [pc, #48]	; (8003634 <__libc_init_array+0x44>)
 8003604:	f000 f820 	bl	8003648 <_init>
 8003608:	1ba4      	subs	r4, r4, r6
 800360a:	10a4      	asrs	r4, r4, #2
 800360c:	2500      	movs	r5, #0
 800360e:	42a5      	cmp	r5, r4
 8003610:	d105      	bne.n	800361e <__libc_init_array+0x2e>
 8003612:	bd70      	pop	{r4, r5, r6, pc}
 8003614:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003618:	4798      	blx	r3
 800361a:	3501      	adds	r5, #1
 800361c:	e7ee      	b.n	80035fc <__libc_init_array+0xc>
 800361e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003622:	4798      	blx	r3
 8003624:	3501      	adds	r5, #1
 8003626:	e7f2      	b.n	800360e <__libc_init_array+0x1e>
 8003628:	08003684 	.word	0x08003684
 800362c:	08003684 	.word	0x08003684
 8003630:	08003684 	.word	0x08003684
 8003634:	08003688 	.word	0x08003688

08003638 <memset>:
 8003638:	4402      	add	r2, r0
 800363a:	4603      	mov	r3, r0
 800363c:	4293      	cmp	r3, r2
 800363e:	d100      	bne.n	8003642 <memset+0xa>
 8003640:	4770      	bx	lr
 8003642:	f803 1b01 	strb.w	r1, [r3], #1
 8003646:	e7f9      	b.n	800363c <memset+0x4>

08003648 <_init>:
 8003648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364a:	bf00      	nop
 800364c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800364e:	bc08      	pop	{r3}
 8003650:	469e      	mov	lr, r3
 8003652:	4770      	bx	lr

08003654 <_fini>:
 8003654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003656:	bf00      	nop
 8003658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365a:	bc08      	pop	{r3}
 800365c:	469e      	mov	lr, r3
 800365e:	4770      	bx	lr
